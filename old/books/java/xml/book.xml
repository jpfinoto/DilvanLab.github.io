<?xml version="1.0" encoding="UTF-8"?>
<!-- DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
"http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd" -->
<book id="java">
  <bookinfo>
    <title>Distributed Programming using Java</title>

    <subtitle>An Introductory Course on Java</subtitle>

    <author>
      <firstname>Dilvan</firstname>

      <othername>de Abreu</othername>

      <surname>Moreira</surname>

      <email>dilvan@computer.org</email>
    </author>

    <editor>
      <firstname>Dilvan</firstname>

      <surname>Moreira</surname>
    </editor>

    <copyright>
      <year>1997</year>

      <year>1998</year>

      <year>1999</year>

      <year>2000</year>

      <year>2001</year>

      <year>2002</year>

      <year>2003</year>

      <year>2004</year>

      <holder>Dilvan Moreira</holder>
    </copyright>

    <edition>First</edition>

    <publisher>
      <publishername>Dilvan Moreira</publishername>

      <address><city>SÃ£o Carlos </city><country>Brazil</country></address>
    </publisher>

    <revhistory>
      <revision>
        <revnumber>$Revision: 1.7 $</revnumber>

        <date>$Date: 2004/08/03 15:44:34 $</date>
      </revision>
    </revhistory>

    <pubdate>August 1997</pubdate>
  </bookinfo>

  <chapter id="object_oriented_programming">
    <title>Object Oriented Programming</title>

    <section id="object_oriented_programming_semantic_gap">
      <title><ulink url="/dilvan/thesis.phd/objects.html#HEADING1-1">Semantic
      Gap</ulink></title>

      <figure>
        <title>Semantic Gap</title>

        <mediaobject>
          <imageobject>
            <imagedata contentdepth="502px" contentwidth="670px"
                       fileref="img/objects1.gif" format="GIF" />
          </imageobject>
        </mediaobject>
      </figure>

      <section>
        <title>Definition</title>

        <para>The semantic gap is the difference between how completely a
        model represents reality and reality itself.</para>
      </section>

      <section>
        <title>Advantage</title>

        <para>The smaller the gap, the easier the system is to understand and
        modify. Modifications will tend to be local, affecting one or few
        individual items, which are represented by code isolated in
        objects.</para>
      </section>

      <section>
        <title>Why is it important?</title>

        <para>All computer programs represent real objects in a way or
        another.</para>

        <para><ulink url="../audio/objects1.asf"><inlinegraphic
        fileref="img/asf.gif" format="GIF" />Audio in
        Portuguese</ulink></para>
      </section>
    </section>

    <section id="object_oriented_programming_objects">
      <title>Objects</title>

      <section>
        <title><ulink
        url="/dilvan/thesis.phd/objects.html#HEADING1-7">Object</ulink></title>

        <para>An entity able to save a state (information) and which offers a
        number of operations (behaviours) to either examine or affect this
        state.</para>
      </section>

      <section>
        <title>Object Oriented Model</title>

        <para>It is one where the components of the modelled system are
        represented by a number of objects. These objects usually correspond
        to real life entities, such as a share, an invoice, or a customer.
        Information (states) and operations (behaviours) to each
        object.</para>

        <figure>
          <title>The outside world view of an object</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="352px" contentwidth="448px"
                         fileref="img/objects2.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <table>
          <title>Invoice Object</title>

          <tgroup cols="2">
            <colspec align="center" />

            <thead>
              <row>
                <entry align="center">Invoice Object State</entry>

                <entry align="center">Invoice Object Operations</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>Company to be invoiced</entry>

                <entry>Bill the customer</entry>
              </row>

              <row>
                <entry>Value</entry>

                <entry>Add Taxes</entry>
              </row>

              <row>
                <entry>Taxes Deductions</entry>

                <entry>Change Address</entry>
              </row>

              <row>
                <entry>etc.</entry>

                <entry>etc.</entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <para><ulink url="../audio/objects2.asf"><inlinegraphic
        fileref="img/asf.gif" format="GIF" />Audio in
        Portuguese</ulink></para>
      </section>

      <section>
        <title>What is important?</title>

        <para></para>

        <itemizedlist>
          <listitem>
            <para>Information hiding: <phrase>The only part of an object
            accessible from the outside should be its operations, its inside
            should be hidden from the outside world.</phrase></para>
          </listitem>

          <listitem>
            <para>Encapsulation:<phrase>Encapsulating related variables and
            methods into a neat software bundle is a simple yet powerful idea
            that provides two primary benefits to software
            developers.</phrase></para>

            <para><phrase>Advantages:</phrase><itemizedlist>
                <listitem>
                  <para>Information hiding</para>
                </listitem>

                <listitem>
                  <para>Modularity</para>
                </listitem>
              </itemizedlist></para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title>Communication</title>

        <para></para>

        <itemizedlist>
          <listitem>
            <para>Message Passing:<phrase>More pure;</phrase></para>
          </listitem>

          <listitem>
            <para>Method calling: <phrase>More efficient .</phrase></para>
          </listitem>
        </itemizedlist>

        <para><ulink url="../audio/objects3.asf"><inlinegraphic
        fileref="img/asf.gif" format="GIF" />Audio in
        Portuguese</ulink></para>
      </section>
    </section>

    <section id="object_oriented_programming_classes_and_instances">
      <title>Classes and Instances</title>

      <section>
        <title><ulink
        url="/dilvan/thesis.phd/objects.html#HEADING1-16">Classes</ulink></title>

        <para>A class is a definition, a template or a mould to enable the
        creation of new objects and is, therefore, a description of the common
        characteristics of several objects.</para>

        <para>Using the concept of class, characteristics can be associated
        with a whole group of objects. A class can then be described as an
        abstraction that describes all the common characteristics of the
        objects forming part of it.</para>
      </section>

      <section>
        <title>Instances</title>

        <para>An object that belongs to a class is called an instance of that
        class.</para>

        <figure>
          <title>Instances of class Man</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="503px" contentwidth="398px"
                         fileref="img/objects3.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <para><ulink url="../audio/objects4.asf"><inlinegraphic
        fileref="img/asf.gif" format="GIF" />Audio in
        Portuguese</ulink></para>
      </section>
    </section>

    <section id="object_oriented_programming_inheritance">
      <title><ulink
      url="/dilvan/thesis.phd/objects.html#HEADING1-21">Inheritance</ulink></title>

      <para>When two classes have a lot of common information, this common
      information can be shared by the classes by extracting it and putting it
      in another class. All the common characteristics are collected under one
      specific class and the original classes inherit them from it.</para>

      <figure>
        <title>Classes inheritance</title>

        <mediaobject>
          <imageobject>
            <imagedata contentdepth="525px" contentwidth="384px"
                       fileref="img/objects4.gif" format="GIF" />
          </imageobject>
        </mediaobject>
      </figure>

      <section>
        <title>Advantages</title>

        <para></para>

        <itemizedlist>
          <listitem>
            <para>Using inheritance, common descriptions can be reused,
            promoting the concept of code reusability;</para>

            <para>Inheritance cuts redundancy as descendant classes only
            implement the extra information that differentiates them (It leads
            to smaller, easier to understand systems);</para>

            <para>When modifications are implemented on the common information
            all descendent classes automatically inherit it (This helps create
            models that are easier to modify and evolve).</para>
          </listitem>
        </itemizedlist>

        <para><ulink url="../audio/objects5.asf"><inlinegraphic
        fileref="img/asf.gif" format="GIF" />Audio in
        Portuguese</ulink></para>
      </section>
    </section>

    <section id="object_oriented_programming_polimorphism">
      <title><ulink
      url="/dilvan/thesis.phd/objects.html#HEADING1-27">Polymorphism</ulink></title>

      <para>Polymorphism means that the sender of a message does not need to
      be aware of which class the receiving object belongs to. The receiving
      instance can belong to an arbitrary class .</para>

      <section>
        <title>What is important?</title>

        <para>A sender object needs only to know that another object can
        perform a certain behaviour, not which class it belongs to nor which
        operations will perform that behaviour.</para>
      </section>

      <section>
        <title>Advantage</title>

        <para>Flexible and modification resistant systems can be implemented.
        When a new object from a new class is added, this modification should
        only affect this new object not those who send messages to it.</para>

        <figure>
          <title>Polymorphism</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="403px" contentwidth="432px"
                         fileref="img/object5.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <para><ulink url="../audio/objects6.asf"><inlinegraphic
        fileref="img/asf.gif" format="GIF" />Audio in
        Portuguese</ulink></para>
      </section>
    </section>
  </chapter>

  <chapter id="the_java_language">
    <title>The Java Language</title>

    <section id="the_java_language_variables_and_data_types">
      <title>Variables and Data Types</title>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/java/nutsandbolts/variables.html">Variable
        Types</ulink></title>

        <para>Java is a strongly typed language. It tests type information
        even at runtime.</para>

        <caution>
          <informalfigure>
            <mediaobject>
              <imageobject>
                <imagedata fileref="img/noc++.gif" format="GIF" />
              </imageobject>
            </mediaobject>
          </informalfigure>

          <para>You can not force a type upon a variable as you do in C. The
          following program will result in an error:</para>

          <programlisting>String var1= new String("foo");
URL var2= (URL) var1;</programlisting>
        </caution>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/java/nutsandbolts/datatypes.html">Primitive
        Data Types</ulink></title>

        <para>Primitive types contain a single value and include types such as
        integer, floating point, character, and boolean. The following table
        lists, by keyword, all of the primitive data types supported by Java,
        their size and format, and a brief description of each.</para>

        <table>
          <title>Primitive Data Types</title>

          <tgroup cols="3">
            <colspec align="center" />

            <thead>
              <row>
                <entry align="center">Type</entry>

                <entry align="center">Size/Format</entry>

                <entry align="center">Description</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>byte</entry>

                <entry>8-bit two's complement</entry>

                <entry>Byte-length integer</entry>
              </row>

              <row>
                <entry>short</entry>

                <entry>16-bit two's complement</entry>

                <entry>Short integer</entry>
              </row>

              <row>
                <entry>int</entry>

                <entry>32-bit two's complement</entry>

                <entry>Integer</entry>
              </row>

              <row>
                <entry>long</entry>

                <entry>64-bit two's complement</entry>

                <entry>Long integer</entry>
              </row>

              <row>
                <entry>float</entry>

                <entry>32-bit IEEE 754</entry>

                <entry>Single-precision floating point</entry>
              </row>

              <row>
                <entry>double</entry>

                <entry>64-bit IEEE 754</entry>

                <entry>Double-precision floating point</entry>
              </row>

              <row>
                <entry>char</entry>

                <entry>16-bit Unicode character</entry>

                <entry>A single character</entry>
              </row>

              <row>
                <entry>boolean</entry>

                <entry>true or false</entry>

                <entry>A boolean value (true or false)</entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <para><ulink url="../audio/javalang1.asf"><inlinegraphic
        fileref="img/asf.gif" format="GIF" />Audio in
        Portuguese</ulink></para>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/java/nutsandbolts/variables.html">Reference
        Data Types</ulink></title>

        <para>Reference types are called such because the value of a reference
        variable is a reference (a pointer in other terminology) to the actual
        value or set of values represented by the variable.</para>

        <figure>
          <title>Pointers in Java</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="342px" contentwidth="413px"
                         fileref="img/javalang1.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <section>
          <title>Evaluation</title>

          <para>When used in a statement or expression, the name args
          evaluates to the address of the memory location where the array
          lives. This is in contrast to the name of a primitive variable, the
          count variable, which evaluates to the variable's actual
          value.</para>

          <caution>
            <informalfigure>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="img/noc++.gif" format="GIF" />
                </imageobject>
              </mediaobject>
            </informalfigure>

            <para>The following C types are not supported by Java:</para>

            <para>Pointer, Struct, Union</para>
          </caution>

          <para><ulink url="../audio/javalang2.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/java/nutsandbolts/variableNames.html">Variable
        Names</ulink></title>

        <para>In Java, a variable name:</para>

        <itemizedlist>
          <listitem>
            <para>must be a legal Java identifier comprised of a series of
            Unicode characters. This is important so that programmers can
            write code that is meaningful in their native languages;</para>
          </listitem>

          <listitem>
            <para>must not be the same as a keyword or a boolean literal (true
            or false);</para>
          </listitem>

          <listitem>
            <para>must not have the same name as another variable whose
            declaration appears in the same scope.</para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/java/nutsandbolts/scope.html">Scope</ulink></title>

        <para>A variable's scope is the block of code within which the
        variable is accessible. Also, a variable's scope determines when the
        variable is created and destroyed. Scope places a variable into one of
        these four categories:</para>

        <itemizedlist>
          <listitem>
            <para>member variable;</para>
          </listitem>

          <listitem>
            <para>local variable</para>
          </listitem>

          <listitem>
            <para>method parameter</para>
          </listitem>

          <listitem>
            <para>exception handler parameter</para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/java/nutsandbolts/variableInitialization.html">Variable
        Initialization</ulink></title>

        <para>Local variables and member variables can be initialized when
        they are declared:</para>

        <programlisting>int count = 0;</programlisting>
      </section>

      <section>
        <title>Reference type Initialization</title>

        <para>A reference type when is created its pointer is initialized to
        NULL.</para>

        <para>All of them must be initialized before use:</para>

        <programlisting>String name= new String("Java");</programlisting>

        <para>or</para>

        <programlisting>String name;
name= new String("Java");</programlisting>

        <caution>
          <informalfigure>
            <mediaobject>
              <imageobject>
                <imagedata fileref="img/noc++.gif" format="GIF" />
              </imageobject>
            </mediaobject>
          </informalfigure>

          <para>Objects in Java have to be always explicit created using the
          command new.</para>
        </caution>

        <para><ulink url="../audio/javalang3.asf"><inlinegraphic
        fileref="img/asf.gif" format="GIF" />Audio in
        Portuguese</ulink></para>
      </section>
    </section>

    <section id="the_java_language_operators">
      <title><ulink
      url="http://java.sun.com/docs/books/tutorial/java/nutsandbolts/operators.html">Operators</ulink></title>

      <para>Operators perform some function on either one or two
      operands.</para>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/java/nutsandbolts/arithmetic.html">Arithmetic
        Operators</ulink></title>

        <table>
          <title>Arithmetic Operators</title>

          <tgroup cols="3">
            <colspec align="center" />

            <thead>
              <row>
                <entry align="center">Operator</entry>

                <entry align="center">Use</entry>

                <entry align="center">Description</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>+</entry>

                <entry>op1 + op2</entry>

                <entry>Adds op1 and op2</entry>
              </row>

              <row>
                <entry>-</entry>

                <entry>op1 - op2</entry>

                <entry>Subtracts op2 from op1</entry>
              </row>

              <row>
                <entry>*</entry>

                <entry>op1 * op2</entry>

                <entry>Multiplies op1 and op2</entry>
              </row>

              <row>
                <entry>/</entry>

                <entry>op1 / op2</entry>

                <entry>Divides op1 by op2</entry>
              </row>

              <row>
                <entry>%</entry>

                <entry>op1 % op2</entry>

                <entry>Computes the remainder of dividing op1 by op2</entry>
              </row>

              <row>
                <entry>+</entry>

                <entry>+ op</entry>

                <entry>Indicates a positive value</entry>
              </row>

              <row>
                <entry>-</entry>

                <entry>- op</entry>

                <entry>Arithmetically negates op</entry>
              </row>

              <row>
                <entry>++</entry>

                <entry>op ++</entry>

                <entry>Increments op by 1; Eval before incrementing</entry>
              </row>

              <row>
                <entry>++</entry>

                <entry>++ op</entry>

                <entry>Increments op by 1; Eval after incrementing</entry>
              </row>

              <row>
                <entry>--</entry>

                <entry>op --</entry>

                <entry>Decrements op by 1; Eval before decrementing</entry>
              </row>

              <row>
                <entry>--</entry>

                <entry>-- op</entry>

                <entry>Decrements op by 1; Eval after decrementing</entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <caution>
          <informalfigure>
            <mediaobject>
              <imageobject>
                <imagedata fileref="img/noc++.gif" format="GIF" />
              </imageobject>
            </mediaobject>
          </informalfigure>

          <para>The Java language extends the definition of the operator + to
          include string concatenation.</para>
        </caution>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/java/nutsandbolts/relational.html">Relational
        Operators</ulink></title>

        <table>
          <title>Relational Operators</title>

          <tgroup cols="3">
            <colspec align="center" />

            <thead>
              <row>
                <entry align="center">Operator</entry>

                <entry align="center">Use</entry>

                <entry>Returns true if</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>&gt;</entry>

                <entry>op1 &gt; op2</entry>

                <entry>op1 is greater than op2</entry>
              </row>

              <row>
                <entry>&gt;=</entry>

                <entry>op1 &gt;= op2</entry>

                <entry>op1 is greater than or equal to op2</entry>
              </row>

              <row>
                <entry>&lt;</entry>

                <entry>op1 &lt; op2</entry>

                <entry>op1 is less than to op2</entry>
              </row>

              <row>
                <entry>&lt;=</entry>

                <entry>op1 &lt;= op2</entry>

                <entry>op1 is less than or equal to op2</entry>
              </row>

              <row>
                <entry>==</entry>

                <entry>op1 == op2</entry>

                <entry>op1 and op2 are equal</entry>
              </row>

              <row>
                <entry>!=</entry>

                <entry>op1 != op2</entry>

                <entry>op1 and op2 are not equal</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/java/nutsandbolts/relational.html">Conditional
        Operators</ulink></title>

        <para></para>

        <table>
          <title>Conditional Operators</title>

          <tgroup cols="3">
            <colspec align="center" />

            <thead>
              <row>
                <entry align="center">Operator</entry>

                <entry align="center">Use</entry>

                <entry>Returns true if</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>&amp;&amp;</entry>

                <entry>op1 &amp;&amp; op2</entry>

                <entry>op1 and op2 are both true</entry>
              </row>

              <row>
                <entry>||</entry>

                <entry>op1 || op2</entry>

                <entry>op1 or op2 is true</entry>
              </row>

              <row>
                <entry>!</entry>

                <entry>! op</entry>

                <entry>op is false</entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <para><ulink url="../audio/javalang4.asf"><inlinegraphic
        fileref="img/asf.gif" format="GIF" />Audio in
        Portuguese</ulink></para>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/java/nutsandbolts/bitwise.html">Bitwise
        Operators</ulink></title>

        <table>
          <title>Bitwise Operators</title>

          <tgroup cols="3">
            <colspec align="center" />

            <thead>
              <row>
                <entry align="center">Operator</entry>

                <entry align="center">Use</entry>

                <entry align="center">Operation</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>&gt;&gt;</entry>

                <entry>op1 &gt;&gt; op2</entry>

                <entry>shift bits of op1 right by distance op2</entry>
              </row>

              <row>
                <entry>&lt;&lt;</entry>

                <entry>op1 &lt;&lt; op2</entry>

                <entry>shift bits of op1 left by distance op2</entry>
              </row>

              <row>
                <entry>&gt;&gt;&gt;</entry>

                <entry>op1 &gt;&gt;&gt; op2</entry>

                <entry>shift bits of op1 right by distance op2
                (unsigned)</entry>
              </row>

              <row>
                <entry>&amp;</entry>

                <entry>op1 &amp; op2</entry>

                <entry>bitwise and</entry>
              </row>

              <row>
                <entry>|</entry>

                <entry>op1 | op2</entry>

                <entry>bitwise or</entry>
              </row>

              <row>
                <entry>^</entry>

                <entry>op1 ^ op2</entry>

                <entry>bitwise xor</entry>
              </row>

              <row>
                <entry>~</entry>

                <entry>~ op</entry>

                <entry>bitwise complement</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/java/nutsandbolts/assignment.html">Assignment
        Operator</ulink></title>

        <para>You use the assignment operator, =, to assign one value to
        another.</para>

        <caution>
          <informalfigure>
            <mediaobject>
              <imageobject>
                <imagedata fileref="img/noc++.gif" format="GIF" />
              </imageobject>
            </mediaobject>
          </informalfigure>

          <para>The assignment operator just changes the pointer of Reference
          variables.</para>
        </caution>

        <para>The code:</para>

        <programlisting>StringBuffer car1 = new StringBuffer("Toyota");
StringBuffer car2 = new StringBuffer("Ford");</programlisting>

        <para>Results in the following memory structures:</para>

        <figure>
          <title>Memory Structure: 2 pointers</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="202px" contentwidth="330px"
                         fileref="img/javalang2.gif" />
            </imageobject>
          </mediaobject>
        </figure>

        <para>If the Assignment operator is used:</para>

        <programlisting>car2 = car1;</programlisting>

        <para>The car2 variable is pointed to the same object as car1
        variable:</para>

        <figure>
          <title>Memory Structure: Same pointer</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="200px" contentwidth="330px"
                         fileref="img/javalang3.gif" />
            </imageobject>
          </mediaobject>
        </figure>

        <para>A common source of mistakes is to think that car2 holds a copy
        of the object in car1 and to change it not expecting this to affect
        the object held by car1.</para>

        <para><ulink url="../audio/javalang6.asf"><inlinegraphic
        fileref="img/asf.gif" format="GIF" />Audio in
        Portuguese</ulink></para>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/java/nutsandbolts/opsummary.html">Short
        Cuts for the Assignment operator</ulink></title>

        <table>
          <title>Short Cut for the Assignment Operator</title>

          <tgroup cols="3">
            <colspec align="center" />

            <thead>
              <row>
                <entry align="center">Operator</entry>

                <entry align="center">Use</entry>

                <entry align="center">Equivalent to</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>+=</entry>

                <entry>op1 += op2</entry>

                <entry>op1 = op1 + op2</entry>
              </row>

              <row>
                <entry>-=</entry>

                <entry>op1 -= op2</entry>

                <entry>op1 = op1 - op2</entry>
              </row>

              <row>
                <entry>*=</entry>

                <entry>op1 *= op2</entry>

                <entry>op1 = op1 * op2</entry>
              </row>

              <row>
                <entry>/=</entry>

                <entry>op1 /= op2</entry>

                <entry>op1 = op1 / op2</entry>
              </row>

              <row>
                <entry>-=</entry>

                <entry>op1 -= op2</entry>

                <entry>op1 = op1 - op2</entry>
              </row>

              <row>
                <entry>|=</entry>

                <entry>op1 |= op2</entry>

                <entry>op1 = op1 | op2</entry>
              </row>

              <row>
                <entry>^=</entry>

                <entry>op1 ^= op2</entry>

                <entry>op1 = op1 ^ op2</entry>
              </row>

              <row>
                <entry>&lt;&lt;=</entry>

                <entry>op1 &lt;&lt;= op2</entry>

                <entry>op1 = op1 &lt;&lt; op2</entry>
              </row>

              <row>
                <entry>&gt;&gt;=</entry>

                <entry>op1 &gt;&gt;= op2</entry>

                <entry>op1 = op1 &gt;&gt; op2</entry>
              </row>

              <row>
                <entry>&gt;&gt;&gt;=</entry>

                <entry>op1 &gt;&gt;&gt;= op2</entry>

                <entry>op1 = op1 &gt;&gt;&gt; op2</entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <para><ulink url="../audio/javalang5.asf"><inlinegraphic
        fileref="img/asf.gif" format="GIF" />Audio in
        Portuguese</ulink></para>
      </section>
    </section>

    <section id="the_java_language_expressions_and_control_flow_statements">
      <title>Expressions and Control Flow Statements</title>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/java/nutsandbolts/expressions.html">Expressions</ulink></title>

        <para>Expressions are used to compute and assign values to variables
        and to help control the execution flow of a program. The job of an
        expression is two-fold: perform the computation indicated by the
        elements of the expression and return some value.</para>

        <para>Definition:</para>

        <para>An expression is a series of variables, operators, and method
        calls (constructed according to the syntax of the language) that
        evaluates to a single value. For example:</para>

        <programlisting>count++; 
System.in.read() != -1;</programlisting>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/java/nutsandbolts/flow.html">Control
        Flow Statements</ulink></title>

        <para>Statements that change the flow of execution of a
        program.</para>

        <table>
          <title>Control Flow Statements</title>

          <tgroup cols="2">
            <colspec align="center" />

            <thead>
              <row>
                <entry align="center">Statement</entry>

                <entry align="center">Keyword</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>decision making</entry>

                <entry>if-else, switch-case</entry>
              </row>

              <row>
                <entry>loop</entry>

                <entry>for, while, do-while</entry>
              </row>

              <row>
                <entry>exception</entry>

                <entry>try-catch-finally, throw</entry>
              </row>

              <row>
                <entry>miscellaneous</entry>

                <entry>break, continue, label:, return</entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <section>
          <title><ulink
          url="http://java.sun.com/docs/books/tutorial/java/nutsandbolts/while.html">While
          Statement</ulink></title>

          <para>A while statement performs some action while a certain
          condition remains true.</para>

          <programlisting>while (expression)
    statement;</programlisting>

          <para>Example:</para>

          <programlisting>. . .
while (System.in.read() != -1) {
    count++;
    System.out.println("Read a character. Count = " + count);
}
. . .</programlisting>

          <para><ulink url="../audio/javalang7.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>

        <section>
          <title><ulink
          url="http://java.sun.com/docs/books/tutorial/java/nutsandbolts/if.html">If-else
          Statement</ulink></title>

          <para>The if-else statement provides your programs with the ability
          to selectively execute other statements based on some
          criteria.</para>

          <programlisting>if (expression)
    statement;</programlisting>

          <para>Example:</para>

          <programlisting>. . .
if (response == OK) {
  // code to perform OK action
} else {
  // code to perform Cancel action
}</programlisting>
        </section>

        <section>
          <title><ulink
          url="http://java.sun.com/docs/books/tutorial/java/nutsandbolts/switch.html">Switch
          Statement</ulink></title>

          <para>The switch statement conditionally perform statements based on
          some expression.</para>

          <para>Example:</para>

          <programlisting>. . .
switch (month) {
case 1:  System.out.println("January"); break;
case 2:  System.out.println("February"); break;
  ...
case 11: System.out.println("November"); break;
case 12: System.out.println("December"); break;
default: System.out.println("Hey, that's not a valid month!");
    break;
}</programlisting>
        </section>

        <section>
          <title><ulink
          url="http://java.sun.com/docs/books/tutorial/java/nutsandbolts/for.html">For
          Statement</ulink></title>

          <para>Use the for loop when you know the constraints of the loop
          (its initialization instruction, termination criteria, and increment
          instruction).</para>

          <programlisting>for (initialization; termination; increment)
    statement;</programlisting>

          <para>Example:</para>

          <programlisting>. . .
for (int i = 0; i &lt; a.length; i++) {
    // do something to the i th element of a
}</programlisting>

          <para><ulink url="../audio/javalang8.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>

        <section>
          <title><ulink
          url="http://java.sun.com/docs/books/tutorial/java/nutsandbolts/while.html">Do-while
          Statement</ulink></title>

          <para>The do-while loop is similar to the while loop except that the
          expression is evaluated at the bottom of the loop:</para>

          <programlisting>do {
    statements
} while (booleanExpression);</programlisting>

          <para>Example:</para>

          <programlisting>. . .
do {
    c = in.read();
    . . .
} while (c != -1);</programlisting>
        </section>

        <section>
          <title><ulink
          url="http://java.sun.com/docs/books/tutorial/java/nutsandbolts/branch.html">Continue
          and Break Statements</ulink></title>

          <para>Continue and break statements are used to continue or break
          loops or switch statements. Used without labels, they have the same
          effects as in C.</para>

          <para>To continue or break multiple-nested loop or switch
          statements, labels can be placed on loop and switch statements and
          used to break out or continue to the blocks named by them. For
          instance (from the String class):</para>

          <programlisting>test: for (int i = fromIndex; i+max1&lt;=max2; i++) {
          if (chartAt(i)==c0){
              for (int k=1; k&lt;max1; k++) {
                  if (chartAt(i+k) != str.chartAt(k)) {
                      continue test;
                  }
              }      /* end of inner for loop */
          }
      }              /* end of outer for loop */</programlisting>

          <caution>
            <informalfigure>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="img/noc++.gif" format="GIF" />
                </imageobject>
              </mediaobject>
            </informalfigure>

            <para>Labeled continues and breaks are an alternative to the goto
            statement which is not supported by Java.</para>
          </caution>
        </section>

        <section>
          <title><ulink
          url="http://java.sun.com/docs/books/tutorial/java/nutsandbolts/branch.html#return">Return
          Statement</ulink></title>

          <para>Return exits from the current method and jump back to the
          statement within the calling method that follows the original method
          call.</para>

          <para>Example:</para>

          <programlisting>return ++count;</programlisting>
        </section>

        <section>
          <title><ulink
          url="http://java.sun.com/docs/books/tutorial/java/nutsandbolts/exception.html">Exception
          Handling Statements</ulink></title>

          <para>The calling method can use the try, catch, and finally to
          catch and handle exceptions. It will be seen together with <ulink
          url="/library/books/tutorial1.02/java/exceptions/index.html">Exceptions</ulink>.</para>

          <para><ulink url="../audio/javalang9.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>
    </section>

    <section id="the_java_language_arrays">
      <title><ulink
      url="http://java.sun.com/docs/books/tutorial/java/data/arrays.html">Arrays</ulink></title>

      <para>An array in Java is a real object with a runtime representation.
      You can declare and allocate arrays of any type, and arrays of arrays
      (to get multi-dimension arrays). But arrays do not belong to a Java
      class, they are special objects.</para>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/java/data/arraybasics.html">Declaration</ulink></title>

        <programlisting>int[] foo;</programlisting>
      </section>

      <section>
        <title>Initialization:</title>

        <para>Like any other reference variable, after declaring an array
        memory has to be allocated to it. Arrays can contain any legal Java
        data type:</para>

        <programlisting>foo= new int[40];</programlisting>
      </section>

      <section>
        <title>Out of bounds:</title>

        <para>Java arrays automatically test for index out of bounds errors.
        It throws the IndexOutOfBoundsException if one happens.</para>
      </section>

      <section>
        <title>The length property:</title>

        <para>Length is a property provided for all Java arrays, it retrieves
        the current length of the array:</para>

        <programlisting>System.out.println(foo.length);</programlisting>

        <para><ulink url="../audio/javalang10.asf"><inlinegraphic
        fileref="img/asf.gif" format="GIF" />Audio in
        Portuguese</ulink></para>
      </section>
    </section>
  </chapter>

  <chapter id="oop_in_java">
    <title>OOP in Java</title>

    <section id="oop_in_java_objetcs">
      <title><ulink
      url="http://java.sun.com/docs/books/tutorial/java/data/objects.html">Objects</ulink></title>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/java/data/objectcreation.html">Instantiating
        an Object (the new operator)</ulink></title>

        <para>The new operator instantiates a class by allocating memory for a
        new object of that type. new requires a single argument: a call to a
        constructor method. Constructor methods are special methods provided
        by each Java class that are responsible for initializing new objects
        of that type.</para>

        <note>
          <para>The new operator creates the object, the constructor
          initializes it.</para>
        </note>

        <para>The new operator returns a reference to the newly created
        object. This reference can be assigned to a variable of the
        appropriate type.</para>

        <programlisting>Rectangle rect = new Rectangle(0, 0, 100, 200);</programlisting>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/java/data/usingobject.html">Using
        Objects</ulink></title>

        <para>There are two ways to change the state of an object:</para>

        <itemizedlist>
          <listitem>
            <para>Manipulate the object's variables directly;</para>
          </listitem>

          <listitem>
            <para>Call one of the object's methods.</para>
          </listitem>
        </itemizedlist>

        <para>The second option is more object-oriented and safer because you
        manipulate the object's variables indirectly through its protective
        layer of methods rather than twiddling directly with them.</para>

        <para>Manipulating an object's variables directly is often considered
        error-prone; you could potentially put the object into an inconsistent
        state.</para>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/java/data/usingobject.html">Referencing
        an Object's Variables</ulink></title>

        <para>To access an object's variables, simply append the variable name
        to an object reference with an intervening '.' (period).</para>

        <programlisting>objectReference.variable</programlisting>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/java/data/usingobject.html">Calling
        an Object's Methods</ulink></title>

        <para>Calling an object's method is similar to getting an object's
        variable. To call an object's method, simply append the method name to
        an object reference with an intervening '.' (period), and provide any
        arguments to the method within enclosing parentheses. If the method
        does not require any arguments, just use empty parentheses.</para>

        <programlisting>objectReference.methodName(argumentList);</programlisting>

        <para>or</para>

        <programlisting>objectReference.methodName();</programlisting>

        <para><ulink url="../audio/OOPjava1.asf"><inlinegraphic
        fileref="img/asf.gif" format="GIF" />Audio in
        Portuguese</ulink></para>
      </section>
    </section>

    <section id="oop_in_java_classes">
      <title><ulink
      url="http://java.sun.com/docs/books/tutorial/java/javaOO/classes.html">Classes</ulink></title>

      <para>A class is a blueprint or prototype that you can use to create
      many objects.</para>

      <programlisting>classDeclaration { 
  memberVariableDeclarations
  methodDeclarations 
}</programlisting>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/java/javaOO/classdecl.html">The
        Class Declaration</ulink></title>

        <para>At minimum, a class declaration must contain the class keyword
        and the name of the class that you are defining:</para>

        <programlisting>class NameOfClass {
    . . .
}</programlisting>

        <section>
          <title>Declaring a Class's Superclass</title>

          <para>In Java, every class has a superclass. If you do not specify a
          superclass for your class, it is assumed to be the Object class
          (declared in java.lang).</para>

          <programlisting>class NameOfClass extends SuperClassName {
    . . .
}</programlisting>

          <para>A subclass inherits variables and methods from its
          superclass.</para>
        </section>

        <section>
          <title>Listing the Interfaces Implemented by a Class</title>

          <para>An interface declares a set of methods and constants without
          specifying the implementation for any of the methods. When a class
          claims to implement an interface, it's claiming to provide
          implementations for all of the methods declared in the
          interface.</para>

          <programlisting>class ImaginaryNumber extends Number implements Arithmetic {
    . . .
}</programlisting>
        </section>

        <section>
          <title>Summary of a Class Declaration</title>

          <programlisting>[ modifiers ] class ClassName [ extends SuperClassName ] [ implements InterfaceNames ] {
    . . .
}</programlisting>

          <itemizedlist>
            <listitem>
              <para>modifiers declare whether the class is public, abstract,
              or final</para>
            </listitem>

            <listitem>
              <para>ClassName sets the name of the class you are
              declaring</para>
            </listitem>

            <listitem>
              <para>SuperClassName is the name of ClassName's
              superclass</para>
            </listitem>

            <listitem>
              <para>InterfaceNames is a comma-delimited list of the interfaces
              implemented</para>
            </listitem>
          </itemizedlist>

          <para><ulink url="../audio/OOPjava2.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/java/javaOO/variables.html">Declaring
        Member Variables</ulink></title>

        <programlisting>class IntegerClass {
  int anInteger;
  . . . // define methods here . . .
}</programlisting>

        <caution>
          <informalfigure>
            <mediaobject>
              <imageobject>
                <imagedata fileref="img/noc++.gif" format="GIF" />
              </imageobject>
            </mediaobject>
          </informalfigure>

          <para>A member variable and a method can have the same name.</para>
        </caution>

        <para>In short, a member variable declaration looks like this:</para>

        <programlisting>[accessSpecifier] [static] [final] type variableName</programlisting>

        <itemizedlist>
          <listitem>
            <para>accessSpecifier defines which other classes have access to
            the variable. You control access to methods using the same
            specifiers, so Controlling Access to Members of a Class covers how
            you can control access to both member variables and
            methods.</para>
          </listitem>

          <listitem>
            <para>static indicates that the variable is a class member
            variable as opposed to an instance member variable. You also use
            static to declare class methods. Instance and Class Members talks
            about declaring instance and class variables and writing instance
            and class methods.</para>
          </listitem>
        </itemizedlist>

        <section>
          <title>Declaring Constants</title>

          <programlisting>class Avo {
  final double AVOGADRO = 6.023e23;
}</programlisting>
        </section>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/java/javaOO/methods.html">The
        Method Declaration</ulink></title>

        <programlisting>returnType methodName() {
      . . . 
}</programlisting>

        <section>
          <title><ulink
          url="http://java.sun.com/docs/books/tutorial/java/javaOO/arguments.html">Passing
          Information into a Method</ulink></title>

          <caution>
            <informalfigure>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="img/noc++.gif" format="GIF" />
                </imageobject>
              </mediaobject>
            </informalfigure>

            <para>In Java methods arguments are passed only by value.</para>
          </caution>

          <section>
            <title><ulink
            url="http://java.sun.com/docs/books/tutorial/java/javaOO/methodbody.html">The
            Method Body</ulink></title>

            <programlisting>. . .
boolean isEmpty() {
    if (topelement == STACK_EMPTY)
            return true;
    else
            return false;
}</programlisting>

            <para><ulink url="../audio/OOPjava3.asf"><inlinegraphic
            fileref="img/asf.gif" format="GIF" />Audio in
            Portuguese</ulink></para>
          </section>
        </section>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/java/javaOO/accesscontrol.html">Controlling
        Access to Members of a Class</ulink></title>

        <para></para>

        <table frame="none">
          <title>Access to Members of a Class</title>

          <tgroup cols="5">
            <colspec align="center" />

            <thead>
              <row>
                <entry align="center">Specifier</entry>

                <entry align="center">class</entry>

                <entry align="center">subclass</entry>

                <entry align="center">package</entry>

                <entry align="center">world</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry align="left">private</entry>

                <entry align="center">X</entry>

                <entry align="center"></entry>

                <entry align="center"></entry>

                <entry align="center"></entry>
              </row>

              <row>
                <entry align="left">protected</entry>

                <entry align="center">X</entry>

                <entry align="center">X</entry>

                <entry align="center">X</entry>

                <entry align="center"></entry>
              </row>

              <row>
                <entry align="left">public</entry>

                <entry align="center">X</entry>

                <entry align="center">X</entry>

                <entry align="center">X</entry>

                <entry align="center">X</entry>
              </row>

              <row>
                <entry align="left">package</entry>

                <entry align="center">X</entry>

                <entry align="center"></entry>

                <entry align="center">X</entry>

                <entry align="center"></entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <section>
          <title><ulink
          url="http://java.sun.com/docs/books/tutorial/java/javaOO/accesscontrol.html">Private</ulink></title>

          <para>The most restrictive access level is private. A private member
          is accessible only to the class in which it is defined.</para>

          <programlisting>class Alpha {
    private int iamprivate;
    private void privateMethod() {
        System.out.println("privateMethod");
    }
}
class Beta {
    void accessMethod() {
        Alpha a = new Alpha();
        a.iamprivate = 10;      // illegal
        a.privateMethod();      // illegal
    }
}</programlisting>
        </section>

        <section>
          <title><ulink
          url="http://java.sun.com/docs/books/tutorial/java/javaOO/accesscontrol.html">Protected</ulink></title>

          <para>It allows the class itself, subclasses, and all classes in the
          same package to access the members.</para>

          <programlisting>package Greek;
class Alpha {
    protected int iamprotected;
    protected void protectedMethod() {
        System.out.println("protectedMethod");
    }
}
package Greek;
class Gamma {
    void accessMethod() {
        Alpha a = new Alpha();
        a.iamprotected = 10;    // legal
        a.protectedMethod();    // legal
    }
}
package Latin;
class Delta extends Alpha {
    void accessMethod(Alpha a, Delta d) {
        a.iamprotected = 10; a.protectedMethod();   // illegal
        d.iamprotected = 10; d.protectedMethod();   // legal
    }
}</programlisting>

          <para><ulink url="../audio/OOPjava4.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>

        <section>
          <title><ulink
          url="http://java.sun.com/docs/books/tutorial/java/javaOO/accesscontrol.html">Public</ulink></title>

          <para>Any class, in any package, has access to a class's public
          members.</para>

          <programlisting>package Greek;

class Alpha {
    public int iampublic;
    public void publicMethod() {
        System.out.println("publicMethod");
    }
}
import Greek.*;

package Roman;

class Beta {
    void accessMethod() {
        Alpha a = new Alpha();
        a.iampublic = 10;       // legal
        a.publicMethod();       // legal
    }
}</programlisting>
        </section>

        <section>
          <title><ulink
          url="http://java.sun.com/docs/books/tutorial/java/javaOO/accesscontrol.html">Package-Access</ulink></title>

          <para>The last access level is what you get if you don't explicitly
          set a member's access to one of the other levels. This access level
          allows classes in the same package as your class to access the
          members.</para>

          <programlisting>package Greek;

class Alpha {
    int iampackage;
    void packageMetho() {
        System.out.println("packageMethod");
    }
}
package Greek;

class Beta {
    void accessMethod() {
        Alpha a = new Alpha();
        a.iampackage = 10;     // legal
        a.packageMethod();     // legal
    }
}</programlisting>

          <para><ulink url="../audio/OOPjava5.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>
    </section>

    <section id="oop_in_java_subclasses_and_inheritance">
      <title><ulink
      url="http://java.sun.com/docs/books/tutorial/java/concepts/inheritance.html">Subclasses
      and Inheritance</ulink></title>

      <para>The derived class is called a subclass. The class from which its
      derived is called the superclass.</para>

      <figure>
        <title>Subclass</title>

        <mediaobject>
          <imageobject>
            <imagedata contentdepth="138px" contentwidth="314px"
                       fileref="img/OOPjava1.gif" format="GIF" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>In Java all classes must be derived from some class. The top-most
      class, the class from which all other classes are derived, is the Object
      class defined in java.lang:</para>

      <figure>
        <title>Inheritance</title>

        <mediaobject>
          <imageobject>
            <imagedata contentdepth="314px" contentwidth="612px"
                       fileref="img/OOPjava2.gif" format="GIF" />
          </imageobject>
        </mediaobject>
      </figure>

      <section>
        <title>Definition</title>

        <para>A subclass is a class that derives from another class. It
        subclass inherits state and behavior in the form of variables and
        methods from all of its ancestors. It can just use the items inherited
        from its superclass as is, or the subclass can modify or override it.
        So, as you drop down in the hierarchy, the classes become more and
        more specialized.</para>

        <para><ulink url="../audio/OOPjava6.asf"><inlinegraphic
        fileref="img/asf.gif" format="GIF" />Audio in
        Portuguese</ulink></para>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/java/javaOO/subclass.html">Creating
        Subclasses</ulink></title>

        <para>To declare a subclass you would write:</para>

        <programlisting>class SubClass extends SuperClass { . . . }</programlisting>

        <caution>
          <informalfigure>
            <mediaobject>
              <imageobject>
                <imagedata fileref="img/noc++.gif" format="GIF" />
              </imageobject>
            </mediaobject>
          </informalfigure>

          <para>A Java class can have only one direct superclass. Java does
          not support multiple inheritance.</para>
        </caution>

        <section>
          <title>Seen Hidden Member Variables</title>

          <para>Member variables defined in the subclass hide member variables
          of the same name in the superclass. Consider this superclass and
          subclass pair:</para>

          <programlisting>class Super {
    Number aNumber;
}
class Sub extends Super {
    Float aNumber;
}
super.aNumber</programlisting>
        </section>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/java/javaOO/override.html">Overriding
        Methods</ulink></title>

        <para>A subclass can either completely override the implementation for
        an inherited method or the subclass can enhance the method by adding
        functionality to it.</para>

        <itemizedlist>
          <listitem>
            <para>Replacing a Superclass's Method Implementation</para>
          </listitem>

          <listitem>
            <para>Adding to a Superclass's Method Implementation</para>
          </listitem>

          <listitem>
            <para>Methods a Subclass Cannot Override</para>

            <programlisting>class ChessAlgorithm {
   . . .
   final void nextMove(ChessPiece piece) {...}
   static void mate(ChessPiece piece) {...}
   . . .
}</programlisting>
          </listitem>

          <listitem>
            <para>Methods a Subclass Must Override</para>

            <programlisting>abstract class GraphicObject {
   . . .
   abstract void draw();
   . . .
}</programlisting>
          </listitem>
        </itemizedlist>

        <para><ulink url="../audio/OOPjava7.asf"><inlinegraphic
        fileref="img/asf.gif" format="GIF" />Audio in
        Portuguese</ulink></para>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/java/javaOO/final.html">Writing
        Final Classes and Methods</ulink></title>

        <section>
          <title>Final Classes</title>

          <para>You can declare that your class is final; that is, that your
          class cannot be subclassed. There are (at least) two reasons why you
          might want to do this: security reasons and design reasons.</para>
        </section>

        <section>
          <title>Final Methods</title>

          <para>You can use the final keyword in a method declaration to
          indicate to the compiler that the method cannot be overridden by
          subclasses.</para>
        </section>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/java/javaOO/abstract.html">Writing
        Abstract Classes and Methods</ulink></title>

        <section>
          <title>Abstract Classes</title>

          <para>Classes, which implement abstract concepts and should not be
          instantiated, are called abstract classes. An abstract class is a
          class that can only be subclassed - it cannot be
          instantiated.</para>
        </section>

        <section>
          <title>Abstract Methods</title>

          <para>An abstract class may contain abstract methods, that is,
          methods with no implementation. In this way, an abstract class can
          define a complete programming interface thereby providing its
          subclasses with the method declarations for all of the methods
          necessary to implement that programming interface.</para>
        </section>

        <section>
          <title>Architectural advantage</title>

          <para>Abstract classes provide a way to represent objects at a
          conceptual generic level.</para>

          <para>In a graphic library, you can create an abstract class to
          represent a generic graphic object and a method for drawing it. This
          method is them only implemented on the derived classes.</para>

          <figure>
            <title>Graphic Classes</title>

            <mediaobject>
              <imageobject>
                <imagedata contentdepth="160px" contentwidth="328px"
                           fileref="img/OOPjava3.gif" format="GIF" />
              </imageobject>
            </mediaobject>
          </figure>

          <para><ulink url="../audio/OOPjava8.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>
    </section>

    <section id="oop_in_java_interfaces">
      <title><ulink
      url="http://java.sun.com/docs/books/tutorial/java/interpack/interfaces.html">Interfaces</ulink></title>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/java/interpack/interfaceDef.html">Definition</ulink></title>

        <para>An interface is a collection of method definitions (without
        implementations) and constant values.</para>

        <section>
          <title>Advantages</title>

          <itemizedlist>
            <listitem>
              <para>capturing similarities between unrelated classes without
              forcing a class relationship;</para>
            </listitem>

            <listitem>
              <para>declaring methods that one or more classes are expected to
              implement;</para>
            </listitem>

            <listitem>
              <para>revealing an object's programming interface without
              revealing its class (objects such as these are called anonymous
              objects and can be useful when shipping a package of classes to
              other developers).</para>
            </listitem>
          </itemizedlist>
        </section>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/java/interpack/createinterface.html">Defining
        an Interface</ulink></title>

        <para>The interface declaration and the interface body:</para>

        <programlisting>interfaceDeclaration {
    interfaceBody
}</programlisting>

        <section>
          <title>The interface Declaration</title>

          <programlisting>[public] interface InterfaceName [extends listOfSuperInterfaces] {
     . . .
}
interface Collection {
   int MAXIMUM = 500;
   void add(Object obj);
   void delete(Object obj);
   Object find(Object obj);
   int currentCount();
}</programlisting>
        </section>

        <section>
          <title>Multiple Extensions (Inheritance)</title>

          <para>An interface can extend multiple interfaces (while a class can
          only extend one), and an interface cannot extend classes.</para>

          <para><ulink url="../audio/OOPjava9.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/java/interpack/usinginterface.html">Implementing
        an Interface</ulink></title>

        <para>To use an interface, you write a class that implements the
        interface.</para>

        <para>Definition: To implement an interface a class has to provides a
        method implementation for all of the methods declared within the
        interface.</para>

        <programlisting>class FIFOQueue implements Collection {
   . . .
   void add(Object obj) { . . . }
   . . .
}</programlisting>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/java/interpack/interfaceAsType.html">Using
        an Interface as a Type</ulink></title>

        <para>An interface is a new reference data type.</para>

        <para>You can use interface names anywhere you'd use any other type
        name: variable declarations, method parameters and so on:</para>

        <programlisting>interface CellAble {
   void draw();
   void toString();
   void toFloat();
}

class Row {
   . . .
   private CellAble[] contents;
   . . .
   void setObjectAt(CellAble ca, int index) {
      . . .
   }
   . . .
}</programlisting>

        <para>Any object that implemented the CellAble interface can be
        contained in the contents array and can be passed into the
        setObjectAt() method.</para>

        <para><ulink url="../audio/OOPjava10.asf"><inlinegraphic
        fileref="img/asf.gif" format="GIF" />Audio in
        Portuguese</ulink></para>
      </section>
    </section>

    <section id="oop_in_java_packages">
      <title><ulink
      url="http://java.sun.com/docs/books/tutorial/java/interpack/packages.html">Packages</ulink></title>

      <para>Groups of related classes bundled into a package. Packages can
      also contain interface definitions.</para>

      <section>
        <title>Advantages</title>

        <itemizedlist>
          <listitem>
            <para>It makes objects easier to find and use.</para>
          </listitem>

          <listitem>
            <para>It avoids naming conflicts.</para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/java/interpack/createpkgs.html">Roll
        Your Own Packages</ulink></title>

        <section>
          <title>Definition</title>

          <programlisting>package graphics;
interface Draggable { . . . }
class Circle { . . . }
class Rectangle { . . . }</programlisting>

          <para>The .class files generated must be placed in a directory named
          graphics somewhere in your CLASSPATH.</para>

          <para>CLASSPATH: A list of directories that indicate where on the
          file system you've installed various compiled Java classes and
          interfaces.</para>

          <para>Java searches your CLASSPATH for a directory whose name
          matches the package name of which the class is a member.</para>

          <para>Note: If you don't specify a package, your classes and
          interfaces become members of the default package, which has no
          name.</para>
        </section>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/java/interpack/usepkgs.html">Using
        the Classes and Interfaces from a Package</ulink></title>

        <para>To use the classes and interfaces defined in one package from
        within another package, you need to import the package:</para>

        <programlisting>import graphics.Circle;
import graphics.*;</programlisting>

        <para>Also, the classes and interfaces must be declared public.</para>

        <para>This packages are always automatically imported:</para>

        <itemizedlist>
          <listitem>
            <para>The default package (a package with no name);</para>
          </listitem>

          <listitem>
            <para>The java.lang package.</para>
          </listitem>
        </itemizedlist>

        <para><ulink url="../audio/OOPjava11.asf"><inlinegraphic
        fileref="img/asf.gif" format="GIF" />Audio in
        Portuguese</ulink></para>
      </section>

      <section>
        <title><ulink
        url="/library/books/tutorial1.02/java/javaOO/javapkgs.html">The Java
        Packages</ulink></title>

        <section>
          <title>The Java language package</title>

          <para>It contains classes that are core to the Java language:</para>

          <itemizedlist>
            <listitem>
              <para>Object: The class from which all others inherit.</para>
            </listitem>

            <listitem>
              <para>Data Type Wrappers: A collection of classes used to wrap
              variables of a primitive data type.</para>
            </listitem>

            <listitem>
              <para>Strings: Two classes that implement character data.</para>
            </listitem>

            <listitem>
              <para>System and Runtime : These two classes provide let your
              programs use system resources.</para>
            </listitem>

            <listitem>
              <para>Threads: It implements the multi-threading capabilities so
              important to the Java language.</para>
            </listitem>

            <listitem>
              <para>Classes: The Class class provides a runtime description of
              a class and the ClassLoader class allows you to load classes
              during runtime.</para>
            </listitem>

            <listitem>
              <para>Math: A library of math routines and values such as
              pi.</para>
            </listitem>

            <listitem>
              <para>Exceptions, Errors and Throwable: Classes that handle
              errors.</para>
            </listitem>

            <listitem>
              <para>Processes: Process objects represent the system
              processes.</para>
            </listitem>
          </itemizedlist>
        </section>

        <section>
          <title>The Java I/O Package</title>

          <para>The Java I/O Package provides a set of input and output
          streams.</para>
        </section>

        <section>
          <title>The Java Utility Package</title>

          <para>This Java package, java.util, contains a collection of utility
          classes.</para>
        </section>

        <section>
          <title>The Java Networking Package</title>

          <para>The java.net package implements various networking
          capabilities.</para>
        </section>

        <section>
          <title>The Applet Package</title>

          <para>This package contains the Applet class -- the class that you
          must subclass if you're writing an applet.</para>
        </section>

        <section>
          <title>The Abstract Window Toolkit Packages</title>

          <para>Three packages comprise the Abstract Window Toolkit.</para>

          <para><ulink url="../audio/OOPjava12.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>
    </section>

    <section id="oop_in_java_string_class">
      <title><ulink
      url="http://java.sun.com/docs/books/tutorial/java/data/strings.html">String
      Class</ulink></title>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/java/data/whytwo.html">Two
        classes for strings</ulink></title>

        <itemizedlist>
          <listitem>
            <para>String, for constant strings.</para>
          </listitem>

          <listitem>
            <para>StringBuffer, for strings that can change.</para>
          </listitem>
        </itemizedlist>

        <para>Why use String? Because they are constants, Strings are cheaper
        than StringBuffers and they can be shared.</para>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/java/data/creating.html">Creating
        Strings and StringBuffers</ulink></title>

        <programlisting>StringBuffer dest = new StringBuffer(len);
StringBuffer dest = new StringBuffer();

String dest = new String("Destination");</programlisting>
      </section>

      <section>
        <title>String literals</title>

        <programlisting>"Gobbledy gook."</programlisting>

        <para>is equivalent to:</para>

        <programlisting>new String("Gobbledy gook.")</programlisting>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/java/data/accessors.html">Accessor
        Methods</ulink></title>

        <programlisting>charAt()</programlisting>

        <para>and</para>

        <programlisting>length()</programlisting>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/java/data/modifying.html">Modifying
        StringBuffers</ulink></title>

        <programlisting>append()</programlisting>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/java/data/conversion.html">Converting
        Objects to Strings</ulink></title>

        <programlisting>toString();</programlisting>

        <para>All classes inherit toString() from the Object class and many
        classes override this method to provide an implementation that is
        meaningful to that class. Implement it in your classes too!</para>

        <programlisting>valueOf()</programlisting>

        <para>Static member of String that can be used to convert variables of
        different types to Strings.</para>

        <para><ulink url="../audio/OOPjava13.asf"><inlinegraphic
        fileref="img/asf.gif" format="GIF" />Audio in
        Portuguese</ulink></para>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/java/data/stringsAndJavac.html">Strings
        and the Java Compiler</ulink></title>

        <para>The Java compiler uses the String and StringBuffer classes
        behind the scenes to handle literal strings and concatenation.</para>

        <section>
          <title>Literal Strings</title>

          <programlisting>"Hello World!"</programlisting>

          <para>You can use literal strings anywhere you would use a String
          object.</para>

          <programlisting>System.out.println("I add that you look lovely today.");
int len = "Goodbye Cruel World".length();
String s = "Hola Mundo";</programlisting>

          <para>The above construct is equivalent to, but more efficient than,
          this one, which ends up creating two Strings instead of one:</para>

          <programlisting>String s = new String("Hola Mundo");</programlisting>
        </section>

        <section>
          <title>Concatenation and the + Operator</title>

          <programlisting>String cat = "cat";
System.out.println("con" + cat + "enation");</programlisting>

          <para>The above example compiles to:</para>

          <programlisting>String cat = "cat";
System.out.println(new StringBuffer().append("con").append(cat).append("enation"));</programlisting>

          <para>You can also use the + operator to append values to a String
          that are not themselves Strings:</para>

          <programlisting>System.out.println("Java's Number " + 1);</programlisting>

          <caution>
            <informalfigure>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="img/noc++.gif" format="GIF" />
                </imageobject>
              </mediaobject>
            </informalfigure>

            <para>Java Strings are First-class Objects, unlike C or C++
            strings which are simply null-terminated arrays of 8-bit
            characters.</para>
          </caution>

          <para><ulink url="../audio/OOPjava14.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>
    </section>

    <section id="oop_in_java_system_class">
      <title><ulink
      url="http://java.sun.com/docs/books/tutorial/essential/system/using.html">System
      Class</ulink></title>

      <para>Often, a program requires access to system resources such as
      properties, standard input and output streams, or the current
      time:</para>

      <figure>
        <title>System Class</title>

        <mediaobject>
          <imageobject>
            <imagedata contentdepth="215px" contentwidth="303px"
                       fileref="img/OOPjava5.gif" format="GIF" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>System class include:</para>

      <itemizedlist>
        <listitem>
          <para>standard input, output, and error streams;</para>
        </listitem>

        <listitem>
          <para>system properties;</para>
        </listitem>

        <listitem>
          <para>garbage collection;</para>
        </listitem>

        <listitem>
          <para>loading dynamic libraries;</para>
        </listitem>

        <listitem>
          <para>miscellany, including copying arrays, getting the current
          time, exiting the runtime environment, and using the security
          manager.</para>
        </listitem>
      </itemizedlist>

      <note>
        <para>All of System's methods and variables are class methods and
        class variables.</para>
      </note>

      <section>
        <title><ulink
        url="/library/books/tutorial1.02/java/system/properties.html">System
        Properties</ulink></title>

        <para>A set of properties - key/value pairs - that define traits or
        attributes of the current working environment.</para>

        <table>
          <title>System Properties</title>

          <tgroup cols="3">
            <colspec align="center" />

            <thead>
              <row>
                <entry align="center">Key</entry>

                <entry align="center">Meaning</entry>

                <entry align="center">Applet Access</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>"file.separator"</entry>

                <entry>File separator (e.g., "/")</entry>

                <entry>yes</entry>
              </row>

              <row>
                <entry>"java.class.path"</entry>

                <entry>Java classpath</entry>

                <entry>no</entry>
              </row>

              <row>
                <entry>"java.class.version"</entry>

                <entry>Java class version number</entry>

                <entry>yes</entry>
              </row>

              <row>
                <entry>"java.home"</entry>

                <entry>Java installation directory</entry>

                <entry>no</entry>
              </row>

              <row>
                <entry>"java.vendor"</entry>

                <entry>Java vendor-specific string</entry>

                <entry>yes</entry>
              </row>

              <row>
                <entry>"java.vendor.url"</entry>

                <entry>Java vendor URL</entry>

                <entry>yes</entry>
              </row>

              <row>
                <entry>"java.version"</entry>

                <entry>Java version number</entry>

                <entry>yes</entry>
              </row>

              <row>
                <entry>"line.separator"</entry>

                <entry>Line separator</entry>

                <entry>yes</entry>
              </row>

              <row>
                <entry>"os.arch"</entry>

                <entry>Operating system architecture</entry>

                <entry>yes</entry>
              </row>

              <row>
                <entry>"os.name"</entry>

                <entry>Operating system name</entry>

                <entry>yes</entry>
              </row>

              <row>
                <entry>"path.separator"</entry>

                <entry>Path separator (e.g., ":")</entry>

                <entry>yes</entry>
              </row>

              <row>
                <entry>"user.dir"</entry>

                <entry>User's current working directory</entry>

                <entry>no</entry>
              </row>

              <row>
                <entry>"user.home"</entry>

                <entry>User home directory</entry>

                <entry>no</entry>
              </row>

              <row>
                <entry>"user.name"</entry>

                <entry>User account name</entry>

                <entry>no</entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <para><ulink url="../audio/OOPjava15.asf"><inlinegraphic
        fileref="img/asf.gif" format="GIF" />Audio in
        Portuguese</ulink></para>
      </section>

      <section>
        <title>Reading/Writing System Properties</title>

        <programlisting>System.getProperty("path.separator");

System.getProperty("subliminal.message", "Buy Java Now!");</programlisting>

        <para>The getProperties() returns a Properties object.</para>

        <para>The setProperties() method: takes a Properties object.</para>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/essential/system/garbage.html">Forcing
        Finalization and Garbage Collection</ulink></title>

        <programlisting>System.runFinalization();</programlisting>

        <para>This method calls the finalize() methods on all objects that are
        waiting to be garbage collected.</para>

        <programlisting>System.gc();</programlisting>

        <para>It asks the garbage collector to run at any time by calling
        System's gc() method.</para>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/essential/system/runtime.html">The
        Runtime Object</ulink></title>

        <para>It bypasses the system-independent interface of the System class
        and use system resources directly from the runtime environment.</para>

        <figure>
          <title>Runtime Object</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="347px" contentwidth="492px"
                         fileref="img/OOPjava6.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <para>The oval labelled Runtime in the diagram represents the current
        runtime environment and is an instance of the Runtime Class.</para>

        <note>
          <para>Messaging the Runtime object directly compromises your ability
          to run your program on different systems. You should do this only in
          special situation.</para>
        </note>

        <section>
          <title><ulink
          url="http://java.sun.com/docs/books/tutorial/essential/system/iostreams.html">The
          Standard I/O Streams</ulink></title>

          <para></para>

          <para><ulink url="../audio/OOPjava16.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>
    </section>

    <section id="oop_in_java_input_output_streams">
      <title><ulink
      url="http://java.sun.com/docs/books/tutorial/essential/io/">Input/Output
      Streams</ulink></title>

      <section>
        <title>Definition</title>

        <para>A stream is a flowing sequence of characters.</para>

        <itemizedlist>
          <listitem>
            <para>A program can get input by reading characters from a stream
            attached to a source.</para>
          </listitem>

          <listitem>
            <para>A program can produce output by writing characters to a
            stream attached to a destination.</para>
          </listitem>

          <listitem>
            <para>Input and output sources can be anything that can contain
            data: a file, a string, or memory.</para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/essential/io/overview.html">The
        System class Streams</ulink></title>

        <itemizedlist>
          <listitem>
            <para>standard input: InputStream System.in</para>
          </listitem>

          <listitem>
            <para>standard output: PrintStream System.out</para>
          </listitem>

          <listitem>
            <para>standard error: PrintStream System.err</para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/essential/io/overview.html">InputStream
        Class</ulink></title>

        <figure>
          <title>InputStream Class</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="214px" contentwidth="492px"
                         fileref="img/OOPjava7.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/essential/io/overview.html">OutputStream
        Class</ulink></title>

        <figure>
          <title>OutputStream Class</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="145px" contentwidth="423px"
                         fileref="img/OOPjava8.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/essential/io/overview.html">Simple
        Input and Output Streams</ulink></title>

        <section>
          <title>FileInputStream and FileOutputStream</title>

          <para>Read data from or write data to a file on the native file
          system.</para>
        </section>

        <section>
          <title>PipedInputStream and PipedOutputStream</title>

          <para>Implement the input and output components of a pipe.</para>
        </section>

        <section>
          <title>ByteArrayInputStream and ByteArrayOutputStream</title>

          <para>Read data from or write data to a byte array in memory.</para>
        </section>

        <section>
          <title>SequenceInputStream</title>

          <para>Concatenate multiple input streams into one input
          stream.</para>
        </section>

        <section>
          <title>StringBufferInputStream</title>

          <para>Allow programs to read from a StringBuffer as if it were an
          input stream.</para>
        </section>

        <section>
          <title><ulink
          url="http://java.sun.com/docs/books/tutorial/essential/io/filtered.html">Filtered
          Streams</ulink></title>

          <para>To use a filtered input (output) stream, you attach the
          filtered stream to another input (output) stream:</para>

          <programlisting>DataInputStream dis = new DataInputStream(System.in.read());
String input;
while ((input = dis.readLine()) != null) {
  . . . // do something interesting here }</programlisting>

          <para><command>DataInputStream and DataOutputStream</command></para>

          <para><command>BufferedInputStream and
          BufferedOutputStream</command></para>

          <para><command>LineNumberInputStream</command></para>

          <para><command>PushbackInputStream</command></para>

          <para><command>Byte pushback buffer</command></para>

          <para><command>PrintStream</command></para>
        </section>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/essential/io/overview.html">Using
        Input and Output Streams</ulink></title>

        <programlisting>File inputFile = new File("farrago.txt");
File outputFile = new File("outagain.txt");

FileInputStream fis = new FileInputStream(inputFile);
FileOutputStream fos = new FileOutputStream(outputFile);

while ((c = fis.read()) != -1) {
   fos.write(c);
}
fis.close();
fos.close();</programlisting>
      </section>
    </section>
  </chapter>

  <chapter id="exceptions">
    <title>Exceptions</title>

    <section id="exceptions_what_are_exceptions">
      <title><ulink
      url="http://java.sun.com/docs/books/tutorial/essential/exceptions/definition.html">What
      are exceptions</ulink>?</title>

      <section>
        <title>Definition</title>

        <para>An exception is an event that occurs during the execution of a
        program that disrupts the normal flow of instructions.</para>
      </section>

      <section>
        <title>Throwing an exception</title>

        <para>It happens when an error occurs the method creates an exception
        object and hands it off to the runtime system.</para>
      </section>

      <section>
        <title>The exception object</title>

        <para>The exception object contains information about the exception,
        including its type and the state of the program when the error
        occurred.</para>
      </section>

      <section>
        <title>Catching an exception</title>

        <para>It happens when the exception object bubbles up through the call
        stack until an appropriate exception handler is found. The handler
        catches the exception.</para>
      </section>

      <section>
        <title>Advantages</title>

        <section>
          <title>Advantage 1: Separating Error Handling Code from "Regular"
          Code</title>

          <table frame="none">
            <title>Advantage 1</title>

            <tgroup cols="2">
              <tbody>
                <row>
                  <entry><programlisting>errorCodeType readFile {
    initialize errorCode = 0;
    open the file;
    if (theFileIsOpen) {
        determine the length of the file;
        if (gotTheFileLength) {
            allocate that much memory;
            if (gotEnoughMemory) {
                read the file into memory;
                if (readFailed) {
                    errorCode = -1;
                }
            } else {
                errorCode = -2;
            }
        } else {
            errorCode = -3;
        }
        close the file;
...  
}</programlisting></entry>

                  <entry><programlisting>readFile {
    try {
        open the file;
        determine its size;
        allocate that much memory;
        read the file into memory;
        close the file;
    } catch (fileOpenFailed) {
        doSomething;
    } catch (sizeDeterminationFailed) {
        doSomething;
    } catch (memoryAllocationFailed) {
        doSomething;
    } catch (readFailed) {
        doSomething;
    } catch (fileCloseFailed) {
        doSomething;
    }


}</programlisting></entry>
                </row>
              </tbody>
            </tgroup>
          </table>

          <para><ulink url="../audio/Exceptions1.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>

        <section>
          <title>Advantage 2: Propagating Errors Up the Call Stack</title>

          <table>
            <title>Advantage 2</title>

            <tgroup cols="2">
              <tbody>
                <row>
                  <entry><programlisting>method1 {
    errorCodeType error;
    error = call method2;
    if (error)
        doErrorProcessing;
    else
        proceed;
}
errorCodeType method2 {
    errorCodeType error;
    error = call method3;
    if (error)
        return error;
    else
        proceed;
}
errorCodeType method3 {
    errorCodeType error;
    error = call readFile;
    if (error)
        return error;
    else
        proceed;
}</programlisting></entry>

                  <entry><programlisting>method1 {
    try {
        call method2;
    } catch (exception) {
        doErrorProcessing;
    }
}
method2 throws exception {
    call method3;
}
method3 throws exception {
    call readFile;
}











</programlisting></entry>
                </row>
              </tbody>
            </tgroup>
          </table>
        </section>

        <section>
          <title>Advantage 3: Grouping Error Types and Error
          Differentiation</title>

          <figure>
            <title>Advantage 3</title>

            <mediaobject>
              <imageobject>
                <imagedata contentdepth="197px" contentwidth="406px"
                           fileref="img/Exceptions1.gif" format="GIF" />
              </imageobject>
            </mediaobject>
          </figure>

          <programlisting>catch (ArrayException e) {
    . . .
}
catch (Exception e) {
    . . .
}</programlisting>

          <para><ulink url="../audio/Exceptions2.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>
    </section>

    <section id="exceptions_throwing_exceptions">
      <title><ulink
      url="http://java.sun.com/docs/books/tutorial/essential/exceptions/throwing.html">Throwing
      exceptions</ulink></title>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/essential/exceptions/throw.html">The
        throw Statement</ulink></title>

        <programlisting>throw someThrowableObject;</programlisting>

        <para>Example:</para>

        <programlisting>public Object pop() throws EmptyStackException {
   Object obj;
   if (size == 0) throw new EmptyStackException();
   obj = objectAt(size - 1);
   setObjectAt(size - 1, null);
   size--;
   return obj;
}</programlisting>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/essential/exceptions/throwable.html">The
        Throwable Class and Its Subclasses</ulink></title>

        <figure>
          <title>Throwable and its Subclasses</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="258px" contentwidth="495px"
                         fileref="img/Exceptions2.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <section>
          <title>Errors</title>

          <para>When a dynamic linking failure or some other "hard" failure in
          the virtual machine occurs, the virtual machine throws an
          Error.</para>
        </section>

        <section>
          <title>Exceptions</title>

          <para>Most programs throw and catch objects that derive from the
          Exception class.</para>
        </section>

        <section>
          <title>Runtime Exceptions</title>

          <para>The RuntimeException class represents exceptions that occur
          within the Java virtual machine (during runtime).</para>

          <para><ulink url="../audio/Exceptions3.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>
    </section>

    <section id="exceptions_catch_or_specify_requirement">
      <title><ulink
      url="http://java.sun.com/docs/books/tutorial/essential/exceptions/catchOrDeclare.html">Catch
      or specify requirement</ulink></title>

      <para>Java requires that a method either catch or specify all checked
      exceptions that can be thrown within the scope of the method.</para>

      <section>
        <title>Catch</title>

        <para>A method can catch an exception by providing a method can catch
        an exception by providing an exception handler for that type of
        exception.</para>
      </section>

      <section>
        <title>Specify</title>

        <para>If a method chooses not to catch an exception, the method must
        specify that it can throw that exception.</para>
      </section>

      <section>
        <title>Why Specify?</title>

        <para>Because any exception that can be thrown by a method is really
        part of the method's public programming interface</para>
      </section>

      <section>
        <title>Checked Exceptions</title>

        <para>Checked exceptions are exceptions that are not runtime
        exceptions and are checked by the compiler.</para>
      </section>

      <section>
        <title>Why not catch Runtime exceptions?</title>

        <para>Runtime exceptions can occur anywhere in a program and in a
        typical program can be very numerous. Often the cost of checking for
        runtime exceptions exceeds the benefit of catching or specifying
        them.</para>
      </section>

      <section>
        <title>Do not make all of your's exceptions Runtime</title>

        <para>Do not throw a runtime exception or create a subclass of
        RuntimeException simply because you don't want to be bothered with
        specifying them.</para>
      </section>

      <section>
        <title>Exceptions that can be thrown within the scope of the
        method</title>

        <itemizedlist>
          <listitem>
            <para>Exceptions that are thrown directly by the method with
            Java's throw statement;</para>
          </listitem>

          <listitem>
            <para>Exceptions that are thrown indirectly by the method through
            calls to other methods.</para>
          </listitem>
        </itemizedlist>

        <para><ulink url="../audio/Exceptions4.asf"><inlinegraphic
        fileref="img/asf.gif" format="GIF" />Audio in
        Portuguese</ulink></para>
      </section>
    </section>

    <section id="exceptions_catching_and_handling_exceptions">
      <title><ulink
      url="http://java.sun.com/docs/books/tutorial/essential/exceptions/handling.html">Catching
      and handling exceptions</ulink></title>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/essential/exceptions/try.html">The
        try Block</ulink></title>

        <programlisting>try { Java statements }</programlisting>

        <para>It should enclose the exception-throwing statements.</para>

        <programlisting>try {
   int i;
   pStr = new PrintStream( new BufferedOutputStream( new FileOutputStream("OutFile.txt")));
   for (i = 0; i &lt; size; i++)
      pStr.println("Value at: " + i + " = " + victor.elementAt(i));
}</programlisting>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/essential/exceptions/catch.html">The
        catch Block(s)</ulink></title>

        <programlisting>try {
    . . .
} catch (Throwable e) {
    . . .
} catch ( . . . ) {
    . . .
} . . .

catch (SomeThrowableObject variableName) {
    Java statements
}</programlisting>

        <para>variableName: is the name by which the handler can refer to the
        exception caught by the handler.</para>

        <programlisting>e.getMessage();</programlisting>

        <para>You access the instance variables and methods of exceptions in
        the same manner that you do with other objects.</para>

        <programlisting>try {
    . . .
} catch (ArrayIndexOutOfBoundsException e) {
    System.err.println("Caught ArrayIndexOutOfBoundsException: " + e.getMessage());
} catch (IOException e) {
    System.err.println("Caught IOException: " + e.getMessage());
}</programlisting>

        <para><ulink url="../audio/Exceptions5.asf"><inlinegraphic
        fileref="img/asf.gif" format="GIF" />Audio in
        Portuguese</ulink></para>
      </section>

      <section>
        <title>Specialized Handler</title>

        <para>If you write a handler for a "leaf" class (a class with no
        subclasses), you've written a specialized handler: it will only handle
        exceptions of that specific type.</para>

        <programlisting>try {
    . . .
} catch (ArrayIndexOutOfBoundsException e) {
    System.err.println("Caught ArrayIndexOutOfBoundsException: " + e.getMessage());
} catch (IOException e) {
    System.err.println("Caught IOException: " + e.getMessage());
}</programlisting>
      </section>

      <section>
        <title>General Handler</title>

        <para>If you write a handler for a "node" class (a class with
        subclasses), you've written a general handler: it will handle any
        exception whose type is the node class or any of its
        subclasses.</para>

        <programlisting>try {
    . . .
} catch (Exception e) {
    System.err.println("Exception caught: " + e.getMessage());
}</programlisting>

        <figure>
          <title>General Handler</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="258px" contentwidth="495px"
                         fileref="img/Exceptions3.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <para><ulink url="../audio/Exceptions6.asf"><inlinegraphic
        fileref="img/asf.gif" format="GIF" />Audio in
        Portuguese</ulink></para>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/essential/exceptions/finally.html">The
        finally Block</ulink></title>

        <para>The statements within the finally block are always
        executed.</para>

        <section>
          <title>Why?</title>

          <para>To provides a mechanism that allows your method to clean up
          after itself regardless of what happens within the try block. Use
          the finally block to close files or release other system
          resources.</para>

          <programlisting>finally {
   if (pStr != null) {
      System.out.println("Closing PrintStream");
      pStr.close();
   } else {
      System.out.println("PrintStream not open");
   }
}</programlisting>

          <caution>
            <informalfigure>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="img/noc++.gif" format="GIF" />
                </imageobject>
              </mediaobject>
            </informalfigure>

            <para>C++ exception handlers can not have a finally block.</para>
          </caution>
        </section>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/essential/exceptions/putItTogether.html">Putting
        It All Together</ulink></title>

        <programlisting>public void writeList() {
    PrintStream pStr = null;

    try {
        int i;

        System.out.println("Entering try statement");
        pStr = new PrintStream(
                new BufferedOutputStream(
                 new FileOutputStream("OutFile.txt")));

        for (i = 0; i &lt; size; i++)
            pStr.println("Value at: " + i + " = " + victor.elementAt(i));
    } catch (ArrayIndexOutOfBoundsException e) {
        System.err.println("Caught ArrayIndexOutOfBoundsException: " + e.getMessage());
    } catch (IOException e) {
        System.err.println("Caught IOException: " + e.getMessage());
    } finally {
        if (pStr != null) {
            System.out.println("Closing PrintStream");
            pStr.close();
        } else {
            System.out.println("PrintStream not open");
        }
    }
}</programlisting>

        <para><ulink url="../audio/Exceptions7.asf"><inlinegraphic
        fileref="img/asf.gif" format="GIF" />Audio in
        Portuguese</ulink></para>
      </section>
    </section>
  </chapter>

  <chapter id="threads">
    <title>Threads</title>

    <section id="threads_what_is_a_thread">
      <title><ulink
      url="http://java.sun.com/docs/books/tutorial/essential/threads/definition.html">What
      is a Thread</ulink>?</title>

      <section>
        <title>Definition</title>

        <itemizedlist>
          <listitem>
            <para>A thread is a single sequential flow of control within a
            program.</para>
          </listitem>

          <listitem>
            <para>A thread runs within the context of a program's process and
            takes advantage of the resources allocated for that process and
            the it's environment.</para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title>Multiple threads</title>

        <itemizedlist>
          <listitem>
            <para>Multiple threads can run at the same time in the same
            process performing different tasks.</para>
          </listitem>

          <listitem>
            <para>Multiple threads can share the resources of the process they
            share.</para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/essential/threads/simple.html">Example</ulink></title>

        <programlisting>class TwoThreadsTest {
   public static void main (String[] args) {
      new SimpleThread("Jamaica").start();
      new SimpleThread("Fiji").start();
   }
}
class SimpleThread extends Thread {
   public SimpleThread(String str) {
      super(str);}
   public void run() {
      for (int i = 0; i &lt; 10; i++) {
         System.out.println(i + " " + getName());
         try {
            sleep((int)(Math.random() * 1000));
         }
         catch (InterruptedException e) {}
      }
      System.out.println("DONE! " + getName());
   }
}</programlisting>

        <section>
          <title>Output</title>

          <programlisting>0 Jamaica
0 Fiji
1 Fiji
1 Jamaica
2 Jamaica
2 Fiji
...
8 Fiji
9 Fiji
8 Jamaica
DONE! Fiji
9 Jamaica
DONE! Jamaica</programlisting>

          <para><ulink url="../audio/Threads1.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>
    </section>

    <section id="threads_thread_attributes">
      <title><ulink
      url="http://java.sun.com/docs/books/tutorial/essential/threads/lifecycle.html">Thread
      Attributes</ulink></title>

      <section>
        <title>Thread class</title>

        <para>It implements a system independent definition of Java
        threads.</para>
      </section>

      <section>
        <title>Thread Body: The run() method</title>

        <para>After a thread has been created and initialized, the runtime
        system calls its run() method.</para>

        <section>
          <title><ulink
          url="http://java.sun.com/docs/books/tutorial/essential/threads/customizing.html">Customizing
          the run() method</ulink></title>

          <orderedlist>
            <listitem>
              <para>Subclassing the Thread class defined in the java.lang
              package and override the run() method.</para>
            </listitem>

            <listitem>
              <para>Providing a class that implements the Runnable interface
              and giving to a new thread a handle to an instance of it.</para>
            </listitem>
          </orderedlist>

          <para>When to use each?</para>

          <para>If your class must subclass some other class, you should use
          Runnable as described in option #2.</para>

          <para><ulink url="../audio/Threads2.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/essential/threads/lifecycle.html">Thread
        States</ulink></title>

        <figure>
          <title>Thread States</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="240px" contentwidth="519px"
                         fileref="img/Threads1.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <section>
          <title>New Thread</title>

          <programlisting>Thread myThread = new MyThreadClass();</programlisting>

          <para>Definition: It is merely an empty Thread object. No system
          resources have been allocated for it yet.</para>
        </section>

        <section>
          <title>Runnable</title>

          <programlisting>Thread myThread = new MyThreadClass();
myThread.start();</programlisting>

          <para>Definition: It is when the start() method creates the system
          resources necessary to run the thread and schedules the thread to
          run.</para>

          <note>
            <para>The thread might not actually be running when it is in this
            state.</para>
          </note>

          <para><ulink url="../audio/Threads3.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>

        <section>
          <title>Not Runnable</title>

          <para>Definition: A thread enters the "Not Runnable" state when one
          of these four events occurs:</para>

          <itemizedlist>
            <listitem>
              <para>Someone invokes its sleep() method.</para>
            </listitem>

            <listitem>
              <para>Someone invokes its suspend() method.</para>
            </listitem>

            <listitem>
              <para>The thread uses its wait() method to wait on a condition
              variable.</para>
            </listitem>

            <listitem>
              <para>The thread is blocking on I/O.</para>
            </listitem>
          </itemizedlist>

          <note>
            <para>Even if the processor becomes available a "Not Runnable"
            thread does not run.</para>
          </note>

          <para>Leaving the "Not Runnable" state:</para>

          <itemizedlist>
            <listitem>
              <para>If a thread has been put to sleep, then the specified
              number of milliseconds must elapse.</para>
            </listitem>

            <listitem>
              <para>If a thread has been suspended, then someone must call its
              resume() method.</para>
            </listitem>

            <listitem>
              <para>If a thread is waiting on a condition variable, whatever
              object owns the variable must relinquish it by calling either
              notify() or notifyAll().</para>
            </listitem>

            <listitem>
              <para>If a thread is blocked on I/O, then the I/O must
              complete.</para>
            </listitem>
          </itemizedlist>
        </section>

        <section>
          <title>Dead</title>

          <para>From natural causes:</para>

          <para>A thread dies naturally when its run() method exits
          normally.</para>

          <para>Being killed:</para>

          <para>A thread is killed when its stop() method is called.</para>

          <programlisting>Thread myThread = new MyThreadClass();
myThread.start();
try {
    Thread.currentThread().sleep(10000);
} catch (InterruptedException e){
}
myThread.stop();</programlisting>

          <para>The stop() method throws a ThreadDeath object at the thread to
          kill it.</para>

          <para><ulink url="../audio/Threads4.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/essential/threads/priority.html">Thread
        Priority</ulink></title>

        <para>Scheduling: Execution of multiple threads on a single CPU, in
        some order.</para>

        <para>Priority: The Java supports a very simple, deterministic
        scheduling algorithm known as fixed priority scheduling.</para>

        <para>When a Java thread is created, it inherits its priority from the
        thread that created it.</para>

        <para>Priority Modification: setPriority() method. Thread priorities
        are integers ranging between MIN_PRIORITY and MAX_PRIORITY.</para>

        <para>Preemptive Scheduling: If a thread with a higher priority than
        the currently executing thread needs to execute, the higher priority
        thread is immediately scheduled.</para>

        <para>Equal Priority Scheduling:</para>

        <para>The scheduler chooses in a round-robin fashion. The chosen
        thread will run until one of the following conditions is true:</para>

        <itemizedlist>
          <listitem>
            <para>a higher priority thread becomes "Runnable"</para>
          </listitem>

          <listitem>
            <para>it yields, or its run() method exits</para>
          </listitem>

          <listitem>
            <para>on systems that support time-slicing, its time allotment has
            expired</para>
          </listitem>
        </itemizedlist>

        <para>Then the second thread is given a chance to run, and so on,
        until the interpreter exits.</para>

        <note>
          <para>Use priority only to affect scheduling policy for efficiency
          purposes. Do not rely on thread priority for algorithm
          correctness.</para>
        </note>

        <para>Time-Slicing:</para>

        <para>Time-sliced system divides the CPU into time slots and
        iteratively gives each of the equal-and-highest priority threads a
        time slot in which to run.</para>

        <note>
          <para>The Java runtime does not implement (and therefore does not
          guarantee) time-slicing.</para>
        </note>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/essential/threads/threadgroup.html">Daemon
        Threads</ulink></title>

        <itemizedlist>
          <listitem>
            <para>Daemon threads are those that provide a service for other
            threads in the system.</para>
          </listitem>

          <listitem>
            <para>When the only remaining threads in a process are daemon
            threads, the interpreter exits.</para>
          </listitem>
        </itemizedlist>

        <para><ulink url="../audio/Threads5.asf"><inlinegraphic
        fileref="img/asf.gif" format="GIF" />Audio in
        Portuguese</ulink></para>
      </section>
    </section>

    <section id="threads_thread_group">
      <title><ulink
      url="http://java.sun.com/docs/books/tutorial/essential/threads/group.html">Thread
      Group</ulink></title>

      <para>Every Java thread is a member of a thread group.</para>

      <para>Default Group: The same as the thread that created it.</para>

      <para>Start up Group: the Java runtime system creates a ThreadGroup
      named "main".</para>

      <section>
        <title><ulink
        url="/library/books/tutorial1.02/java/threads/threadgroup.html">The
        ThreadGroup Class</ulink></title>

        <para>The ThreadGroup class manages groups of threads for Java
        applications.</para>

        <figure>
          <title>ThreadGroup Class</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="343px" contentwidth="487px"
                         fileref="img/Threads2.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <para>The ThreadGroup class has methods that can be categorized as
        follows:</para>

        <itemizedlist>
          <listitem>
            <para>Collection Management Methods--methods that manage the
            collection of threads and subgroups contained in the thread
            group;</para>
          </listitem>

          <listitem>
            <para>Methods that Operate on the Group--these methods set or get
            attributes of the ThreadGroup object;</para>
          </listitem>

          <listitem>
            <para>Methods that Operate on All Threads within a Group--this is
            a set of methods that perform some operation on all the threads
            and subgroups within the ThreadGroup;</para>
          </listitem>

          <listitem>
            <para>resume();</para>
          </listitem>

          <listitem>
            <para>stop();</para>
          </listitem>

          <listitem>
            <para>suspend():</para>
          </listitem>

          <listitem>
            <para>Access Restriction Methods--ThreadGroup and Thread allow the
            security manager to restrict access to threads based on group
            membership.</para>
          </listitem>
        </itemizedlist>

        <para><ulink url="../audio/Threads6.asf"><inlinegraphic
        fileref="img/asf.gif" format="GIF" />Audio in
        Portuguese</ulink></para>
      </section>
    </section>

    <section id="threads_synchronizing_threads">
      <title><ulink
      url="http://java.sun.com/docs/books/tutorial/essential/threads/multithreaded.html">Synchronizing
      Threads</ulink></title>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/essential/threads/synchronization.html">Producer/Consumer
        Scenario</ulink></title>

        <programlisting>class Producer extends Thread {
    public void run() {
        for (int i = 0; i &lt; 10; i++) {
            cubbyhole.put(i);
            System.out.println("Producer #" + this.number + " put: " + i);
            try {
                sleep((int)(Math.random() * 100));
            } catch (InterruptedException e){}
        }
    }
}</programlisting>

        <para>The <ulink
        url="http://java.sun.com/docs/books/tutorial/essential/threads/synchronization.html">Consumer</ulink>
        consumes all integers from the CubbyHole as quickly as they become
        available.</para>

        <programlisting>class Consumer extends Thread {
    public void run() {
        int value = 0;
        for (int i = 0; i &lt; 10; i++) {
            value = cubbyhole.get();
            System.out.println("Consumer #" + this.number + " got: " + value);
        }
    }
}</programlisting>

        <section>
          <title>Two outcomes</title>

          <para>Producer is quicker than the Consumer:</para>

          <programlisting>. . .
Consumer #1 got: 3
Producer #1 put: 4
Producer #1 put: 5
Consumer #1 got: 5
. . .</programlisting>

          <para>Consumer is quicker than the Producer:</para>

          <programlisting>. . .
Producer #1 put: 4
Consumer #1 got: 4
Consumer #1 got: 4
Producer #1 put: 5
. . .</programlisting>

          <para><ulink url="../audio/Threads7.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/essential/threads/monitors.html">Monitors</ulink></title>

        <para>Definition: A monitor is associated with a specific data item
        and functions as a lock on that data.</para>

        <itemizedlist>
          <listitem>
            <para>When a thread holds the monitor for some data item, other
            threads are locked out and cannot inspect or modify the
            data.</para>
          </listitem>

          <listitem>
            <para>A unique monitor is associated with every object that has a
            synchronized method.</para>
          </listitem>
        </itemizedlist>

        <programlisting>class CubbyHole {
    private int contents;
    private boolean available = false;

    public synchronized int get() {
        while (available == false) {
            try {
                wait();
            } catch (InterruptedException e) {
            }
        }
        available = false;
        notify();
        return contents;
    }

    public synchronized void put(int value) {
        while (available == true) {
            try {
                wait();
            } catch (InterruptedException e) {
            }
        }
        contents = value;
        available = true;
        notify();
    }
}</programlisting>

        <section>
          <title>Control</title>

          <para>Lock: The thread that called a synchronized method acquires
          the monitor for the object whose method has been called.</para>

          <para>Object state: No other threads can call a synchronized method
          on the same object.</para>

          <para>Unlock: When the synchronized method returns, the thread
          releases the monitor thereby unlocking the object.</para>

          <para><ulink url="../audio/Threads8.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/essential/threads/waitAndNotify.html">The
        wait() and notify() Methods</ulink></title>

        <section>
          <title>The wait() method</title>

          <para>The wait() method causes the current thread to:</para>

          <orderedlist>
            <listitem>
              <para>Wait until another thread notifies it of a condition
              change.</para>
            </listitem>

            <listitem>
              <para>Release the monitor for the object.</para>
            </listitem>
          </orderedlist>

          <programlisting>public synchronized int get() {
    while (available == false) {
        try {
            wait();          // waits for notify() call from Producer
        } catch (InterruptedException e) {
        }
    }
    available = false;
    notify();
    return contents;
}</programlisting>

          <para>Other versions:</para>

          <programlisting>wait(long timeout) 
wait(long timeout, int nanos) </programlisting>
        </section>

        <section>
          <title>The notify() method</title>

          <para>The notify() method chooses one thread that is waiting on the
          monitor held by the current thread and wakes it up.</para>

          <note>
            <para>The Java runtime system makes no commitments or guarantees
            about which thread will be chosen.</para>
          </note>

          <programlisting>public synchronized int get() {
    while (available == false) {
        try {
            wait();
        } catch (InterruptedException e) {
        }
    }
    available = false;
    notify();           // notifies Producer
    return contents;
}</programlisting>

          <para>notifyAll():</para>

          <orderedlist>
            <listitem>
              <para>It wakes up all the threads waiting on the same
              monitor.</para>
            </listitem>

            <listitem>
              <para>The awakened threads compete for the monitor.</para>
            </listitem>

            <listitem>
              <para>One thread gets the monitor and the others go back to
              waiting.</para>
            </listitem>
          </orderedlist>

          <para><ulink url="../audio/Threads9.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>
    </section>
  </chapter>

  <chapter id="distributed_programming">
    <title>Distributed Programming</title>

    <section id="distributed_programming_the_client_server_model">
      <title><ulink url="/dilvan/thesis.phd/servers.html#HEADING1-1">The
      Client/Server Model</ulink></title>

      <section>
        <title>Distributed System</title>

        <para>A distributed computer system contains software programs and
        data resources dispersed across independent computers connected
        through a communication network.</para>
      </section>

      <section>
        <title>Advantages</title>

        <itemizedlist>
          <listitem>
            <para>It allows users of individual, networked computers to share
            data and processing power, often over long distances.</para>
          </listitem>

          <listitem>
            <para>Distribution can also enhance availability, reliability and
            performance.</para>
          </listitem>
        </itemizedlist>

        <figure>
          <title>Heterogeneous network</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="473px" contentwidth="675px"
                         fileref="img/Servers1.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <section>
          <title>Coordination Models</title>

          <para>A coordination model establishes logical roles and associated
          behaviours (for applications that assume such roles) for executing
          distributed interactions.</para>

          <para><ulink url="../audio/Servers1.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>

      <section>
        <title>The client</title>

        <para>Requests an operation or service that some other application,
        the server, provides.</para>
      </section>

      <section>
        <title>The server</title>

        <para>Receives a client request, performs the requested service and
        returns to the client any results.</para>
      </section>

      <section>
        <title>Advantages</title>

        <itemizedlist>
          <listitem>
            <para>It offers simplicity in closely matching the flow of data
            with the control flow.</para>
          </listitem>

          <listitem>
            <para>It promotes modular, flexible, and extensive system
            designs.</para>
          </listitem>

          <listitem>
            <para>Data resources and computing services can be organized,
            integrated and used as a service.</para>
          </listitem>

          <listitem>
            <para>Widely used in distributed systems.</para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title>Communication</title>

        <itemizedlist>
          <listitem>
            <para>Servers communicate over a network.</para>
          </listitem>

          <listitem>
            <para>In Unix and Windows machines the network uses: TCP/IP &amp;
            UDP.</para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/networking/overview/networking.html">Networking
        Basics</ulink></title>

        <para>TCP and UDP protocols:</para>

        <figure>
          <title>Network Stack</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="198px" contentwidth="172px"
                         fileref="img/Servers2.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <para><ulink url="../audio/Servers2.asf"><inlinegraphic
        fileref="img/asf.gif" format="GIF" />Audio in
        Portuguese</ulink></para>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/networking/overview/networking.html">TCP</ulink></title>

        <section>
          <title>Definition</title>

          <para>TCP is a connection-based protocol that provides a reliable
          flow of data between two computers.</para>
        </section>

        <section>
          <title>Example</title>

          <para>HTTP</para>

          <para>ftp</para>

          <para>Telnet</para>
        </section>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/networking/overview/networking.html">UDP</ulink></title>

        <section>
          <title>Definition</title>

          <para>UDP is a protocol that sends independent packets of data,
          called datagrams from one computer to another with no guarantees
          about arrival.</para>
        </section>

        <section>
          <title>Example</title>

          <para>ping</para>
        </section>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/networking/overview/networking.html">Ports</ulink></title>

        <section>
          <title>Definition</title>

          <para>The TCP and UDP protocols use ports to map incoming data to a
          particular process running on a computer.</para>

          <itemizedlist>
            <listitem>
              <para>Computers are identified by a 32-bit IP address.</para>

              <para>IP uses to deliver data to the right computer on the
              network.</para>
            </listitem>

            <listitem>
              <para>Ports are identified by a 16-bit number.</para>

              <para>TCP and UDP use to deliver the data to the right
              application.</para>
            </listitem>
          </itemizedlist>

          <figure>
            <title>Ports</title>

            <mediaobject>
              <imageobject>
                <imagedata contentdepth="264px" contentwidth="465px"
                           fileref="img/Servers3.gif" format="GIF" />
              </imageobject>
            </mediaobject>
          </figure>

          <para><ulink url="../audio/Servers3.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>

        <section>
          <title><ulink
          url="http://java.sun.com/docs/books/tutorial/networking/overview/networking.html">Port
          Numbers</ulink></title>

          <para>Range: from 0 to 65535</para>

          <para>Reserved: 0 - 1023 are restricted--they are reserved for use
          by services such as HTTP and ftp and other system services.</para>

          <figure>
            <title>Port Numbers</title>

            <mediaobject>
              <imageobject>
                <imagedata contentdepth="283px" contentwidth="436px"
                           fileref="img/Servers4.gif" format="GIF" />
              </imageobject>
            </mediaobject>
          </figure>
        </section>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/networking/sockets/index.html">Sockets</ulink></title>

        <itemizedlist>
          <listitem>
            <para>Are the basic components of interprocess
            communication.</para>
          </listitem>

          <listitem>
            <para>Provide access to the network transport protocols</para>
          </listitem>

          <listitem>
            <para>Are an endpoint of communication to which a name can be
            bound.</para>
          </listitem>
        </itemizedlist>

        <section>
          <title>Stream Socket</title>

          <para>A stream socket provides bidirectional, reliable, sequential,
          and unduplicated flow of data with no record boundaries. It uses
          TCP/IP protocol.</para>
        </section>

        <section>
          <title>Datagram Socket</title>

          <para>A datagram socket provides bidirectional flow of data, the
          data is divided in packages, the receiver can receive them in a
          different order from the sending sequence and may receive duplicated
          messages. It uses UDP protocol.</para>

          <para><ulink url="../audio/Servers4.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>
    </section>

    <section id="distributed_programming_urls">
      <title><ulink
      url="http://java.sun.com/docs/books/tutorial/networking/urls/index.html">URLs</ulink></title>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/networking/urls/definition.html">What
        Is a URL</ulink>?</title>

        <section>
          <title>Definition</title>

          <para>URL is an acronym that stands for Uniform Resource Locator and
          is a reference (an address) to a resource on the Internet.</para>
        </section>

        <section>
          <title>Components</title>

          <itemizedlist>
            <listitem>
              <para>Protocol identifier</para>

              <itemizedlist>
                <listitem>
                  <para>HTTP -
                  http://www.unicamp.br:80/lecture.html#TITLE</para>
                </listitem>

                <listitem>
                  <para>FTP - ftp://ftp.fee.unicamp.br/linux/Read.me</para>
                </listitem>

                <listitem>
                  <para>JDBC -
                  jdbc:msql://lcaee.fee.unicamp.br:4333/group1</para>
                </listitem>
              </itemizedlist>
            </listitem>

            <listitem>
              <para>Resource Name</para>

              <itemizedlist>
                <listitem>
                  <para>www.unicamp.br:80/lecture.html#TITLE</para>
                </listitem>

                <listitem>
                  <para>ftp.fee.unicamp.br/linux/Read.me</para>
                </listitem>

                <listitem>
                  <para>msql://lcaee.fee.unicamp.br:4333/group1</para>
                </listitem>
              </itemizedlist>
            </listitem>
          </itemizedlist>
        </section>

        <section>
          <title>Resource name format (protocol dependent):</title>

          <section>
            <title>host name</title>

            <para>www.unicamp.br</para>

            <para>the name of the machine the resource lives on.</para>
          </section>

          <section>
            <title>filename</title>

            <para>/lecture.html</para>

            <para>the pathname to the file on the machine.</para>
          </section>

          <section>
            <title>port number</title>

            <para>:80</para>

            <para>the port number to connect to (this is typically
            optional).</para>
          </section>

          <section>
            <title>reference</title>

            <para>#TITLE</para>

            <para>a reference to a named anchor within a resource.</para>

            <para><ulink url="../audio/Servers5.asf"><inlinegraphic
            fileref="img/asf.gif" format="GIF" />Audio in
            Portuguese</ulink></para>
          </section>
        </section>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/networking/urls/creatingUrls.html">Creating
        a URL</ulink></title>

        <para>Simplest way:</para>

        <programlisting>http://www.gamelan.com/
URL gamelan = new URL("http://www.gamelan.com/");</programlisting>

        <para>Creating a URL Relative to Another:</para>

        <programlisting>URL gamelan = new URL("http://www.gamelan.com/");
URL gamelanNetwork = new URL(gamelan, "Gamelan.network.html");
URL gamelanNetworkBottom = new URL(gamelanNetwork, "#BOTTOM");</programlisting>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/networking/urls/urlInfo.html">Parsing
        a URL</ulink></title>

        <para>getProtocol() - Returns the protocol identifier component of the
        URL;</para>

        <para>getHost()- Returns the host name component of the URL.;</para>

        <para>getPort() - Returns the port number component of the URL;</para>

        <para>getFile() - Returns the filename component of the URL;</para>

        <para>getRef() - Returns the reference component of the URL.</para>

        <note>
          <para>Remember that not all URL addresses contain these
          components.</para>
        </note>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/networking/urls/readingURL.html">Reading
        Directly from a URL</ulink></title>

        <programlisting>class OpenStreamTest {
     public static void main(String[] args) {
        try {
           URL yahoo = new URL("http://www.yahoo.com/");
           DataInputStream dis = new DataInputStream(yahoo.openStream());
           String inputLine;

           while ((inputLine = dis.readLine()) != null) {
              System.out.println(inputLine);
           }
           dis.close();
        } catch (Exception me) {
           System.out.println("Exception: " + me);
        }
     }
}</programlisting>

        <para><ulink url="../audio/Servers6.asf"><inlinegraphic
        fileref="img/asf.gif" format="GIF" />Audio in
        Portuguese</ulink></para>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/networking/urls/connecting.html">Connecting
        to a URL</ulink></title>

        <note>
          <para>Note: URLConnection is an HTTP-centric class--many of its
          methods are useful only when working with HTTP URLs.</para>
        </note>

        <programlisting>try {
     URL yahoo = new URL("http://www.yahoo.com/");
     yahoo.openConnection();
  } catch (MalformedURLException e) { // new URL() failed
     . . .
  } catch (IOException e) { // openConnection() failed
     . . .
}</programlisting>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/networking/urls/readingWriting.html">Reading
        from and Writing to a URLConnection</ulink></title>

        <section>
          <title>Reading from a URLConnection</title>

          <programlisting>import java.net.*;
import java.io.*;

class ConnectionTest {
    public static void main(String[] args) {
        try {
            URL yahoo = new URL("http://www.yahoo.com/");
            URLConnection yahooConnection = yahoo.openConnection();
            DataInputStream dis = new DataInputStream(yahooConnection.getInputStream());
            String inputLine;

            while ((inputLine = dis.readLine()) != null) {
                System.out.println(inputLine);
            }
            dis.close();
        } catch (MalformedURLException me) {
            System.out.println("MalformedURLException: " + me);
        } catch (IOException ioe) {
            System.out.println("IOException: " + ioe);
        }
    }
}</programlisting>

          <para><ulink url="../audio/Servers7.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>

      <section>
        <title>Writing to a URLConnection (cgi-bin script)</title>

        <orderedlist>
          <listitem>
            <para>Create a URL.</para>
          </listitem>

          <listitem>
            <para>Open a connection to the URL.</para>
          </listitem>

          <listitem>
            <para>Get an output stream from the connection. This output stream
            is connected to the standard input stream of the cgi-bin script on
            the server.</para>
          </listitem>

          <listitem>
            <para>Write to the output stream.</para>
          </listitem>

          <listitem>
            <para>Close the output stream.</para>
          </listitem>
        </orderedlist>

        <section>
          <title>Program</title>

          <programlisting>import java.io.*;
import java.net.*;

public class ReverseTest {
    public static void main(String[] args) {
        try {
            if (args.length != 1) {
                System.err.println("Usage:  java ReverseTest string_to_reverse");
                System.exit(1);
            }
            String stringToReverse = URLEncoder.encode(args[0]);

            URL url = new URL("http://java.sun.com/cgi-bin/backwards");
            URLConnection connection = url.openConnection();

            PrintStream outStream = new PrintStream(connection.getOutputStream());
            outStream.println("string=" + stringToReverse);
            outStream.close();

            DataInputStream inStream = new DataInputStream(connection.getInputStream());
            String inputLine;

            while ((inputLine = inStream.readLine()) != null) {
                System.out.println(inputLine);
            }
            inStream.close();
        } catch (MalformedURLException me) {
            System.err.println("MalformedURLException: " + me);
        } catch (IOException ioe) {
            System.err.println("IOException: " + ioe);
        }
    }
}</programlisting>
        </section>

        <section>
          <title>Output</title>

          <programlisting>Reverse Me
 reversed is:
eM esreveR</programlisting>

          <para><ulink url="../audio/Servers8.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>
    </section>

    <section id="distributed_programming_sockets_and_streams">
      <title>Sockets and Streams</title>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/networking/sockets/readingWriting.html">Stream
        Sockets</ulink></title>

        <section>
          <title><ulink
          url="http://java.sun.com/docs/books/tutorial/networking/sockets/definition.html">What
          is a Socket</ulink>?</title>

          <para>Definition: A socket is one end-point of a two-way
          communication link between two programs running on the
          network.</para>

          <para>Types:</para>

          <itemizedlist>
            <listitem>
              <para>Stream socket: class Socket.</para>
            </listitem>

            <listitem>
              <para>Stream socket (To listen): class ServerSocket.</para>
            </listitem>

            <listitem>
              <para>Datagram socket: class DatagramSocket.</para>
            </listitem>
          </itemizedlist>
        </section>

        <section>
          <title><ulink
          url="http://java.sun.com/docs/books/tutorial/networking/sockets/readingWriting.html">Reading
          from and Writing to a Stream Socket</ulink></title>

          <para>Example:</para>

          <programlisting>public class EchoTest {
   public static void main(String[] args) {
        Socket echoSocket = null;
        DataOutputStream os = null;
        DataInputStream is = null;
        DataInputStream stdIn = new DataInputStream(System.in);

        try {
              echoSocket = new Socket("taranis", 7);
              os = new DataOutputStream(echoSocket.getOutputStream());
              is = new DataInputStream(echoSocket.getInputStream());
        } catch (UnknownHostException e) { ... }
        catch (IOException e) { ... }

        if (echoSocket != null &amp;&amp; os != null &amp;&amp; is != null) {
           try {
                String userInput;

                while ((userInput = stdIn.readLine()) != null) {
                     os.writeBytes(userInput);
                     os.writeByte('\n');
                     System.out.println("echo: " + is.readLine());
                }
                os.close();
                is.close();
                echoSocket.close();
           } catch (IOException e) { ... } 
        }
   }
}</programlisting>

          <para><ulink url="../audio/Servers9.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>

        <section>
          <title><ulink
          url="http://java.sun.com/docs/books/tutorial/networking/sockets/clientServer.html">Writing
          the Server Side of a Stream Socket</ulink></title>

          <para>Listening and Communicating:</para>

          <itemizedlist>
            <listitem>
              <para>Request channel: Server do the listening.</para>
            </listitem>

            <listitem>
              <para>Communication channel: Created for each connection.</para>
            </listitem>
          </itemizedlist>

          <figure>
            <title>Listening and Communicating</title>

            <mediaobject>
              <imageobject>
                <imagedata contentdepth="125px" contentwidth="483px"
                           fileref="img/Servers5.gif" format="GIF" />
              </imageobject>
            </mediaobject>
          </figure>

          <para>Knock Knock Server:</para>

          <programlisting>Server: Knock! Knock!
Client: Who's there?
Server: Turnip
Client: Turnip who?
Server: Turnip the heat, it's cold in here! Want another? (y/n)</programlisting>

          <para>Classes:</para>

          <itemizedlist>
            <listitem>
              <para>KnockKnockServer: Implements the server</para>
            </listitem>

            <listitem>
              <para>KKState: Implements the application. It keeps track of the
              current joke, the current state and serves up the various text
              pieces of the joke depending on the current state.</para>
            </listitem>

            <listitem>
              <para>KnockKnockClient: Implements the client.</para>
            </listitem>
          </itemizedlist>

          <para><ulink url="../audio/Servers10.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>

          <para><ulink
          url="http://java.sun.com/docs/books/tutorial/networking/sockets/clientServer.html">The
          KnockKnockServer Class</ulink>:</para>

          <itemizedlist>
            <listitem>
              <para>Creates a ServerSocket to listen:</para>

              <programlisting>try {
    serverSocket = new ServerSocket(4444);
} catch (IOException e) { ... }</programlisting>
            </listitem>

            <listitem>
              <para>Waits until a clients connects:</para>

              <programlisting>Socket clientSocket = null;
try {
    clientSocket = serverSocket.accept();
} catch (IOException e) { ... }</programlisting>
            </listitem>

            <listitem>
              <para>Open an input and output stream to the socket:</para>

              <programlisting>DataInputStream is = new DataInputStream(
                 new BufferedInputStream(clientSocket.getInputStream()));
PrintStream os = new PrintStream(
             new BufferedOutputStream(clientSocket.getOutputStream(), 1024), false);
String inputLine, outputLine;
KKState kks = new KKState();


</programlisting>
            </listitem>

            <listitem>
              <para>Read from and write to the socket</para>

              <programlisting>outputLine = kks.processInput(null);
os.println(outputLine);
os.flush();

while ((inputLine = is.readLine()) != null) {
    outputLine = kks.processInput(inputLine);
    os.println(outputLine);
    os.flush();
    if (outputLine.equals("Bye."))
        break;
}</programlisting>
            </listitem>

            <listitem>
              <para>Close all the input and output streams:</para>

              <programlisting>os.close();
is.close();
clientSocket.close();
serverSocket.close();</programlisting>
            </listitem>
          </itemizedlist>

          <para><ulink url="../audio/Servers11.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>

          <para><ulink
          url="http://java.sun.com/docs/books/tutorial/networking/sockets/clientServer.html">The
          Knock Knock Client</ulink>:</para>

          <para>Differences from EchoTest:</para>

          <programlisting>kkSocket = new Socket("taranis", 4444);
            . . .
while ((fromServer = is.readLine()) != null) {
    System.out.println("Server: " + fromServer);
    if (fromServer.equals("Bye."))
        break;
    while ((c = System.in.read()) != '\n') {
        buf.append((char)c);
    }
    System.out.println("Client: " + buf);
    os.println(buf.toString());
    os.flush();
    buf.setLength(0);
}</programlisting>
        </section>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/networking/sockets/clientServer.html">Supporting
        Multiple Clients</ulink></title>

        <itemizedlist>
          <listitem>
            <para>Requests treated by one execution thread.</para>
          </listitem>

          <listitem>
            <para>Individual communication treated by:</para>

            <itemizedlist>
              <listitem>
                <para>Another process</para>
              </listitem>

              <listitem>
                <para>Another thread.</para>
              </listitem>
            </itemizedlist>
          </listitem>
        </itemizedlist>

        <figure>
          <title>Threads in Servers</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="336px" contentwidth="584px"
                         fileref="img/Servers6.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <para><ulink url="../audio/Servers12.asf"><inlinegraphic
        fileref="img/asf.gif" format="GIF" />Audio in
        Portuguese</ulink></para>
      </section>
    </section>

    <section id="distrtibuted_programming_datagrams">
      <title><ulink
      url="http://java.sun.com/docs/books/tutorial/networking/datagrams/index.html">Datagrams</ulink></title>

      <para>The UDP protocol provides a mode of network communication whereby
      applications send packets of data, called datagrams to one
      another:</para>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/networking/datagrams/definition.html">What
        Is a Datagram</ulink>?</title>

        <section>
          <title>Definition</title>

          <para>A datagram is an independent, self-contained message sent over
          the network whose arrival, arrival time, and content are not
          guaranteed.</para>
        </section>

        <section>
          <title>Java classes</title>

          <itemizedlist>
            <listitem>
              <para>DatagramPacket class;</para>
            </listitem>

            <listitem>
              <para>DatagramSocket class.</para>
            </listitem>
          </itemizedlist>
        </section>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/networking/datagrams/clientServer.html">Writing
        a Datagram Client and Server</ulink></title>

        <section>
          <title>The Quote server</title>

          <para>It waits for Datagram requests for quotes ans servers them in
          Datagram packets. Three classes implement the application:</para>

          <itemizedlist>
            <listitem>
              <para>QuoteServer</para>
            </listitem>

            <listitem>
              <para>QuoteServerThread.</para>
            </listitem>

            <listitem>
              <para>QuoteClient.</para>
            </listitem>
          </itemizedlist>
        </section>

        <section>
          <title>The QuoteServer Class</title>

          <para>Just calls the server thread:</para>

          <programlisting>class QuoteServer {
    public static void main(String[] args) {
        new QuoteServerThread().start();
    }
}</programlisting>

          <para><ulink url="../audio/Servers13.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>

        <section>
          <title>The QuoteServerThread Class</title>

          <para>The QuoteServerThread constructor:</para>

          <programlisting>QuoteServerThread() {
    super("QuoteServer");
    try {
        socket = new DatagramSocket();
        System.out.println("QuoteServer listening on port: " + socket.getLocalPort());
    } catch (java.net.SocketException e) {
        System.err.println("Could not create datagram socket.");
    }
    this.openInputFile();
}</programlisting>

          <para>The run() method's infinite loop:</para>

          <itemizedlist>
            <listitem>
              <para>Section that receives requests:</para>

              <programlisting>packet = new DatagramPacket(buf, 256);
socket.receive(packet);
address = packet.getAddress();
port = packet.getPort();</programlisting>
            </listitem>

            <listitem>
              <para>Section that construct the responses:</para>

              <programlisting>if (qfs == null)
    dString = new Date().toString();
else
    dString = getNextQuote();
dString.getBytes(0, dString.length(), buf, 0);
packet = new DatagramPacket(buf, buf.length, address, port);
socket.send(packet);</programlisting>
            </listitem>
          </itemizedlist>

          <para><ulink url="../audio/Servers14.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>

        <section>
          <title>The QuoteClient Class</title>

          <itemizedlist>
            <listitem>
              <para>The main() method for the client application:</para>

              <programlisting>int port;
InetAddress address;
DatagramSocket socket = null;
DatagramPacket packet;
byte[] sendBuf = new byte[256];

if (args.length != 2) {
     System.out.println("Usage: java DatagramClient &lt;hostname&gt; &lt;port#&gt;");
     return;
}</programlisting>
            </listitem>

            <listitem>
              <para>The client program sends a request to the server:</para>

              <programlisting>address = InetAddress.getByName(args[0]);
port = Integer.parseInt(args[1]);
packet = new DatagramPacket(sendBuf, 256, address, port);
socket.send(packet);
System.out.println("Client sent request packet.");</programlisting>
            </listitem>

            <listitem>
              <para>The client gets a response from the server:</para>

              <programlisting>packet = new DatagramPacket(sendBuf, 256);
socket.receive(packet);
String received = new String(packet.getData(), 0);
System.out.println("Client received packet: " + received);</programlisting>
            </listitem>
          </itemizedlist>
        </section>

        <section>
          <title>Run the Client</title>

          <programlisting>Quote of the Moment: Life is wonderful. Without it we'd all be dead.</programlisting>

          <para><ulink url="../audio/Servers15.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>
    </section>
  </chapter>

  <chapter id="graphic_user_interface">
    <title>Graphic User Interface</title>

    <section id="graphic_user_interface_overview">
      <title><ulink
      url="/library/books/tutorial1.02/ui/overview/index.html">Overview</ulink></title>

      <section>
        <title><ulink
        url="/library/books/tutorial1.02/ui/overview/components.html">The
        Abstract Window Toolkit</ulink></title>

        <para>The AWT is the part of the Java environment that contains the
        set of classes for writing GUI (Graphic User Interface) Graphic
        programs:</para>

        <figure>
          <title>The AWT</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="220px" contentwidth="457px"
                         fileref="img/GUI1.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <itemizedlist>
          <listitem>
            <para>The Basic Controls: Buttons, Checkboxes, Choices, Lists,
            Menus, and Text Fields</para>

            <para>When a user activates one of these controls, it posts an
            Action event to be handled by the object that contains the
            control.</para>
          </listitem>

          <listitem>
            <para>Other Ways of Getting User Input: Sliders, Scrollbars, and
            Text Areas</para>

            <para>The Scrollbar class is used for both slider and scrollbar
            functionality. The TextArea class simply provides an area to
            display or edit text.</para>
          </listitem>

          <listitem>
            <para>Creating Custom Components: Canvases</para>

            <para>With your Canvas subclass, you can draw custom graphics to
            the screen and implement any kind of event handling.</para>
          </listitem>

          <listitem>
            <para>Labels</para>

            <para>A Label simply displays an unselectable line of text.</para>
          </listitem>

          <listitem>
            <para>Containers: Windows and Panels</para>

            <para>The Window subclasses provide windows to contain components.
            Panels group components within an area of an existing
            window.</para>
          </listitem>
        </itemizedlist>

        <para><ulink url="../audio/Gui1.asf"><inlinegraphic
        fileref="img/asf.gif" format="GIF" />Audio in
        Portuguese</ulink></para>
      </section>

      <section>
        <title><ulink
        url="/library/books/tutorial1.02/ui/overview/anatomy.html">A GUI based
        example</ulink></title>

        <figure>
          <title>Converter of distances between US and metric.</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="209px" contentwidth="275px"
                         fileref="img/GUI2.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <section>
          <title><ulink
          url="/library/books/tutorial1.02/ui/overview/egClasses.html">Classes
          in the Example Program</ulink></title>

          <figure>
            <title>Classes in the Example Program</title>

            <mediaobject>
              <imageobject>
                <imagedata contentdepth="226px" contentwidth="599px"
                           fileref="img/GUI3.gif" format="GIF" />
              </imageobject>
            </mediaobject>
          </figure>

          <itemizedlist>
            <listitem>
              <para>The Converter class actually extends the Applet class
              (which itself extends Panel), instead of directly extending
              Panel.</para>
            </listitem>

            <listitem>
              <para>The ConversionPanel class provides a way of grouping all
              the controls that describe a particular set of distance
              measurements.</para>
            </listitem>

            <listitem>
              <para>The Unit class provides objects that group a description
              (such as "Centimeters") with a multiplier that indicates the
              number of units per meter (0.01, for example).</para>
            </listitem>
          </itemizedlist>

          <para><ulink url="../audio/Gui2.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>

      <section>
        <title><ulink
        url="/library/books/tutorial1.02/ui/overview/compHierarchy.html">The
        Component Hierarchy</ulink></title>

        <literallayout>                                Frame
                                  |
                                 ...
                                  |
                               Converter
                                  |
                ----------------------------------
                |                                |
       ConversionPanel (metricPanel)    ConversionPanel (usaPanel)   
                |                                |
        -------------------              -------------------
        |       |         |              |       |         |
      Label     |       Choice         Label     |       Choice
                |                                |
          --------------                  --------------
          |            |                  |            |
      TextField    Scrollbar          TextField    Scrollbar
</literallayout>
      </section>

      <section>
        <title><ulink
        url="/library/books/tutorial1.02/ui/overview/drawing.html">Drawing</ulink></title>

        <itemizedlist>
          <listitem>
            <para>When the Converter application draws itself, here's what
            happens</para>

            <orderedlist>
              <listitem>
                <para>The Frame draws itself.</para>
              </listitem>

              <listitem>
                <para>The Converter object draws itself, drawing a box around
                its area.</para>
              </listitem>

              <listitem>
                <para>One of the two ConversionPanels draws itself, drawing a
                box around its area.</para>
              </listitem>

              <listitem>
                <para>The contents of the ConversionPanel -- the Label,
                TextField, Scrollbar, and Choice -- draw themselves.</para>
              </listitem>
            </orderedlist>
          </listitem>

          <listitem>
            <para>How Drawing Requests are handled</para>

            <para>AWT ----&gt; Component's update() ----&gt; Component's
            paint()</para>
          </listitem>

          <listitem>
            <para>Paint method</para>

            <programlisting>public void paint(Graphics g) {
       Dimension d = size();
       g.drawRect(0,0, d.width - 1, d.height - 1);
}</programlisting>
          </listitem>
        </itemizedlist>

        <para><ulink url="../audio/Gui3.asf"><inlinegraphic
        fileref="img/asf.gif" format="GIF" />Audio in
        Portuguese</ulink></para>
      </section>
    </section>

    <section id="graphic_user_interface_awt_1.1_components">
      <title><ulink
      url="/library/books/tutorial1.02/ui/components/index.html">AWT 1.1
      Components</ulink></title>

      <section>
        <title><ulink
        url="/library/books/tutorial1.02/ui/components/using.html">AWT
        hierarchy</ulink></title>

        <para>AWT Component</para>

        <figure>
          <title>AWT Hierarchy</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="265px" contentwidth="560px"
                         fileref="img/GUI5.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <para>AWT MenuComponent</para>

        <figure>
          <title>AWT MenuComponent Hierarchy</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="106px" contentwidth="553px"
                         fileref="img/GUI5.2.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <note>
          <para>Because of cross-platform restrictions, menu-related
          components aren't full-blown Components</para>
        </note>

        <para><ulink url="../audio/Gui7.asf"><inlinegraphic
        fileref="img/asf.gif" format="GIF" />Audio in
        Portuguese</ulink></para>
      </section>

      <section>
        <title><ulink
        url="/library/books/tutorial1.02/ui/components/generalRules.html">Rules
        for Using Components</ulink></title>

        <section>
          <title>How to Add a Component to a Container:</title>

          <para>For any Component object except a Window to display itself
          onscreen, you must first add it to a Container object.</para>

          <para>The Container class defines three methods for adding
          components:</para>

          <itemizedlist>
            <listitem>
              <para>add(Component comp) method simply requires that you
              specify the component to add.</para>
            </listitem>

            <listitem>
              <para>add(Component comp, int ind) method lets you add an
              argument specifying the integer position at which the component
              should be added.</para>
            </listitem>

            <listitem>
              <para>add(String pos, Component comp) method has as first
              argument a layout manager-dependent string that specifies the
              component's position to the layout manager.</para>
            </listitem>
          </itemizedlist>

          <note>
            <para>Adding a component to a container removes the component from
            the container it used to be in (if any).</para>
          </note>
        </section>

        <section>
          <title>What the Component Class Provides</title>

          <itemizedlist>
            <listitem>
              <para>Basic drawing support.</para>

              <para>Component provides the paint(), update(), and repaint()
              methods, which enable Components to draw themselves
              onscreen.</para>
            </listitem>

            <listitem>
              <para>Event handling</para>

              <para>Component defines the general-purpose handleEvent() method
              and a group of methods such as action() that handle specific
              event types.</para>
            </listitem>

            <listitem>
              <para>Appearance control: font</para>

              <para>Component provides methods to get and set the current
              font, and to get information about the current font.</para>
            </listitem>

            <listitem>
              <para>Appearance control: color</para>

              <para>Component provides methods to get and set the foreground
              and background colors.</para>
            </listitem>

            <listitem>
              <para>Image handling</para>

              <para>Component provides the basis for displaying images.
              Canvases and most Containers can display images.</para>
            </listitem>

            <listitem>
              <para>Onscreen size and position control</para>

              <para>Component provides methods that get or set (subject to
              layout manager oversight) the component's current size and
              location.</para>
            </listitem>
          </itemizedlist>

          <para><ulink url="../audio/Gui8.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>

      <section>
        <title><ulink
        url="/library/books/tutorial1.02/ui/components/button.html">Buttons</ulink></title>

        <para>The Button class provides a default button implementation. A
        button is a simple control that generates an action event when the
        user clicks it.</para>

        <figure>
          <title>Buttons</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="33px" contentwidth="396px"
                         fileref="img/GUI6.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <section>
          <title>Code Example</title>

          <programlisting>b1 = new Button();
b1.setLabel("Disable middle button");
b1.setActionCommand(DISABLE);
b2 = new Button("Middle button");
b3 = new Button("Enable middle button");
b3.setEnabled(false);
b3.setActionCommand(ENABLE);
//Listen for actions on buttons 1 and 3.
b1.addActionListener(this);
b3.addActionListener(this);

. . .

public void actionPerformed(ActionEvent e) {
    String command= e.getActionCommand();
    if (command==DISABLE) { //They clicked "Disable middle button"
        b2.setEnabled(false);
        b1.setEnabled(false);
        b3.setEnabled(true);
    }
    if (command == ENABLE) { //They clicked "Enable middle button"
        b2.setEnabled(true);
        b1.setEnabled(true);
        b3.setEnabled(false);
    }
}</programlisting>
        </section>
      </section>

      <section>
        <title><ulink
        url="/library/books/tutorial1.02/ui/components/label.html">Labels</ulink></title>

        <para>The Label class provides an easy way of putting unselectable
        text in your program's GUI. Labels are aligned to the left of their
        drawing area, by default.</para>

        <figure>
          <title>Labels</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="89px" contentwidth="160px"
                         fileref="img/GUI11.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <section>
          <title>Code Example</title>

          <programlisting>Label label1 = new Label();
label1.setText("Left");
Label label2 = new Label("Center");
label2.setAlignment(Label.CENTER);
Label label3 = new Label("Right", Label.RIGHT);</programlisting>
        </section>
      </section>

      <section>
        <title><ulink
        url="/library/books/tutorial1.02/ui/components/canvas.html">Canvases</ulink></title>

        <para>The Canvas class exists to be subclassed. It does nothing on its
        own; it merely provides a way for you to implement a custom
        Component</para>

        <figure>
          <title>Canvas</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="107px" contentwidth="161px"
                         fileref="img/GUI7.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <section>
          <title>Code Example</title>

          <programlisting>class ImageCanvas extends Canvas {
      Container pappy;
      Image image;
      boolean trueSizeKnown = false;
      Dimension minSize;

      public ImageCanvas(Image image, Container parent, int w, int h) {
             if (image == null) {
                 System.err.println("Canvas got invalid image object!");
                 return;
             }
             this.image = image;
             pappy = parent;
             minSize = new Dimension(w,h);
      }

      public Dimension getPreferredSize() { return getMinimumSize();}

      public Dimension getMinimumSize() { return minSize;}

      public void paint (Graphics g) {
             if (image != null) {
                 if (!trueSizeKnown) {
                    int width= image.getWidth(this);
                    int height= image.getHeight(this)
                    if ((imageWidth &gt; 0) &amp;&amp; (imageHeight &gt; 0)) {
                        trueSizeKnown = true; 
                        //Component-initiated resizing.
                        minSize = new Dimension(width,height);
                        setSize(width, height);
                        pappy.validate();
                    }
                 }
                 g.drawRect(0, 0, minSize.width - 1, minSize.height - 1);
                 g.drawImage(image, 0, 0, this);
            }
      }
}</programlisting>
        </section>
      </section>

      <section>
        <title><ulink
        url="/library/books/tutorial1.02/ui/components/checkbox.html">Checkboxes</ulink></title>

        <para>Checkboxes are two-state buttons that can be either "on" or
        "off". When the user clicks a checkbox, the checkbox state changes and
        it generates an action event.</para>

        <figure>
          <title>Checkbox</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="80px" contentwidth="270px"
                         fileref="img/GUI8.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <section>
          <title>Code Example</title>

          <programlisting>cb1 = new Checkbox();   //Default state is "off" (false).
cb1.setLabel("Checkbox 1");
cb3 = new Checkbox("Checkbox 3");
cb3.setState(true);     //Set state to "on" (true).
cbg = new CheckboxGroup();
cb4 = new Checkbox("Checkbox 4", cbg, false); //initial state: off (false)
cb5 = new Checkbox("Checkbox 5", cbg, false); //initial state: off
cb6 = new Checkbox("Checkbox 6", cbg, false); //initial state: off
</programlisting>
        </section>
      </section>

      <section>
        <title><ulink
        url="/library/books/tutorial1.02/ui/components/choice.html">Choices</ulink></title>

        <para>The Choice class provides a menu-like list of choices, accessed
        by a distinctive button. The user presses the button to bring up a
        "menu", and then chooses one of the items.</para>

        <figure>
          <title>Choice</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="122px" contentwidth="252px"
                         fileref="img/GUI9.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <section>
          <title>Code Example</title>

          <programlisting>choice = new Choice();
choice.addItem("ichi");
choice.addItem("ni");
choice.addItem("san");
choice.addItem("yon");
choice.addItemListener(this);

...

public void itemStateChanged(ItemEvent e) {
       setLabelText(choice.getSelectedIndex(), 
                    choice.getSelectedItem());
}</programlisting>
        </section>
      </section>

      <section>
        <title><ulink
        url="/library/books/tutorial1.02/ui/components/lists.html">Lists</ulink></title>

        <para>The List class provides a scrollable area containing selectable
        text items.</para>

        <figure>
          <title>List</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="158px" contentwidth="511px"
                         fileref="img/GUI12.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <section>
          <title>Code Example</title>

          <programlisting>//Build lists, which allows multiple selections.
spanish = new List(4, true); //prefer 4 items visible
spanish.add("uno");
. . .
spanish.add("siete");
spanish.addActionListener(this);
spanish.addItemListener(this);

italian = new List(); //Defaults to none visible, only one selectable
italian.add("uno");
. . .
italian.add("sette");
italian.addActionListener(this);
italian.addItemListener(this);
. . .
public void actionPerformed(ActionEvent e) {
       List list= (List) e.getSource();
       String language = (list == spanish) ? "Spanish" : "Italian";
       output.append("Action event occurred on \""
                     + list.getSelectedItem() + "\" in " 
                     + language + ".\n");
}

public void itemStateChanged(ItemEvent e) {
       List list= (List) e.getItemSelectable();
       String language = (list == spanish) ? "Spanish" : "Italian";

       int index = ((Integer)(e.getItem())).intValue();
       if (e.getStateChange() == ItemEvent.SELECTED) {
           output.append("Select event occurred on item #"
                          + index + " (\""
                          + list.getItem(index) + "\") in "
                          + language + "." + newline);
       } else { //the item was deselected
           output.append("Deselect event occurred on item #"
                          + index + " (\""
                          + list.getItem(index) + "\") in "
                          + language + "." + newline);
       }
}</programlisting>
        </section>
      </section>

      <section>
        <title><ulink
        url="/library/books/tutorial1.02/ui/components/scrollbar.html">ScrollPanes</ulink></title>

        <para>A ScrollPane manages a single child component, displaying as
        much of the component as space permits.</para>

        <para>By default, a scroll pane's scrollbars are visible only when
        they're needed.</para>

        <figure>
          <title>ScrollPane</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="127px" contentwidth="326px"
                         fileref="img/GUI14.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <section>
          <title>Code Example</title>

          <para>ScrollPane sp1 = new ScrollPane(); sp1.add(aComponent);</para>
        </section>

        <section>
          <title>Scrollbar parameters</title>

          <itemizedlist>
            <listitem>
              <para>SCROLLBARS_AS_NEEDED</para>

              <para>The default value. Show each scrollbar only when it's
              needed.</para>
            </listitem>

            <listitem>
              <para>SCROLLBARS_ALWAYS</para>

              <para>Always show scrollbars.</para>
            </listitem>

            <listitem>
              <para>SCROLLBARS_NEVER</para>

              <para>Never show scrollbars. You might use this option if you
              don't want the user to directly control what part of the child
              component is shown.</para>
            </listitem>
          </itemizedlist>

          <para>Example</para>

          <programlisting>ScrollPane sp2 = new ScrollPane(ScrollPane.SCROLLBARS_ALWAYS);</programlisting>
        </section>
      </section>

      <section>
        <title><ulink
        url="/library/books/tutorial1.02/ui/components/text.html">TextComponent</ulink></title>

        <para>The TextComponent derived classes, TextArea and TextField,
        display selectable text and, optionally, allow the user to edit the
        text.</para>

        <figure>
          <title>TextComponent</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="134px" contentwidth="260px"
                         fileref="img/GUI15.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <section>
          <title>TextArea and TextField</title>

          <para>From TextComponent this classes inherit methods that allow
          them to set and get the current selection, enable and disable
          editing, get the currently selected text (or all the text), and set
          the text.</para>

          <literallayout>             Component
                 |
            TextComponent
                 |
          +--------------+
          |              |
       TextArea       TextField</literallayout>
        </section>

        <section>
          <title>Code Example</title>

          <programlisting>//Where instance variables are defined:
TextField textField;
TextArea textArea;

public void init() {
    textField = new TextField(20);
    textField.addActionListener(this);
    textArea = new TextArea(5, 20);
    textArea.setEditable(false);

    ...//Add the two components to the panel. 
}

public void actionPerformed(ActionEvent evt) {
    String text = textField.getText();
    textArea.append(text + "\n");
    textField.selectAll();
}</programlisting>
        </section>
      </section>

      <section>
        <title><ulink
        url="/library/books/tutorial1.02/ui/components/label.html">Menus</ulink></title>

        <para>The following applet shows many of the menu features you're
        likely to use.</para>

        <figure>
          <title>Menu</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="151px" contentwidth="500px"
                         fileref="img/GUI13.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <note>
          <itemizedlist>
            <listitem>
              <para>Menus can exist only in menu bars, and menu bars can be
              attached only to windows (specifically, to Frames).</para>
            </listitem>

            <listitem>
              <para>Classes that provide menu functionality do not inherit
              from Component, since many platforms place severe limits on menu
              capabilities.</para>
            </listitem>
          </itemizedlist>
        </note>

        <section>
          <title>MenuComponent subclasses</title>

          <figure>
            <title>MenuComponent</title>

            <mediaobject>
              <imageobject>
                <imagedata contentdepth="96px" contentwidth="457px"
                           fileref="img/GUI16.gif" format="GIF" />
              </imageobject>
            </mediaobject>
          </figure>

          <itemizedlist>
            <listitem>
              <para>MenuItem</para>

              <para>Each item in a menu is represented by a MenuItem
              object.</para>
            </listitem>

            <listitem>
              <para>CheckboxMenuItem</para>

              <para>Each menu item that contains a checkbox is represented by
              a CheckboxMenuItem object.</para>
            </listitem>

            <listitem>
              <para>Menu</para>

              <para>Each menu is represented by a Menu object. Menu is a
              subclass of MenuItem so that you can create a submenu by adding
              one menu to another.</para>
            </listitem>

            <listitem>
              <para>Popupmenu</para>

              <para>Represents a popup menu.</para>
            </listitem>

            <listitem>
              <para>MenuBar</para>

              <para>The MenuBar class represents the platform-dependent notion
              of a group of menus attached to a window. MenuBars can not be
              bound to Panels.</para>
            </listitem>
          </itemizedlist>
        </section>

        <section>
          <title>MenuContainer Interface</title>

          <para>To be able to contain a MenuComponent, an object must adhere
          to the MenuContainer interface (Frame, Menu, and MenuBar classes
          do)</para>
        </section>
      </section>
    </section>

    <section id="graphic_user_interface_awt_1.1_menus">
      <title>AWT 1.1 Menus</title>

      <section>
        <title>Code Example</title>

        <programlisting>public class MenuWindow extends Frame implements ActionListener
                                                 ItemListener {
    . . .
    public MenuWindow() {
        
        //Build the menu bar.
        mb = new MenuBar();
        setMenuBar(mb);
 
        //Build first menu in the menu bar.
        m1 = new Menu("Menu 1", true);
        mb.add(m1);
        mi1_1 = new MenuItem("Menu Item 1_1");
        m1.add(mi1_1);
           . . .

        //Build help menu.
        m5 = new Menu("Menu 5");
        mb.add(m5); //just setting the help menu doesn't work; must add it
        mb.setHelpMenu(m5);
        mi5_1 = new MenuItem("Menu Item 5_1");
        mi5_1.setShortcut(new MenuShortcut(KeyEvent.VK_5));
        m5.add(mi5_1);
           . . .

        //Build second menu in the menu bar.
        m2 = new Menu("Menu 2");
        mb.add(m2);
        mi2_1 = new CheckboxMenuItem("Menu Item 2_1");
        m2.add(mi2_1);
 
        //Build third menu in the menu bar.
           . . .
        //Register as an ActionListener for all menu items.
        m1.addActionListener(this);
        m2.addActionListener(this);
        m3.addActionListener(this);
                . . .
        //Register as ItemListener on checkbox menu item.
        mi2_1.addItemListener(this);
    }
    . . .
    public void actionPerformed(ActionEvent e) {
        output.append("\"" + e.getActionCommand()
                      + "\" action detected in menu labeled \""
                      + ((MenuItem)(e.getSource())).getLabel() + "\".\n");
    }

    public void itemStateChanged(ItemEvent e) {
        output.append("Item state change detected on item \""
                      + e.getItem()
                      + "\" (state is " 
                      + ((e.getStateChange() == 
                            ItemEvent.SELECTED)? 
                            "selected)."
                          : "deselected).") + "\n");
    }
}</programlisting>
      </section>
    </section>

    <section id="graphic_user_interface_awt_1.1_containers">
      <title>AWT Containers</title>

      <section>
        <title>Frames</title>

        <para>The Frame class provides windows for applets and applications.
        Every application needs at least one Frame.</para>

        <section>
          <title>Code Example</title>

          <programlisting>public class MenuWindow extends Frame {
       boolean inAnApplet = true;
       TextArea output;

       public MenuWindow() {
              //Calls the Frame constructor and adds components to the window
              addWindowListener(new WindowAdapter() {
                   public void windowClosing(WindowEvent e) {
                      if (inAnApplet) {
                          dispose();
                      } else {
                          System.exit(0);
                      }
                   }
              }

         . . .

         public static void main(String args[]) {
                MenuWindow window = new MenuWindow();
                window.inAnApplet = false;
                window.setTitle("MenuWindow Application");
                window.setSize(450, 200);
                window.setVisible(true);
         }
}</programlisting>
        </section>

        <section>
          <title>Other methods provided by Frame</title>

          <itemizedlist>
            <listitem>
              <para>String getTitle() and void setTitle(String)</para>

              <para>Returns or sets (respectively) the title of the frame's
              window.</para>
            </listitem>

            <listitem>
              <para>Image getIconImage() and void setIconImage(Image)</para>

              <para>Returns or sets (respectively) the image displayed when
              the window is iconified.</para>
            </listitem>

            <listitem>
              <para>MenuBar getMenuBar() and void setMenuBar(MenuBar)</para>

              <para>Returns or sets (respectively) the menu bar for this
              Frame.</para>
            </listitem>

            <listitem>
              <para>void remove(MenuComponent)</para>

              <para>Removes the specified menu bar from this Frame.</para>
            </listitem>
          </itemizedlist>
        </section>
      </section>

      <section>
        <title><ulink
        url="/library/books/tutorial1.02/ui/components/panel.html">Panels</ulink></title>

        <para>The Panel class is a general-purpose Container subclass. You can
        use it as-is to hold Components, or you can define a subclass to
        perform special functionality, such as event handling for the objects
        the Panel contains.</para>

        <note>
          <para>The Applet class is a Panel subclass with special hooks to run
          in a browser or other applet viewer.</para>
        </note>

        <section>
          <title>Code Example</title>

          <programlisting>Panel p1 = new Panel();
p1.add(new Button("Button 1"));
p1.add(new Button("Button 2"));
p1.add(new Button("Button 3"));</programlisting>

          <para>A Panel subclass that draws a frame around its
          contents.</para>

          <figure>
            <title>Panel Subclass</title>

            <mediaobject>
              <imageobject>
                <imagedata contentdepth="96px" contentwidth="457px"
                           fileref="img/GUI16.gif" format="GIF" />
              </imageobject>
            </mediaobject>
          </figure>

          <programlisting>class FramedArea extends Panel {
    public FramedArea(CoordinatesDemo controller) {
        ...//Set the layout manager.
           //Add any Components this Panel contains...
    }

    //Ensure that no Component is placed on top of the frame.
    //The inset values were determined by trail and error.
    public Insets getInsets() {
        return new Insets(4,4,5,5);
    }

    //Draw the frame at this Panel's edges.
    public void paint(Graphics g) {
        Dimension d = getSize();
        Color bg = getBackground();
 
        g.setColor(bg);
        g.draw3DRect(0, 0, d.width - 1, d.height - 1, true);
        g.draw3DRect(3, 3, d.width - 7, d.height - 7, false);
    }
}</programlisting>
        </section>
      </section>

      <section>
        <title><ulink
        url="/library/books/tutorial1.02/ui/components/dialog.html">Dialogs</ulink></title>

        <para>The AWT provides support for dialogs -- windows that are
        dependent on other windows -- with the Dialog class. It provides a
        useful subclass, FileDialog,that provides dialogs to help the user
        open and save files.</para>

        <figure>
          <title>Dialog</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="121px" contentwidth="473px"
                         fileref="img/GUI10.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <section>
          <title>Code Example</title>

          <programlisting>class SimpleDialog extends Dialog implements ActionListener {
      TextField field;
      DialogWindow parent;
      Button setButton;

      SimpleDialog(Frame dw, String title) {
            super(dw, title, false);
            parent = (DialogWindow)dw;
           
            ...//Create and add components, such as the set button.
           
            //Initialize this dialog to its preferred size.
            pack();
      }

      public void actionPerformed(ActionEvent event) {
             Object source= event.getSource();
             if ((source == setButton) | (source == field))
                      parent.setText(field.getText());
             field.selectAll();
             setVisible(false);
      }
}
     
//Here's the code that brings up the dialog: 

if (dialog == null)
   dialog = new SimpleDialog(this, "A Simple Dialog");

dialog.setVisible(true);</programlisting>
        </section>
      </section>
    </section>

    <section id="graphic_user_interface_events">
      <title><ulink
      url="/library/books/tutorial1.02/ui/overview/events.html">Events</ulink></title>

      <section>
        <title>Definition</title>

        <para>When the user acts on a Component -- clicking it or pressing the
        Return key, for example -- an Event is generated.</para>
      </section>

      <section>
        <title>Processing</title>

        <itemizedlist>
          <listitem>
            <para>Events are generated by event sources.</para>
          </listitem>

          <listitem>
            <para>One or more listeners can register to be notified about
            events of a particular kind from a particular source.</para>
          </listitem>

          <listitem>
            <para>Event handlers can be instances of any class. As long as a
            class implements an event listener interface.</para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title>To implement event handlers</title>

        <orderedlist>
          <listitem>
            <para>Code declaring that the class implements a listener
            interface:</para>

            <programlisting>public class MyClass implements ActionListener {</programlisting>
          </listitem>

          <listitem>
            <para>Code that registers an instance of the event handling class
            as a listener:</para>

            <programlisting>someComponent.addActionListener(instanceOfMyClass);</programlisting>
          </listitem>

          <listitem>
            <para>The implementation of the methods in the listener
            interface:</para>

            <programlisting>public void actionPerformed(ActionEvent e) {
     ...//code that reacts to the action...
}</programlisting>
          </listitem>
        </orderedlist>

        <note>
          <para>The AWT doesn't see every event that occurs. The AWT can see
          only those events that the platform-dependent code lets it
          see.</para>
        </note>
      </section>

      <section>
        <title>Handling Standard AWT Events</title>

        <table>
          <title>AWT Events</title>

          <tgroup cols="3">
            <colspec align="center" />

            <thead>
              <row>
                <entry align="center">Listener Interface</entry>

                <entry align="center">Adapter Class</entry>

                <entry align="center">Methods</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>ActionListener</entry>

                <entry>none</entry>

                <entry>actionPerformed</entry>
              </row>

              <row>
                <entry>AdjustmentListener</entry>

                <entry>none</entry>

                <entry>adjustmentValueChanged</entry>
              </row>

              <row>
                <entry>ComponentListener</entry>

                <entry>ComponentAdapter</entry>

                <entry>componentHidden componentMoved componentResized
                componentShown</entry>
              </row>

              <row>
                <entry>ContainerListener</entry>

                <entry>ContainerAdapter</entry>

                <entry>componentAdded componentRemoved</entry>
              </row>

              <row>
                <entry>FocusListener</entry>

                <entry>FocusAdapter</entry>

                <entry>focusGained focusLost</entry>
              </row>

              <row>
                <entry>ItemListener</entry>

                <entry>none</entry>

                <entry>itemStateChanged</entry>
              </row>

              <row>
                <entry>KeyListener</entry>

                <entry>KeyAdapter</entry>

                <entry>keyPressed keyReleased keyTyped</entry>
              </row>

              <row>
                <entry>MouseListener</entry>

                <entry>MouseAdapter</entry>

                <entry>mouseClicked mouseEntered mouseExited mousePressed
                mouseReleased</entry>
              </row>

              <row>
                <entry>MouseMotionListener</entry>

                <entry>MouseMotionAdapter</entry>

                <entry>mouseDragged mouseMoved</entry>
              </row>

              <row>
                <entry>TextListener</entry>

                <entry>none</entry>

                <entry>textValueChanged</entry>
              </row>

              <row>
                <entry>WindowListener</entry>

                <entry>WindowAdapter</entry>

                <entry>windowActivated windowClosed windowClosing
                windowDeactivated windowDeiconified windowIconified
                windowOpened</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </section>

      <section>
        <title>AWT events are divided in 2 groups</title>

        <section>
          <title>Low-level events</title>

          <para>They represent window-system occurrences or low-level
          input:</para>

          <para>mouse and key events -- both of which result directly from
          user input .</para>
        </section>

        <section>
          <title>Semantic events</title>

          <para>These events are the result of component-specific user
          interaction:</para>

          <para>A button generates an action event when the user clicks
          it.</para>
        </section>
      </section>

      <section>
        <title>Using Adapters to Handle Events</title>

        <para>Most AWT listener interfaces contain more than one
        method.</para>

        <para>For example, the MouseListener interface:</para>

        <orderedlist>
          <listitem>
            <para>mousePressed</para>
          </listitem>

          <listitem>
            <para>mouseReleased</para>
          </listitem>

          <listitem>
            <para>mouseEntered</para>
          </listitem>

          <listitem>
            <para>mouseExited</para>
          </listitem>

          <listitem>
            <para>mouseClicked</para>
          </listitem>
        </orderedlist>

        <para>The AWT provides an adapter class for each listener interface
        with more than one method. For example, the MouseAdapter class
        implements the MouseListener interface.</para>

        <para>An adapter class implements empty versions of all its
        interface's methods:</para>

        <programlisting>/*
 * An example of extending an adapter class instead of
 * directly implementing a listener interface.
 */
public class MyClass extends MouseAdapter {
    ... 
        someObject.addMouseListener(this);
    ... 
    public void mouseClicked(MouseEvent e) {
        ...//Event handler implementation goes here...
    }
}
</programlisting>
      </section>
    </section>

    <section id="graphic_user_interface_awt_peers">
      <title><ulink
      url="/library/books/tutorial1.02/ui/components/peer.html">AWT
      Peers</ulink></title>

      <para>The AWT have classes (components) that provide a
      platform-independent API but that make use of platform-specific
      implementations (peers). Every AWT component object has a peer object
      that controls the object's look and feel.</para>

      <figure>
        <title>AWT Peers</title>

        <mediaobject>
          <imageobject>
            <imagedata contentdepth="187px" contentwidth="438px"
                       fileref="img/GUI17.gif" format="GIF" />
          </imageobject>
        </mediaobject>
      </figure>

      <section>
        <title>How Peers Are Created</title>

        <itemizedlist>
          <listitem>
            <para>Peers are created just before their corresponding component
            object is drawn for the first time.</para>
          </listitem>

          <listitem>
            <para>Just before a container is shown for the first time, its
            peer -- and the peers of all components it contains -- is
            created.</para>
          </listitem>

          <listitem>
            <para>If you add a component to a visible container, you need to
            explicitly tell the AWT to create a peer for the component. You do
            this by calling the validate() method.</para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title>How Peers Handle Events</title>

        <para>Peers implement the feel (and, indirectly, the look) of UI
        components by reacting to user input events.</para>

        <section>
          <title>Event chain</title>

          <itemizedlist>
            <listitem>
              <para>Peers are at the end of the event chain. After all the
              Components in the hierarchy have had an opportunity to handle
              the event, the peer gets to see and react to the event.</para>
            </listitem>

            <listitem>
              <para>From raw events (key presses and mouse clicks) peers
              sometimes generate higher level events (actions, focus changes,
              ...). These higher level events are passed on to the relevant
              Component for handling.</para>
            </listitem>
          </itemizedlist>

          <note>
            <para>For mouse events, the peer is the first to see the event,
            and it doesn't necessarily pass all events on to the
            Component.</para>
          </note>

          <para><ulink url="../audio/Gui20.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>
    </section>

    <section id="graphic_user_interface_layout_manager">
      <title><ulink
      url="/library/books/tutorial1.02/ui/layout/index.html">Layout
      Managers</ulink></title>

      <section>
        <title>Definition</title>

        <para>A layout manager is an object that controls the size and
        position of components in a container. Every Container object has a
        LayoutManager object that controls its layout.</para>
      </section>

      <section>
        <title>AWT has 5 Layout Managers classes</title>

        <orderedlist>
          <listitem>
            <para>FlowLayout</para>
          </listitem>

          <listitem>
            <para>GridLayout</para>
          </listitem>

          <listitem>
            <para>BorderLayout</para>
          </listitem>

          <listitem>
            <para>CardLayout</para>
          </listitem>

          <listitem>
            <para>GridBagLayout</para>
          </listitem>
        </orderedlist>

        <para></para>
      </section>

      <section>
        <title><ulink
        url="/library/books/tutorial1.02/ui/layout/generalRules.html">General
        Rules for Using Layout Managers</ulink></title>

        <section>
          <title>Default Managers</title>

          <itemizedlist>
            <listitem>
              <para>For Panel objects, the default layout manager is an
              instance of the FlowLayout class.</para>
            </listitem>

            <listitem>
              <para>For Window objects, the default layout manager is an
              instance of the BorderLayout class.</para>
            </listitem>
          </itemizedlist>

          <para>This layout manager is automatically consulted every time the
          Container might need to change its appearance.</para>
        </section>

        <section>
          <title>How to Create a Layout Manager and Associate It with a
          Container</title>

          <itemizedlist>
            <listitem>
              <para>To use the default layout manager: Don't do anything. The
              constructor for each Container creates a layout manager instance
              and initializes the Container to use it.</para>
            </listitem>

            <listitem>
              <para>To use a non-default layout manager: Create an instance of
              the desired layout manager class and tell the Container to use
              it:</para>

              <programlisting>aContainer.setLayout(new CardLayout());</programlisting>
            </listitem>
          </itemizedlist>
        </section>

        <section>
          <title>Methods that result in calls to the Container's layout
          manager</title>

          <orderedlist>
            <listitem>
              <para>add(), remove(), removeAll() - They add and remove
              Components from a Container; you can call them at any
              time.</para>
            </listitem>

            <listitem>
              <para>layout() - which is called as the result of any paint
              request to a Container, requests that the Container place and
              size itself and the Components it contains.</para>
            </listitem>

            <listitem>
              <para>preferredSize(), minimumSize() - They return the
              Container's ideal size and minimum size, respectively. The
              values returned are just hints; they have no effect unless your
              program enforces these sizes.</para>
            </listitem>
          </orderedlist>

          <para><ulink url="../audio/Gui21.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>

      <section>
        <title><ulink
        url="/library/books/tutorial1.02/ui/layout/border.html">BorderLayout</ulink></title>

        <figure>
          <title>BorderLayout</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="125px" contentwidth="210px"
                         fileref="img/GUI19.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <figure>
          <title></title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="283px" contentwidth="412px"
                         fileref="img/GUI18.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <section>
          <title>Behavior</title>

          <para>A BorderLayout has five areas: north, south, east, west, and
          center.</para>

          <para>If you enlarge the window, you'll see that the center area
          gets as much of the newly available space as possible. The other
          areas expand only as much as necessary to keep all available space
          filled.</para>
        </section>

        <section>
          <title>Code Example</title>

          <programlisting>setLayout(new BorderLayout());
setFont(new Font("Helvetica", Font.PLAIN, 14));
             
add("North", new Button("North"));
add("South", new Button("South"));
add("East", new Button("East"));
add("West", new Button("West"));
add("Center", new Button("Center"));</programlisting>

          <note>
            <para>When adding a component to a container that uses
            BorderLayout, you must use the two-argument version of the add()
            method, and the first argument must be "North", "South", "East",
            "West", or "Center". If you use the one-argument version of add(),
            or if you specify an invalid first argument, your component might
            not be visible.</para>
          </note>

          <para>To add a gap between the components:</para>

          <programlisting>public BorderLayout(int horizontalGap, int verticalGap)
</programlisting>

          <para><ulink url="../audio/Gui22.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>

      <section>
        <title><ulink
        url="/library/books/tutorial1.02/ui/layout/card.html">CardLayout</ulink></title>

        <figure>
          <title>CardLayout: Buttons</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="137px" contentwidth="282px"
                         fileref="img/GUI20.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <figure>
          <title>CardLayout: TextField</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="137px" contentwidth="282px"
                         fileref="img/GUI21.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <section>
          <title>Behavior</title>

          <para>The CardLayout class manages two or more components that share
          the same display space. Conceptually, each component is like a
          playing card in a stack, where only the top card is visible at any
          time.</para>
        </section>

        <section>
          <title>Code Example</title>

          <programlisting>final static String BUTTONPANEL = "Panel with Buttons";
final static String TEXTPANEL = "Panel with TextField";

//Where the container is initialized:
cards = new Panel();
cards.setLayout(new CardLayout());
. . .
cards.add(BUTTONPANEL, p1);
cards.add(TEXTPANEL, p2);
. . .
    //Put the Choice in a Panel to get a nicer look.
    Panel cp = new Panel();
    Choice c = new Choice();
    c.addItem(BUTTONPANEL);
    c.addItem(TEXTPANEL);
    cp.add(c);
    add("North", cp);
. . .
public boolean action(Event evt, Object arg) {
    if (evt.target instanceof Choice) {
        ((CardLayout)cards.getLayout()).show(cards,(String)arg);
        return true;
    }
    return false;
}</programlisting>
        </section>

        <section>
          <title>Methods to chose a component</title>

          <programlisting>public void first(Container parent)
public void next(Container parent)
public void previous(Container parent)
public void last(Container parent)
public void show(Container parent, String name)</programlisting>

          <para><ulink url="../audio/Gui23.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>

      <section>
        <title><ulink
        url="/library/books/tutorial1.02/ui/layout/flow.html">FlowLayout</ulink></title>

        <figure>
          <title>FlowLayout</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="87px" contentwidth="417px"
                         fileref="img/GUI22.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <figure>
          <title>FlowLayout: Expanded</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="116px" contentwidth="346px"
                         fileref="img/GUI23.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <section>
          <title>Behaviour</title>

          <para>FlowLayout puts components in a row, sized at their preferred
          size. If the horizontal space in the container is too small to put
          all the components in one row, FlowLayout uses multiple rows.</para>
        </section>

        <section>
          <title>Code Example</title>

          <programlisting>setLayout(new FlowLayout());
setFont(new Font("Helvetica", Font.PLAIN, 14));
             
add(new Button("Button 1"));
add(new Button("2"));
add(new Button("Button 3"));
add(new Button("Long-Named Button 4"));
add(new Button("Button 5"));</programlisting>
        </section>

        <section>
          <title>FlowLayout constructors</title>

          <programlisting>public FlowLayout()
          public FlowLayout(int alignment)
          public FlowLayout(int alignment,
                            int horizontalGap, int verticalGap)</programlisting>

          <para>Alignment argument must have the value:</para>

          <programlisting>FlowLayout.LEFT, FlowLayout.CENTER, or FlowLayout.RIGHT</programlisting>

          <para><ulink url="../audio/Gui24.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>

      <section>
        <title><ulink
        url="/library/books/tutorial1.02/ui/layout/grid.html">GridLayout</ulink></title>

        <figure>
          <title>GridLayout</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="125px" contentwidth="312px"
                         fileref="img/GUI24.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <figure>
          <title>GridLayout: Expanded</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="196px" contentwidth="381px"
                         fileref="img/GUI25.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <section>
          <title>Behaviour</title>

          <para>GridLayout places components in a grid of cells. Each
          component takes all the available space within its cell, and each
          cell is exactly the same size. If the GridLayout window is resized,
          the GridLayout changes the cell size so that the cells are as large
          as possible.</para>
        </section>

        <section>
          <title>Code Example</title>

          <programlisting>//Construct a GridLayout with 2 columns and an unspecified number of rows.
setLayout(new GridLayout(0,2));
setFont(new Font("Helvetica", Font.PLAIN, 14));
             
add(new Button("Button 1"));
add(new Button("2"));
add(new Button("Button 3"));
add(new Button("Long-Named Button 4"));
add(new Button("Button 5"));</programlisting>
        </section>

        <section>
          <title>GridLayout constructors</title>

          <programlisting>public GridLayout(int rows, int columns)
public GridLayout(int rows, int columns,
                  int horizontalGap, int verticalGap)</programlisting>

          <para>Alignment argument must have the value:</para>

          <programlisting>FlowLayout.LEFT, FlowLayout.CENTER, or FlowLayout.RIGHT</programlisting>

          <para><ulink url="../audio/Gui25.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>

      <section>
        <title><ulink
        url="/library/books/tutorial1.02/ui/layout/gridbag.html">GridBagLayout</ulink></title>

        <figure>
          <title>GridBagLayout</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="173px" contentwidth="260px"
                         fileref="img/GUI26.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <figure>
          <title>GridBagLayout: Expanded</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="196px" contentwidth="381px"
                         fileref="img/GUI25.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <section>
          <title>Behaviour</title>

          <para>GridBagLayout places components in a grid of rows and columns,
          allowing specified components to span multiple rows or columns. Not
          all rows or columns have to have the same height or width.</para>
        </section>

        <section>
          <title>Specifying Constraints</title>

          <para>GridBagLayout specifies the size and position characteristics
          of its components is by specifying constraints for each
          component:</para>

          <programlisting>GridBagLayout gridbag = new GridBagLayout();
GridBagConstraints c = new GridBagConstraints();
setLayout(gridbag);

//...Set instance variables in the GridBagConstraints instance... 
gridbag.setConstraints(theComponent, c); 
add(theComponent);</programlisting>

          <para>GridBagConstraints instance variables:</para>

          <programlisting>gridx, gridy, gridwidth, gridheight, fill, ipadx, ipady,
insets, anchor, weightx, weighty.</programlisting>
        </section>

        <section>
          <title>Code Example</title>

          <programlisting>GridBagLayout gridbag = new GridBagLayout();
GridBagConstraints c = new GridBagConstraints();
setLayout(gridbag);
            
c.fill = GridBagConstraints.BOTH;
c.gridheight = 2;
c.weighty = 1.0;
Button button = new Button(name);
gridbag.setConstraints(button, c);
add(button);</programlisting>

          <para><ulink url="../audio/Gui26.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>

      <section>
        <title><ulink
        url="/library/books/tutorial1.02/ui/layout/custom.html">Custom Layout
        Manager</ulink></title>

        <figure>
          <title>Custom Layout</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="193px" contentwidth="207px"
                         fileref="img/GUI28.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <figure>
          <title>Custom Layout: Expanded</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="225px" contentwidth="399px"
                         fileref="img/GUI29.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <section>
          <title>To create a new Layout Manager</title>

          <para>A layout manager has just to implement the LayoutManager
          Interface.</para>
        </section>

        <section>
          <title>The LayoutManager interface</title>

          <itemizedlist>
            <listitem>
              <programlisting>public void addLayoutComponent(String name, Component comp)</programlisting>

              <para>Called only by the Container add(name, component) method.
              Layout managers that don't require that their components have
              names generally do nothing in this method.</para>
            </listitem>

            <listitem>
              <programlisting>public void removeLayoutComponent(Component comp) </programlisting>

              <para>Called by the Container remove() and removeAll() methods.
              Layout managers that don't require that their components have
              names generally do nothing in this method, since they can query
              the container for its components using the Container
              getComponents() method.</para>
            </listitem>

            <listitem>
              <programlisting>public Dimension preferredLayoutSize(Container parent)</programlisting>

              <para>Called by the Container preferredSize() method. This
              method should calculate the ideal size of the parent, assuming
              that the components it contains will be at or above their
              preferred sizes.</para>
            </listitem>

            <listitem>
              <programlisting>public Dimension minimumLayoutSize(Container parent)</programlisting>

              <para>Called by the Container minimumSize() method. This method
              should calculate the minimum size of the parent, assuming that
              the components it contains will be at or above their minimum
              sizes.</para>
            </listitem>

            <listitem>
              <programlisting>public void layoutContainer(Container parent)</programlisting>

              <para>Called when the container is first displayed, and every
              time its size changes. A layout manager's layoutContainer()
              method doesn't actually draw Components. It simply invokes each
              Component's resize(), move(), and reshape() methods to set the
              Component's size and position.</para>
            </listitem>
          </itemizedlist>

          <para><ulink url="../audio/Gui27.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>

      <section>
        <title><ulink url="/library/books/tutorial1.02/ui/layout/none.html">No
        Layout Manager (Absolute Positioning)</ulink></title>

        <figure>
          <title>No Layout Manager</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="130px" contentwidth="260px"
                         fileref="img/GUI30.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <figure>
          <title>No Layout Manager: Expanded</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="195px" contentwidth="330px"
                         fileref="img/GUI31.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <section>
          <title>If possible use a Layout Manager</title>

          <para>Layout managers make it easy to resize a container and adjust
          to platform-dependent component appearance and to different font
          sizes. They also can be reused easily by other containers and other
          programs.</para>
        </section>

        <section>
          <title>Absolute Positioning Code Example</title>

          <programlisting>public class NoneWindow extends Frame {
    private boolean laidOut = false;
    private Button b1, b2, b3;

    public NoneWindow() {
        super();
        setLayout(null);

        b1 = new Button("one");
        add(b1);
        b2 = new Button("two");
        add(b2);
        b3 = new Button("three");
        add(b3);
    }

    public void paint(Graphics g) {
        if (!laidOut) {
            Insets insets = insets();

            b1.reshape(50 + insets.left, 5 + insets.top, 50, 20);
            b2.reshape(70 + insets.left, 35 + insets.top, 50, 20);
            b3.reshape(130 + insets.left, 15 + insets.top, 50, 30);

            laidOut = true;
        }
    }
 
    . . .
}</programlisting>

          <para><ulink url="../audio/Gui28.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>
    </section>

    <section id="graphic_user_interface_awt_graphics">
      <title>AWT Graphics</title>

      <section>
        <title>Graphics Object</title>

        <section>
          <title>Definition</title>

          <para>Graphics objects are the key to all drawing. They support the
          two basic kinds of drawing: primitive graphics (such as lines,
          rectangles, and text) and images. They also provide a drawing
          context by maintaining state such as the current drawing area and
          the current drawing color.</para>
        </section>

        <section>
          <title>The Coordinate System</title>

          <figure>
            <title>Coordinate System</title>

            <mediaobject>
              <imageobject>
                <imagedata contentdepth="193px" contentwidth="357px"
                           fileref="img/GUI32.gif" format="GIF" />
              </imageobject>
            </mediaobject>
          </figure>

          <note>
            <para>Each Component has its own integer coordinate system,
            ranging from (0, 0) to (width - 1, height - 1).</para>
          </note>
        </section>

        <section>
          <title><ulink
          url="/library/books/tutorial1.02/ui/drawing/drawingShapes.html">Drawing
          Shapes</ulink></title>

          <para>The Graphics class defines methods for drawing the following
          kinds of shapes:</para>

          <itemizedlist>
            <listitem>
              <para>Lines (drawLine(), which draws a line in the Graphics
              object's current color, which is initialized to the Component's
              foreground color)</para>
            </listitem>

            <listitem>
              <para>Rectangles (drawRect(), fillRect(), and clearRect() --
              where fillRect() fills a rectangle with the Graphics object's
              current color, and clearRect() fills a rectangle with the
              Component's background color)</para>
            </listitem>

            <listitem>
              <para>Raised or lowered rectangles (draw3DRect() and
              fill3DRect())</para>
            </listitem>

            <listitem>
              <para>Round-edged rectangles (drawRoundRect() and
              fillRoundRect())</para>
            </listitem>

            <listitem>
              <para>Ovals (drawOval() and fillOval())</para>
            </listitem>

            <listitem>
              <para>Arcs (drawArc() and fillArc())</para>
            </listitem>

            <listitem>
              <para>Polygons (drawPolygon() and fillPolygon())</para>
            </listitem>
          </itemizedlist>

          <para><ulink url="../audio/Gui29.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>

        <section>
          <title>A Shape Sampler</title>

          <figure>
            <title>Shape Sampler</title>

            <mediaobject>
              <imageobject>
                <imagedata contentdepth="93px" contentwidth="543px"
                           fileref="img/GUI33.gif" format="GIF" />
              </imageobject>
            </mediaobject>
          </figure>

          <para>Code:</para>

          <programlisting>Color bg = getBackground();
Color fg = getForeground();
. . .
// drawLine() 
g.drawLine(x, y+rectHeight-1, x + rectWidth, y); // x1, y1, x2, y2
. . .
// drawRect() 
g.drawRect(x, y, rectWidth, rectHeight); // x, y, width, height
. . .
// draw3DRect() 
g.setColor(bg);
g.draw3DRect(x, y, rectWidth, rectHeight, true);
g.setColor(fg);
. . .
// drawArc() 
g.drawArc(x, y, rectWidth, rectHeight, 90, 135); // x, y, w, h
. . .
// drawPolygon() 
Polygon polygon = new Polygon();
polygon.addPoint(x, y);
polygon.addPoint(x+rectWidth, y+rectHeight);
polygon.addPoint(x, y+rectHeight);
polygon.addPoint(x+rectWidth, y);
//polygon.addPoint(x, y); //don't complete; fill will, draw won't
g.drawPolygon(polygon); 
. . .
// fillRect() 
g.fillRect(x, y, rectWidth, rectHeight); // x, y, width, height
. . .
// fill3DRect() 
g.setColor(bg);
g.fill3DRect(x, y, rectWidth, rectHeight, true);
g.setColor(fg);
. . .
// fillArc() 
g.fillArc(x, y, rectWidth, rectHeight, 90, 135); // x, y, w, h
. . .
// fillPolygon() 
Polygon filledPolygon = new Polygon();
filledPolygon.addPoint(x, y);
filledPolygon.addPoint(x+rectWidth, y+rectHeight);
filledPolygon.addPoint(x, y+rectHeight);
filledPolygon.addPoint(x+rectWidth, y);
//filledPolygon.addPoint(x, y);
g.fillPolygon(filledPolygon); 

</programlisting>

          <para><ulink url="../audio/Gui30.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>

        <section>
          <title><ulink
          url="/library/books/tutorial1.02/ui/drawing/drawingText.html">DrawingText</ulink></title>

          <figure>
            <title>Drawing Text</title>

            <mediaobject>
              <imageobject>
                <imagedata contentdepth="218px" contentwidth="491px"
                           fileref="img/GUI34.gif" format="GIF" />
              </imageobject>
            </mediaobject>
          </figure>

          <section>
            <title>Graphics Methods for drawing text</title>

            <programlisting>public void drawBytes(byte data[], int offset, int length, int x, int y);
public void drawChars(char data[], int offset, int length, int x, int y);
public void drawString(String data, int x, int y);</programlisting>

            <note>
              <para>For the text drawing methods, x and y are integers that
              specify the position of the lower left corner of the text. To be
              precise, the y coordinate specifies the baseline of the
              text.</para>
            </note>
          </section>

          <section>
            <title>FontMetrics objects are used to get information about a
            font</title>

            <programlisting>boolean textFits = false;
Font font = g.getFont();
FontMetrics fontMetrics = g.getFontMetrics();
while (!textFits) {
    if ((fontMetrics.getHeight() &lt;= maxCharHeight) 
        &amp;&amp; (fontMetrics.stringWidth("drawRoundRect()") 
            &lt;= gridWidth)) {
        textFits = true;
    } else {
        g.setFont(font = new Font(font.getName(),
                                      font.getStyle(),
                                  font.getSize() - 1));
        fontMetrics = g.getFontMetrics();
    }
}</programlisting>

            <para>Methods that return information about a font's vertical
            size:</para>

            <programlisting>getAscent(), getMaxAscent(), getDescent(), getMaxDescent(), getHeight(), getLeading()</programlisting>

            <para><ulink url="../audio/Gui31.asf"><inlinegraphic
            fileref="img/asf.gif" format="GIF" />Audio in
            Portuguese</ulink></para>
          </section>
        </section>
      </section>
    </section>

    <section id="graphic_user_interface_images">
      <title><ulink
      url="/library/books/tutorial1.02/ui/drawing/usingImages.html">Images</ulink></title>

      <section>
        <title><ulink
        url="/library/books/tutorial1.02/ui/drawing/loadingImages.html">Loading
        Images</ulink></title>

        <para>The Applet class uses two getImage() methods to load
        images:</para>

        <itemizedlist>
          <listitem>
            <para>public Image getImage(URL url)</para>
          </listitem>

          <listitem>
            <para>public Image getImage(URL url, String name)</para>
          </listitem>
        </itemizedlist>

        <para>The Toolkit class declares two more getImage() methods to load
        images:</para>

        <itemizedlist>
          <listitem>
            <para>public abstract Image getImage(URL url)</para>
          </listitem>

          <listitem>
            <para>public abstract Image getImage(String filename)</para>
          </listitem>
        </itemizedlist>

        <programlisting>Toolkit toolkit = Toolkit.getDefaultToolkit();
Image image1 = toolkit.getImage("imageFile.gif");
Image image2 = toolkit.getImage(new URL("http://java.sun.com/graphics.gif"));</programlisting>

        <section>
          <title>Creating Images with MemoryImageSource</title>

          <para>With the help of an image producer such as the
          MemoryImageSource class, you can construct images from
          scratch:</para>

          <programlisting>int w = 100;
int h = 100;
int[] pix = new int[w * h];
int index = 0;
for (int y = 0; y &lt; h; y++) {
    int red = (y * 255) / (h - 1);
    for (int x = 0; x &lt; w; x++) {
          int blue = (x * 255) / (w - 1);
          pix[index++] = (255 &lt;&lt; 24) | (red &lt;&lt; 16) | blue;
    }
}
Image img = createImage(new MemoryImageSource(w, h, pix, 0, w));
</programlisting>
        </section>
      </section>

      <section>
        <title><ulink
        url="/library/books/tutorial1.02/ui/drawing/drawingImages.html">Displaying
        Images</ulink></title>

        <itemizedlist>
          <listitem>
            <para>Normal size in the upper left corner of the Component area
            (0, 0):</para>

            <para>g.drawImage(image, 0, 0, this);</para>
          </listitem>

          <listitem>
            <para>Scaled to be 300 pixels wide and 62 pixels tall, starting at
            the coordinates (90, 0):</para>

            <para>g.drawImage(myImage, 90, 0, 300, 62, this);</para>
          </listitem>
        </itemizedlist>

        <note>
          <para>The drawImage() method returns after displaying the image data
          that has been loaded, so far.</para>
        </note>

        <para><ulink url="../audio/Gui32.asf"><inlinegraphic
        fileref="img/asf.gif" format="GIF" />Audio in
        Portuguese</ulink></para>
      </section>

      <section>
        <title><ulink
        url="/library/books/tutorial1.02/ui/drawing/usingImages.html">Image
        Filters</ulink></title>

        <figure>
          <title>Image Filters</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="77px" contentwidth="479px"
                         fileref="img/GUI35.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <itemizedlist>
          <listitem>
            <para>An image producer: It produces raw data for Image Objects
            and implements the ImageProducer interface.</para>
          </listitem>

          <listitem>
            <para>An image consumer: It is an object interested in data
            produced by image producers and implements the ImageConsumer
            interface.</para>
          </listitem>

          <listitem>
            <para>An image consumer: It is an object interested in data
            produced by image producers and implements the ImageConsumer
            interface.</para>
          </listitem>
        </itemizedlist>

        <section>
          <title><ulink
          url="/library/books/tutorial1.02/ui/drawing/useFilter.html">Using an
          Image Filter</ulink></title>

          <para>Code for a rotation filter:</para>

          <programlisting>ImageFilter filter = new RotateFilter(angle);
ImageProducer producer = new FilteredImageSource(sourceImage.getSource(),
                                                  filter);
resultImage = createImage(producer);
repaint();</programlisting>
        </section>

        <section>
          <title><ulink
          url="/library/books/tutorial1.02/ui/drawing/writeFilter.html">Writing
          an Image Filter</ulink></title>

          <para>Creating an ImageFilter Subclass:</para>

          <para>Image filters implement the ImageConsumer interface.</para>

          <programlisting>void setDimensions(int width, int height);
void setProperties(Hashtable props);
void setColorModel(ColorModel model);
void setHints(int hintflags);
void setPixels(int x, int y, int w, int h,
               ColorModel model, byte pixels[],
               int off, int scansize);
void setPixels(int x, int y, int w, int h,
               ColorModel model, int pixels[],
               int off, int scansize);
void imageComplete(int status);</programlisting>

          <note>
            <para>The ImageFilter class implements all the above methods so
            that they forward the method data to the filter's consumer.</para>
          </note>

          <para><ulink url="../audio/Gui33.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>

      <section>
        <title>The setPixels() method</title>

        <figure>
          <title>setPixels() Method</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="454px" contentwidth="472px"
                         fileref="img/GUI36.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <itemizedlist>
          <listitem>
            <para>x, y</para>

            <para>Specify the location within the image at which this
            rectangle begins.</para>
          </listitem>

          <listitem>
            <para>w, h</para>

            <para>Specify the width and height, in pixels, of this
            rectangle.</para>
          </listitem>

          <listitem>
            <para>model</para>

            <para>Specifies the color model used by the data in the pixels
            array.</para>
          </listitem>

          <listitem>
            <para>pixels[]</para>

            <para>Specifies an array of pixels.</para>
          </listitem>

          <listitem>
            <para>offset</para>

            <para>Specifies the index of the first pixel in the
            rectangle.</para>
          </listitem>

          <listitem>
            <para>scansize</para>

            <para>Specifies the width of each row in the pixels array.</para>
          </listitem>
        </itemizedlist>

        <para><ulink url="../audio/Gui34.asf"><inlinegraphic
        fileref="img/asf.gif" format="GIF" />Audio in
        Portuguese</ulink></para>
      </section>
    </section>
  </chapter>

  <chapter id="applets">
    <title>Applets</title>

    <section id="applets_overview">
      <title><ulink
      url="http://java.sun.com/docs/books/tutorial/applet/overview/index.html">Overview</ulink></title>

      <section>
        <title>Definition</title>

        <para>An applet is a graphic Java program made to run as part of other
        programs, usually a Browser. It should extend the class Applet.</para>
      </section>

      <section>
        <title>Graphic Classes Hierarchy</title>

        <figure>
          <title>Graphic Classes</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="189px" contentwidth="555px"
                         fileref="img/Applets1.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <para>Applets extend the Panel Class.</para>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/applet/overview/appletMethods.html">The
        Applet class main methods</ulink></title>

        <programlisting>public class Simple extends Applet {
    . . .
    public void init() { . . . }
    public void start() { . . . }
    public void stop() { . . . }
    public void destroy() { . . . }
    . . .
}</programlisting>

        <itemizedlist>
          <listitem>
            <para>init()</para>

            <para>To initialize the applet each time it's loaded (or
            reloaded).</para>
          </listitem>

          <listitem>
            <para>start()</para>

            <para>To start the applet's execution.</para>
          </listitem>

          <listitem>
            <para>stop()</para>

            <para>To stop the applet's execution.</para>
          </listitem>

          <listitem>
            <para>destroy()</para>

            <para>To perform a final cleanup in preparation for
            unloading.</para>
          </listitem>
        </itemizedlist>

        <para><ulink url="../audio/Applet1.asf"><inlinegraphic
        fileref="img/asf.gif" format="GIF" />Audio in
        Portuguese</ulink></para>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/applet/overview/componentMethods.html">Methods
        for Drawing and Event Handling</ulink></title>

        <section>
          <title>For Drawing</title>

          <itemizedlist>
            <listitem>
              <para>paint()</para>

              <para>The basic display method. Many applets implement the
              paint() method to draw the applet's representation within a
              browser page.</para>
            </listitem>

            <listitem>
              <para>update()</para>

              <para>A method you can use along with paint() to improve drawing
              performance.</para>
            </listitem>
          </itemizedlist>
        </section>

        <section>
          <title>Event Handling</title>

          <para>The Component class defines several methods (such as action()
          and mouseDown()) for handling particular types of events, and then
          one catch-all method, handleEvent().</para>
        </section>

        <section>
          <title>GUI components</title>

          <itemizedlist>
            <listitem>
              <para>Buttons (java.awt.Button)</para>
            </listitem>

            <listitem>
              <para>Checkboxes (java.awt.Checkbox)</para>
            </listitem>

            <listitem>
              <para>Single-line text fields (java.awt.TextField)</para>
            </listitem>

            <listitem>
              <para>Larger text display and editing areas
              (java.awt.TextArea)</para>
            </listitem>

            <listitem>
              <para>Labels (java.awt.Label)</para>
            </listitem>

            <listitem>
              <para>Lists (java.awt.List)</para>
            </listitem>

            <listitem>
              <para>Pop-up lists of choices (java.awt.Choice)</para>
            </listitem>

            <listitem>
              <para>Sliders and scrollbars (java.awt.Scrollbar)</para>
            </listitem>

            <listitem>
              <para>Drawing areas (java.awt.Canvas)</para>
            </listitem>

            <listitem>
              <para>Menus (java.awt.Menu, java.awt.MenuItem,
              java.awt.CheckboxMenuItem)</para>
            </listitem>

            <listitem>
              <para>Containers (java.awt.Panel, java.awt.Window and its
              subclasses)</para>
            </listitem>
          </itemizedlist>
        </section>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/applet/overview/security.html">What
        applets can not do</ulink></title>

        <itemizedlist>
          <listitem>
            <para>An applet can't load libraries or define native
            methods.</para>
          </listitem>

          <listitem>
            <para>It can't ordinarily read or write files on the host that's
            executing it.</para>
          </listitem>

          <listitem>
            <para>It can't make network connections except to the host that it
            came from.</para>
          </listitem>

          <listitem>
            <para>It can't start any program on the host that's executing
            it.</para>
          </listitem>

          <listitem>
            <para>It can't read certain system properties. Windows that an
            applet brings up look different than windows that an application
            brings up.</para>
          </listitem>
        </itemizedlist>

        <para><ulink url="../audio/Applet2.asf"><inlinegraphic
        fileref="img/asf.gif" format="GIF" />Audio in
        Portuguese</ulink></para>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/applet/overview/security.html">What
        applets can do</ulink></title>

        <itemizedlist>
          <listitem>
            <para>Applets can make network connections to the host they came
            from.</para>
          </listitem>

          <listitem>
            <para>Applets running within a Web browser can easily cause HTML
            documents to be displayed.</para>
          </listitem>

          <listitem>
            <para>Applets can invoke public methods of other applets on the
            same page.</para>
          </listitem>

          <listitem>
            <para>Applets that are loaded from the local file system have none
            of the restrictions that applets loaded over the network
            do.</para>
          </listitem>

          <listitem>
            <para>Although most applets stop running once you leave their
            page, they don't have to.</para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/applet/overview/test.html">Adding
        an Applet to an HTML Page</ulink></title>

        <section>
          <title>The Simplest Possible &lt;APPLET&gt; Tag</title>

          <programlisting>&lt;APPLET CODE=AppletSubclass.class WIDTH=anInt HEIGHT=anInt&gt;
&lt;/APPLET&gt;</programlisting>
        </section>

        <section>
          <title>Specifying the Applet Directory with CODEBASE</title>

          <programlisting>&lt;APPLET CODE=AppletSubclass.class CODEBASE=aURL
        WIDTH=anInt HEIGHT=anInt&gt;
&lt;/APPLET&gt;
&lt;applet code=Simple.class codebase=example/ width=500 height=20&gt;
&lt;/applet&gt;
</programlisting>
        </section>

        <section>
          <title>Specifying Parameters with the &lt;PARAM&gt; Tag</title>

          <programlisting>&lt;APPLET CODE=AppletSubclass.class WIDTH=anInt HEIGHT=anInt&gt;
&lt;PARAM NAME=parameter1Name VALUE=aValue&gt;
&lt;PARAM NAME=parameter2Name VALUE=anotherValue&gt;
&lt;/APPLET&gt;

&lt;applet code=AppletButton.class codebase=example width=350 height=60&gt;
&lt;param name=windowType value=BorderWindow&gt;
&lt;param name=windowText value="BorderLayout"&gt;
&lt;param name=buttonText value="Click here to see a BorderLayout in action"&gt;
. . .
&lt;/applet&gt;</programlisting>
        </section>

        <section>
          <title>Specifying Text to be Displayed by Java-Deficient
          Browsers</title>

          <programlisting>&lt;applet code=AppletButton.class codebase=example width=350 height=60&gt;
&lt;param name=windowType value=BorderWindow&gt;
&lt;param name=windowText value="BorderLayout"&gt;
Your browser can't run 1.0 Java applets,
so here's a picture of the window the program brings up:&lt;/em&gt;
&lt;/applet&gt;</programlisting>

          <para><ulink url="../audio/Applet3.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>
    </section>

    <section id="applets_creating_an_interface">
      <title><ulink
      url="http://java.sun.com/docs/books/tutorial/applet/practical/ui.html">Creating
      an Interface</ulink></title>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/applet/practical/gui.html">Creating
        a GUI</ulink></title>

        <section>
          <title>An Applet extends the graphic class Panel</title>

          <para>It can contain other Components, just as any Panel can. As
          Panels (and thus Components), Applets participate in the AWT drawing
          and event hierarchy.</para>

          <figure>
            <title>Quote Applet</title>

            <mediaobject>
              <imageobject>
                <imagedata contentdepth="102px" contentwidth="502px"
                           fileref="img/Applets2.gif" format="GIF" />
              </imageobject>
            </mediaobject>
          </figure>

          <figure>
            <title>Window Applet</title>

            <mediaobject>
              <imageobject>
                <imagedata contentdepth="35px" contentwidth="466px"
                           fileref="img/Applets3.gif" format="GIF" />
              </imageobject>
            </mediaobject>
          </figure>
        </section>

        <section>
          <title><ulink
          url="http://java.sun.com/docs/books/tutorial/applet/appletsonly/sound.html">Playing
          sounds methods</ulink></title>

          <para>Applet methods:</para>

          <itemizedlist>
            <listitem>
              <para>play(URL), play(URL, String)</para>

              <para>Play the AudioClip corresponding to the specified
              URL.</para>
            </listitem>

            <listitem>
              <para>getAudioClip(URL), getAudioClip(URL, String)</para>

              <para>Return an object that implements the AudioClip
              interface.</para>
            </listitem>
          </itemizedlist>

          <para>The AudioClip interface:</para>

          <itemizedlist>
            <listitem>
              <para>loop()</para>

              <para>Starts playing the clip repeatedly.</para>
            </listitem>

            <listitem>
              <para>play()</para>

              <para>Plays the clip once.</para>
            </listitem>

            <listitem>
              <para>stop()</para>

              <para>Stops the clip. Works with both looping and one-time
              sounds.</para>
            </listitem>
          </itemizedlist>

          <para><ulink url="../audio/Applet4.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/applet/appletsonly/param.html">Applet
        Parameters</ulink></title>

        <section>
          <title>Code to support parameters</title>

          <programlisting>public String getParameter(String name)
. . .
String windowWidthString = getParameter("WINDOWWIDTH");
if (windowWidthString != null) {
    try {
         requestedWidth = Integer.parseInt(windowWidthString);
    } catch (NumberFormatException e) {
         //Use default width.
    }
}</programlisting>
        </section>

        <section>
          <title>Giving information about parameters</title>

          <programlisting>public String[][] getParameterInfo() {
       String[][] info = {
          // Parameter Name     Kind of Value   Description
          {"imagesource",     "URL",          "a directory"},
          {"startup",         "URL",          "displayed at startup"},
          {"background",      "URL",          "displayed as background"},
          {"startimage",      "int",          "start index"},
          {"endimage",        "int",          "end index"},
          {"namepattern",     "URL",          "used to generate indexed names"},
          {"pause",           "int",          "milliseconds"},
          {"pauses",          "ints",         "milliseconds"},
          {"repeat",          "boolean",      "repeat or not"},
          {"positions",       "coordinates",  "path"},
          {"soundsource",     "URL",          "audio directory"},
          {"soundtrack",      "URL",          "background music"},
          {"sounds",          "URLs",         "audio samples"},
       };
       return info;
}</programlisting>

          <para><ulink url="../audio/Applet5.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/applet/practical/properties.html">Reading
        System Properties</ulink></title>

        <para>Command to Read System Properties:</para>

        <programlisting>String s = System.getProperty("os.name");</programlisting>

        <para>System Properties that Applets Can Read:</para>

        <table>
          <title>Available System Properties</title>

          <tgroup cols="2">
            <colspec align="center" />

            <thead>
              <row>
                <entry align="center">Key</entry>

                <entry align="center">Meaning</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>"file.separator"</entry>

                <entry>File separator (e.g., "/")</entry>
              </row>

              <row>
                <entry>"java.class.version"</entry>

                <entry>Java class version number</entry>
              </row>

              <row>
                <entry>"java.vendor"</entry>

                <entry>Java vendor-specific string</entry>
              </row>

              <row>
                <entry>"java.vendor.url"</entry>

                <entry>Java vendor URL</entry>
              </row>

              <row>
                <entry>"java.version"</entry>

                <entry>Java version number</entry>
              </row>

              <row>
                <entry>"line.separator"</entry>

                <entry>Line separator</entry>
              </row>

              <row>
                <entry>"os.arch"</entry>

                <entry>Operating system architecture</entry>
              </row>

              <row>
                <entry>"os.name"</entry>

                <entry>Operating system name</entry>
              </row>

              <row>
                <entry>"path.separator"</entry>

                <entry>Path separator (e.g., ":")</entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <para>Forbidden System Properties:</para>

        <table>
          <title>Forbidden System Properties</title>

          <tgroup cols="2">
            <colspec align="center" />

            <thead>
              <row>
                <entry align="center">Key</entry>

                <entry align="center">Meaning</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>"java.class.path"</entry>

                <entry>Java classpath</entry>
              </row>

              <row>
                <entry>"java.home"</entry>

                <entry>Java installation directory</entry>
              </row>

              <row>
                <entry>"user.dir"</entry>

                <entry>User's current working directory</entry>
              </row>

              <row>
                <entry>"user.home"</entry>

                <entry>User home directory</entry>
              </row>

              <row>
                <entry>"user.name"</entry>

                <entry>User account name</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/applet/appletsonly/showStatus.html">Displaying
        Short Strings</ulink></title>

        <para>Print in the browser status line:</para>

        <programlisting>showStatus("MyApplet: Loading image file " + file);</programlisting>

        <para><ulink url="../audio/Applet6.asf"><inlinegraphic
        fileref="img/asf.gif" format="GIF" />Audio in
        Portuguese</ulink></para>
      </section>
    </section>

    <section id="applets_communication_with_other_programs">
      <title><ulink
      url="http://java.sun.com/docs/books/tutorial/applet/appletsonly/index.html">Communication
      with Other Programs</ulink></title>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/applet/appletsonly/iac.html">Sending
        Messages to Other Applets on the Same Page</ulink></title>

        <para>Define an applet name:</para>

        <programlisting>&lt;applet codebase=example/ code=Sender.class width=450 height=200
name="buddy"&gt;
. . .
&lt;/applet&gt;

&lt;applet codebase=example/ code=Receiver.class width=450 height=35&gt;
&lt;param name="name" value="old pal"&gt;
. . .
&lt;/applet&gt;</programlisting>

        <para>Get the applet by its name:</para>

        <programlisting>receiver = getAppletContext().getApplet("&lt;applet name&gt;");</programlisting>

        <para>Finding All the Applets on a Page:</para>

        <programlisting>Enumeration e = getAppletContext().getApplets();</programlisting>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/applet/appletsonly/browser.html">Communicating
        with the Browser</ulink></title>

        <para>An applet can ask the browser to show HTML documents:</para>

        <programlisting>public void showDocument(java.net.URL url)
public void showDocument(java.net.URL url, String targetWindow)</programlisting>

        <para>Target windows:</para>

        <itemizedlist>
          <listitem>
            <para>"_blank"</para>

            <para>Display the document in a new, nameless window.</para>
          </listitem>

          <listitem>
            <para>"windowName"</para>

            <para>Display the document in a window named windowName. This
            window is created if necessary.</para>
          </listitem>

          <listitem>
            <para>"_self"</para>

            <para>Display the document in the window and frame that contain
            the applet.</para>
          </listitem>

          <listitem>
            <para>"_parent"</para>

            <para>Display the document in the applet's window but in the
            parent frame of the applet.</para>
          </listitem>

          <listitem>
            <para>"_top"</para>

            <para>Display the document in the applet's window but in the
            top-level frame.</para>
          </listitem>
        </itemizedlist>

        <para><ulink url="../audio/Applet7.asf"><inlinegraphic
        fileref="img/asf.gif" format="GIF" />Audio in
        Portuguese</ulink></para>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/applet/practical/server.html">Working
        with a Server-Side Application</ulink></title>

        <para>Applets can use networking features just as any Java program
        can, with the restriction that all communication must be with the host
        that delivered the applet to its current host.</para>

        <para>To find from what host an applet came from:</para>

        <programlisting>URL hostURL = getCodeBase();             // Gets the host URL
String host = getCodeBase().getHost();  // Gets the host name
</programlisting>

        <para>Using a Server to Work Around Security Restrictions:</para>

        <figure>
          <title>Applet Viewer Security Restrictions</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="423px" contentwidth="573px"
                         fileref="img/Applets4.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <figure>
          <title>Applet Viewers Window</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="291px" contentwidth="569px"
                         fileref="img/Applets5.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <para><ulink url="../audio/Applet8.asf"><inlinegraphic
        fileref="img/asf.gif" format="GIF" />Audio in
        Portuguese</ulink></para>
      </section>
    </section>

    <section id="applets_capabilities_and_restrictions">
      <title><ulink
      url="http://java.sun.com/docs/books/tutorial/applet/practical/security.html">Capabilities
      and Restrictions</ulink></title>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/essential/system/securityIntro.html">Security
        Restrictions</ulink></title>

        <para>Applets are restricted by the Security Manager of the browser
        that is running them.</para>

        <section>
          <title>Common security restrictions:</title>

          <itemizedlist>
            <listitem>
              <para>Applets can't load libraries or define native
              methods.</para>
            </listitem>

            <listitem>
              <para>An applet can't ordinarily read or write files on the host
              that's executing it.</para>
            </listitem>

            <listitem>
              <para>An applet can't make network connections except to the
              host that it came from.</para>
            </listitem>

            <listitem>
              <para>An applet can't start any program on the host that's
              executing it.</para>
            </listitem>

            <listitem>
              <para>An applet can't read every system property.</para>
            </listitem>

            <listitem>
              <para>Windows that an applet brings up look different than
              windows that an application brings up:</para>

              <figure>
                <title>Applet Look</title>

                <mediaobject>
                  <imageobject>
                    <imagedata contentdepth="153px" contentwidth="500px"
                               fileref="img/Applets6.gif" format="GIF" />
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
          </itemizedlist>
        </section>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/applet/practical/security.html">Applets
        Capabilities</ulink></title>

        <section>
          <title>Capabilities that Applications Don't Have</title>

          <itemizedlist>
            <listitem>
              <para>Applets can play sounds.</para>
            </listitem>

            <listitem>
              <para>Applets running within a Web browser can easily cause HTML
              documents to be displayed.</para>
            </listitem>

            <listitem>
              <para>Applets can invoke public methods of other applets on the
              same page.</para>
            </listitem>
          </itemizedlist>
        </section>

        <section>
          <title>More Applet Capabilities</title>

          <itemizedlist>
            <listitem>
              <para>Applets that are loaded from the local file system have
              none of the restrictions that applets loaded over the network
              do.</para>
            </listitem>

            <listitem>
              <para>Although most applets stop running once you leave their
              page, they don't have to.</para>
            </listitem>
          </itemizedlist>

          <para><ulink url="../audio/Applet9.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>
    </section>
  </chapter>

  <chapter id="extra_reading_distributed_applications">
    <title>Extra Reading: Distributed Applications</title>

    <section id="extra_reading_distributed_applications_security_manager">
      <title><ulink
      url="/library/books/tutorial1.02/networking/security/index.html">Security
      Manager</ulink></title>

      <section>
        <title><ulink
        url="/library/books/tutorial1.02/networking/security/intro.html">Introducing
        the Security Manager</ulink></title>

        <section>
          <title>Definition</title>

          <para>The security manager is an application-wide object that
          determines whether potentially threatening operations should be
          allowed.</para>

          <para>The classes in the Java packages cooperate with the security
          manager by asking the application's security manager for permission
          to perform certain operations.</para>
        </section>

        <section>
          <title>Default</title>

          <para>An application does not have a security manager. It allows all
          operations that are subject to security restrictions.</para>

          <note>
            <para>The existing browsers and applet viewers do create their own
            security manager when starting up.</para>
          </note>
        </section>
      </section>

      <section>
        <title><ulink
        url="/library/books/tutorial1.02/networking/security/writingSMgr.html">Writing
        a Security Manager</ulink></title>

        <section>
          <title>Why to write one?</title>

          <para>To impose a stricter policy security policy.</para>
        </section>

        <section>
          <title>The example's policy:</title>

          <para>The policy implemented by our example prompts the user for a
          password when the application attempts to open a file for reading or
          for writing.</para>

          <para><ulink url="../audio/Servers16.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>

        <section>
          <title>The code</title>

          <programlisting>class PasswordSecurityManager extends SecurityManager {
     PasswordSecurityManager(String password) {
        super();
        this.password = password;
     }
private boolean accessOK() {
    . . . 
       Asks a password from the user using stdin
    . . .
} 
public void checkRead(FileDescriptor filedescriptor) {
    if (!accessOK())
        throw new SecurityException("Not a Chance!");
}
public void checkRead(String filename) {
    if (!accessOK())
        throw new SecurityException("No Way!");
}
public void checkRead(String filename, Object executionContext) {
    if (!accessOK())
        throw new SecurityException("Forget It!");
}
public void checkWrite(FileDescriptor filedescriptor) {
    if (!accessOK())
        throw new SecurityException("Not!");
}
public void checkWrite(String filename) {
    if (!accessOK())
        throw new SecurityException("Not Even!");
}

}</programlisting>
        </section>
      </section>

      <section>
        <title><ulink
        url="/library/books/tutorial1.02/networking/security/installSMgr.html">Installing
        Your Security Manager</ulink></title>

        <programlisting>try {
        System.setSecurityManager(new PasswordSecurityManager("Booga Booga"));
} catch (SecurityException se) {
        System.out.println("SecurityManager already set!");
}</programlisting>

        <note>
          <para>The security manager for an application can be set only once.
          Typically, a browser sets its security manager during its startup
          procedure.</para>
        </note>

        <para><ulink url="../audio/Servers17.asf"><inlinegraphic
        fileref="img/asf.gif" format="GIF" />Audio in
        Portuguese</ulink></para>
      </section>

      <section>
        <title><ulink
        url="/library/books/tutorial1.02/networking/security/more.html">Deciding
        What SecurityManager Methods to Override</ulink></title>

        <section>
          <title>Default Method's implementation</title>

          <programlisting>public void checkXXX(. . .) throws SecurityException{
       throw new SecurityException();
}</programlisting>

          <para>You may have to overload many SecurityManager methods to get
          the behavior you wish.</para>
        </section>

        <section>
          <title>SecurityManager methods</title>

          <table>
            <title>SecurityManager Methods</title>

            <tgroup cols="2">
              <colspec align="center" />

              <thead>
                <row>
                  <entry align="center">Operations On</entry>

                  <entry align="center">Approved By</entry>
                </row>
              </thead>

              <tbody>
                <row>
                  <entry>sockets</entry>

                  <entry>checkAccept(String host, int port)
                  checkConnect(String host, int port) checkConnect(String
                  host, int port, Object Context) checkListen(int
                  port)</entry>
                </row>

                <row>
                  <entry>threads</entry>

                  <entry>checkAccess(Thread thread) checkAccess(ThreadGroup
                  threadgroup)</entry>
                </row>

                <row>
                  <entry>class loader</entry>

                  <entry>checkCreateClassLoader()</entry>
                </row>

                <row>
                  <entry>file system</entry>

                  <entry>checkDelete(String filename) checkLink(String
                  library) checkRead(FileDescriptor filedescriptor)
                  checkRead(String filename) checkRead(String filename, Object
                  executionContext) checkWrite(FileDescriptor filedescriptor)
                  checkWrite(String filename)</entry>
                </row>

                <row>
                  <entry>system commands</entry>

                  <entry>checkExec(String command)</entry>
                </row>

                <row>
                  <entry>interpreter</entry>

                  <entry>checkExit(int status)</entry>
                </row>

                <row>
                  <entry>package</entry>

                  <entry>checkPackageAccess(String packageName)
                  checkPackageDefinition(String packageName)</entry>
                </row>

                <row>
                  <entry>properties</entry>

                  <entry>checkPropertiesAccess() checkPropertyAccess(String
                  key) checkPropertyAccess(String key, String def)</entry>
                </row>

                <row>
                  <entry>networking</entry>

                  <entry>checkSetFactory()</entry>
                </row>

                <row>
                  <entry>windows</entry>

                  <entry>checkTopLevelWindow(Object window)</entry>
                </row>
              </tbody>
            </tgroup>
          </table>

          <para><ulink url="../audio/Servers18.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>
    </section>

    <section id="extra_reading_distributed_applications_applications">
      <title>Applications</title>

      <section>
        <title>Traditional Client/Server applications</title>

        <section>
          <title>Characteristics</title>

          <itemizedlist>
            <listitem>
              <para>Just one server and many clients.</para>
            </listitem>

            <listitem>
              <para>Fixed addresses servers.</para>
            </listitem>

            <listitem>
              <para>Each kind of server has its own communication
              protocol.</para>
            </listitem>
          </itemizedlist>
        </section>

        <section>
          <title>Examples</title>

          <para>File Servers: NFS</para>

          <para>File Transfer Servers: FTP</para>

          <para>Remote login Servers: Telnet</para>
        </section>
      </section>

      <section>
        <title>New Client/Server applications</title>

        <section>
          <title>Characteristics</title>

          <itemizedlist>
            <listitem>
              <para>Many servers and many clients</para>
            </listitem>

            <listitem>
              <para>Location transparency.</para>
            </listitem>

            <listitem>
              <para>Unified protocols for groups of applications.</para>
            </listitem>

            <listitem>
              <para>Secure access.</para>
            </listitem>

            <listitem>
              <para>Administrative tools</para>
            </listitem>
          </itemizedlist>
        </section>

        <section>
          <title>Examples</title>

          <para>RDB Servers: Sybase</para>

          <para>Groupware: World Wide Web.</para>

          <para>Object Oriented: CORBA.</para>

          <para><ulink url="../audio/Servers19.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>

      <section>
        <title>The Client/Server Infrastructure</title>

        <section>
          <title>Graphic View</title>

          <figure>
            <title>Middleware View</title>

            <mediaobject>
              <imageobject>
                <imagedata contentdepth="242px" contentwidth="536px"
                           fileref="img/Servers7.gif" format="GIF" />
              </imageobject>
            </mediaobject>
          </figure>
        </section>

        <section>
          <title>Client</title>

          <itemizedlist>
            <listitem>
              <para>GUI - Graphic User Interface</para>
            </listitem>

            <listitem>
              <para>OOUI - Object Oriented User Interface</para>
            </listitem>

            <listitem>
              <para>DSM - Distributed System Management (Client side)</para>
            </listitem>
          </itemizedlist>
        </section>

        <section>
          <title>Middleware</title>

          <itemizedlist>
            <listitem>
              <para>Service Specific</para>

              <para>SQL middleware</para>

              <para>ODBC (Open Database Connectivity)</para>

              <para>ORB (Object Request Broker)</para>
            </listitem>

            <listitem>
              <para>NOS - Network Operating System</para>

              <para>RPC (Remote Procedure Calls)</para>

              <para>Security</para>

              <para>Distributed File System</para>
            </listitem>

            <listitem>
              <para>Transport Stack</para>

              <para>TCP/IP</para>

              <para>NetBIOS</para>

              <para>IPX/SPX</para>
            </listitem>

            <listitem>
              <para>DSM - Distributed System Management (Middleware)</para>
            </listitem>
          </itemizedlist>

          <para><ulink url="../audio/Servers20.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>

        <section>
          <title>Server</title>

          <itemizedlist>
            <listitem>
              <para>DBMS</para>
            </listitem>

            <listitem>
              <para>TP (Transaction Processing) Monitors</para>
            </listitem>

            <listitem>
              <para>Groupware</para>
            </listitem>

            <listitem>
              <para>Objects</para>
            </listitem>

            <listitem>
              <para>DSM - Distributed System Management (Server side)</para>
            </listitem>
          </itemizedlist>
        </section>
      </section>

      <section>
        <title>Client/Server Application Models</title>

        <section>
          <title>Requirements</title>

          <itemizedlist>
            <listitem>
              <para>Rich transaction processing</para>

              <itemizedlist>
                <listitem>
                  <para>Nested transactions that can span servers</para>
                </listitem>

                <listitem>
                  <para>Transactions that execute over long periods of
                  time</para>
                </listitem>

                <listitem>
                  <para>Secure transactions.</para>
                </listitem>
              </itemizedlist>
            </listitem>

            <listitem>
              <para>Roaming agents</para>

              <itemizedlist>
                <listitem>
                  <para>Personal and Dealer agents.</para>
                </listitem>

                <listitem>
                  <para>Sniffer agents (to search for information).</para>
                </listitem>
              </itemizedlist>
            </listitem>

            <listitem>
              <para>Rich data management</para>

              <itemizedlist>
                <listitem>
                  <para>Create, store, view and edit compound documents from
                  anywhere on the network.</para>
                </listitem>

                <listitem>
                  <para>Compound document technology (like OLE or
                  OpenDoc).</para>
                </listitem>
              </itemizedlist>
            </listitem>
          </itemizedlist>
        </section>

        <section>
          <title>The models</title>

          <itemizedlist>
            <listitem>
              <para>SQL databases</para>
            </listitem>

            <listitem>
              <para>TP Monitors</para>
            </listitem>

            <listitem>
              <para>Groupware</para>
            </listitem>

            <listitem>
              <para>Distributed Objects</para>
            </listitem>
          </itemizedlist>

          <para><ulink url="../audio/Servers21.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>
    </section>

    <section id="extra_reading_distributed_applications_sql_databases">
      <title>SQL Databases</title>

      <section>
        <title>SQL</title>

        <section>
          <title>Definition</title>

          <para>Structured Query Language (SQL) is a standardized language for
          defining and manipulating data in a relational database.</para>
        </section>

        <section>
          <title>The relational model of a database</title>

          <itemizedlist>
            <listitem>
              <para>Set of tables</para>
            </listitem>

            <listitem>
              <para>Relationships are represented by values in tables.</para>
            </listitem>

            <listitem>
              <para>Data is retrieved by specifying a result table that can be
              derived from one or more tables.</para>
            </listitem>
          </itemizedlist>
        </section>
      </section>

      <section>
        <title>Stored Procedures</title>

        <section>
          <title>Definition</title>

          <para>A stored procedure is a named collection of SQL statements and
          procedure logic that is compiled, verified, and stored in a server
          database.</para>
        </section>

        <section>
          <title>Applications</title>

          <itemizedlist>
            <listitem>
              <para>Enforce data integrity</para>
            </listitem>

            <listitem>
              <para>Perform system maintenance</para>
            </listitem>

            <listitem>
              <para>Implement the server side of an application's
              logic.</para>
            </listitem>
          </itemizedlist>
        </section>
      </section>

      <section>
        <title>Main points</title>

        <section>
          <title>Good points</title>

          <itemizedlist>
            <listitem>
              <para>SQL dominates the client/server market today.</para>
            </listitem>

            <listitem>
              <para>It is easy to create applications in
              single-vendor/single-server environments.</para>
            </listitem>

            <listitem>
              <para>There is a wealth GUI tools to create SQL
              applications.</para>
            </listitem>

            <listitem>
              <para>SQL is familiar to millions of programmers and
              users.</para>
            </listitem>
          </itemizedlist>
        </section>

        <section>
          <title>Bad Points</title>

          <itemizedlist>
            <listitem>
              <para>SQL standards lag vendor implementations.</para>
            </listitem>

            <listitem>
              <para>Incompatible vendors implementations.</para>
            </listitem>

            <listitem>
              <para>Difficult in mount heterogeneous database
              environments.</para>
            </listitem>
          </itemizedlist>

          <para><ulink url="../audio/Servers22.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>
    </section>

    <section id="extra_reading_distributed_applications_tp_monitors">
      <title>TP Monitors</title>

      <section>
        <title>Transaction Processing Monitors</title>

        <section>
          <title>Definition</title>

          <para>TP monitors manage processes and coordinate programs by
          breaking complex applications into pieces of code called
          transactions.</para>
        </section>

        <section>
          <title>Monitoring</title>

          <para>A transaction can be managed from its point of origin across
          one or more servers and back to the originating client.</para>
        </section>

        <section>
          <title>Transaction model defines</title>

          <itemizedlist>
            <listitem>
              <para>Transaction's start.</para>
            </listitem>

            <listitem>
              <para>Transaction's end.</para>
            </listitem>

            <listitem>
              <para>Appropriate units of recovery (in case of failure).</para>
            </listitem>
          </itemizedlist>
        </section>
      </section>

      <section>
        <title>Large systems</title>

        <section>
          <title>TPs in systems with large number of clients</title>

          <itemizedlist>
            <listitem>
              <para>Manage Transactions.</para>
            </listitem>

            <listitem>
              <para>Route Transactions across systems.</para>
            </listitem>

            <listitem>
              <para>load-balance execution</para>
            </listitem>

            <listitem>
              <para>Restart then after failure.</para>
            </listitem>
          </itemizedlist>

          <para><ulink url="../audio/Servers23.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>

      <section>
        <title>Nested Transactions</title>

        <figure>
          <title>Nested Transactions</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="344px" contentwidth="652px"
                         fileref="img/Servers8.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <section>
          <title>Main points</title>

          <para>Good points:</para>

          <itemizedlist>
            <listitem>
              <para>TP monitors help the operating system and servers to deal
              with large numbers of clients.</para>
            </listitem>

            <listitem>
              <para>TP monitors can cooperate with other TP monitors in
              federated arrangements.</para>
            </listitem>

            <listitem>
              <para>TP monitors can manage process failures across
              systems.</para>
            </listitem>
          </itemizedlist>

          <para>Bad points:</para>

          <itemizedlist>
            <listitem>
              <para>TP monitors are overkill in single-server, single-vendor
              applications.</para>
            </listitem>

            <listitem>
              <para>TP monitors add unnecessary complexity in small
              systems.</para>
            </listitem>
          </itemizedlist>

          <para><ulink url="../audio/Servers24.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>

      <section id="extra_reading_distributed_applications_groupware">
        <title>Groupware</title>

        <bridgehead>Definition:</bridgehead>

        <para>Technologies to support collaborative work and information
        dissemination.</para>

        <bridgehead>Foundation technologies:</bridgehead>

        <itemizedlist spacing="compact">
          <listitem>
            <para>Multimedia documents</para>
          </listitem>

          <listitem>
            <para>Word Wide Web</para>
          </listitem>

          <listitem>
            <para>E-mail</para>
          </listitem>

          <listitem>
            <para>Conferencing</para>
          </listitem>

          <listitem>
            <para>Lotus Notes</para>
          </listitem>
        </itemizedlist>

        <bridgehead>Work flow model:</bridgehead>

        <para>Data passes from one program to the next in client/server
        environment, simulating real-world collaborative activity.</para>

        <bridgehead>Goals:</bridgehead>

        <itemizedlist spacing="compact">
          <listitem>
            <para>To bring the information to the people and programs who can
            act on it.</para>
          </listitem>

          <listitem>
            <para>To coordinate existing software processes.</para>
          </listitem>

          <listitem>
            <para>To track processes to make sure the work gets done.</para>
          </listitem>
        </itemizedlist>

        <bridgehead>Example Lotus-Notes:</bridgehead>

        <itemizedlist spacing="compact">
          <listitem>
            <para>A reliable, scalable and secure distributed document
            database. The database-centric model gives users the ability to
            assemble, share, and manage the rich variety of documents vital to
            conducting business.</para>
          </listitem>

          <listitem>
            <para>An integrated messaging system. Groupware users must be able
            to take advantage of a messaging infrastructure to send and
            receive electronic mail and move documents through a workflow
            process.</para>
          </listitem>

          <listitem>
            <para>A rich application development environment. Developers must
            be able to rapidly build portable and scalable strategic
            applications which span document-oriented and structured database
            information</para>
          </listitem>
        </itemizedlist>

        <para><ulink url="../audio/Servers25.asf"><inlinegraphic
        fileref="img/asf.gif" format="GIF" />Audio in
        Portuguese</ulink></para>
      </section>

      <section id="extra_reading_distributed_applications_distributed_objects">
        <title>Distributed Objects</title>

        <bridgehead>Definition:</bridgehead>

        <para>Distributed objects are the middleware that establishes
        client-server relationships between objects. A client can
        transparently invoke a method on a server object, which can be on the
        same machine or across a network.</para>

        <section>
          <title>ORB - Object Request Broker</title>

          <bridgehead>Function:</bridgehead>

          <para>The ORB intercepts requests to objects, finds an object that
          can implement this request, passes it the parameters, invokes its
          method, and returns the results of the request.</para>

          <bridgehead>Advantages:</bridgehead>

          <itemizedlist>
            <listitem>
              <para>The client does not have to be aware of where the object
              is located, its programming language, its operating system, or
              any other system aspects that are not part of an object's
              interface.</para>
            </listitem>

            <listitem>
              <para>The ORB provides interoperability between applications on
              different machines in heterogeneous distributed environments and
              seamlessly interconnects multiple object systems</para>
            </listitem>
          </itemizedlist>

          <bridgehead>Request sent through a ORB:</bridgehead>

          <figure>
            <title>Request Through ORB</title>

            <mediaobject>
              <imageobject>
                <imagedata contentdepth="221px" contentwidth="427px"
                           fileref="img/Servers9.gif" format="GIF" />
              </imageobject>
            </mediaobject>
          </figure>

          <para><ulink url="../audio/Servers26.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>

        <section>
          <title>CORBA</title>

          <bridgehead>Definition:</bridgehead>

          <para>The Common Object Request Broker Architecture (CORBA) is a
          standard ORB architecture defined by the Object Management Group (An
          international consortium to develop ORB technology).</para>
        </section>

        <section>
          <title>ORG Interfaces</title>

          <bridgehead>Structure of ORB Interfaces:</bridgehead>

          <figure>
            <title>ORB Interfaces</title>

            <mediaobject>
              <imageobject>
                <imagedata contentdepth="317px" contentwidth="467px"
                           fileref="img/Servers10.gif" format="GIF" />
              </imageobject>
            </mediaobject>
          </figure>

          <bridgehead>The client side:</bridgehead>

          <para>OMG IDL stub</para>

          <blockquote>
            <para>Stubs generated from an IDL specification depending on the
            interface of the target object. They make calls on the rest of the
            ORB .</para>
          </blockquote>

          <para>Dynamic Invocation interface</para>

          <blockquote>
            <para>Interface independent of the target object's interface. It
            allows the dynamic construction of object invocations.</para>
          </blockquote>

          <para>ORB Interface</para>

          <blockquote>
            <para>The interface that goes directly to the ORB which is the
            same for all ORBs and does not depend on the object's interface or
            object adapter.</para>
          </blockquote>

          <para><ulink url="../audio/Servers27.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>

          <bridgehead>The server side (or the Object
          Implementation):</bridgehead>

          <para>IDL Generated Skeleton</para>

          <blockquote>
            <para>A skeleton generated from an IDL specification that is
            specific to a particular language mapping.</para>
          </blockquote>

          <para>Dynamic Skeleton Interface</para>

          <blockquote>
            <para>A skeleton interface is available which allows dynamic
            handling of object invocations analogous to the client side's
            Dynamic Invocation Interface.</para>
          </blockquote>

          <para>Object Adapters</para>

          <blockquote>
            <para>Adapters are the primary means for an object implementation
            to access ORB services such as object reference generation.</para>
          </blockquote>

          <para>ORB Interface</para>

          <blockquote>
            <para>Same as the client's implementation to access ORB services
            such as object reference generation.</para>
          </blockquote>

          <bridgehead>The Interface Definition Language (OMG IDL)</bridgehead>

          <blockquote>
            <para>IDL defines the types of objects by specifying their
            interfaces. An interface consists of a set of named operations and
            the parameters to those operations. Implementation to access ORB
            services such as object reference generation.</para>
          </blockquote>

          <bridgehead>Interoperation with other object systems:</bridgehead>

          <figure>
            <title>Interoperation With Other Systems</title>

            <mediaobject>
              <imageobject>
                <imagedata contentdepth="193px" contentwidth="427px"
                           fileref="img/Servers11.gif" format="GIF" />
              </imageobject>
            </mediaobject>
          </figure>

          <para>The interoperation between system is handed by the ORB of each
          system.</para>

          <para><ulink url="../audio/Servers28.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>
    </section>
  </chapter>

  <chapter id="extra_reading_awt_1.0">
    <title>Extra Reading: AWT 1.0</title>

    <section id="extra_reading_awt_1.0_awt_1.0_components">
      <title><ulink
      url="/library/books/tutorial1.02/ui/components/index.html">AWT 1.0
      Components</ulink></title>

      <section>
        <title><ulink
        url="/library/books/tutorial1.02/ui/components/using.html">AWT
        hierarchy</ulink></title>

        <para>AWT Component</para>

        <figure>
          <title>AWT 1.0 Hierarchy</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="265px" contentwidth="560px"
                         fileref="img/GUI5.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <para>AWT MenuComponent</para>

        <figure>
          <title>AWT 1.0 MenuComponent Hierarchy</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="106px" contentwidth="553px"
                         fileref="img/GUI5.1.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <note>
          <para>Because of cross-platform restrictions, menu-related
          components aren't full-blown Components</para>
        </note>

        <para><ulink url="../audio/Gui7.asf"><inlinegraphic
        fileref="img/asf.gif" format="GIF" />Audio in
        Portuguese</ulink></para>
      </section>

      <section>
        <title><ulink
        url="/library/books/tutorial1.02/ui/components/generalRules.html">Rules
        for Using Components</ulink></title>

        <section>
          <title>How to Add a Component to a Container:</title>

          <para>For any Component object except a Window to display itself
          onscreen, you must first add it to a Container object.</para>

          <para>The Container class defines three methods for adding
          components:</para>

          <itemizedlist>
            <listitem>
              <para>add(Component comp) method simply requires that you
              specify the component to add.</para>
            </listitem>

            <listitem>
              <para>add(Component comp, int ind) method lets you add an
              argument specifying the integer position at which the component
              should be added.</para>
            </listitem>

            <listitem>
              <para>add(String pos, Component comp) method has as first
              argument a layout manager-dependent string that specifies the
              component's position to the layout manager.</para>
            </listitem>
          </itemizedlist>

          <note>
            <para>Adding a component to a container removes the component from
            the container it used to be in (if any).</para>
          </note>
        </section>

        <section>
          <title>What the Component Class Provides</title>

          <itemizedlist>
            <listitem>
              <para>Basic drawing support.</para>

              <para>Component provides the paint(), update(), and repaint()
              methods, which enable Components to draw themselves
              onscreen.</para>
            </listitem>

            <listitem>
              <para>Event handling</para>

              <para>Component defines the general-purpose handleEvent() method
              and a group of methods such as action() that handle specific
              event types.</para>
            </listitem>

            <listitem>
              <para>Appearance control: font</para>

              <para>Component provides methods to get and set the current
              font, and to get information about the current font.</para>
            </listitem>

            <listitem>
              <para>Appearance control: color</para>

              <para>Component provides methods to get and set the foreground
              and background colors.</para>
            </listitem>

            <listitem>
              <para>Image handling</para>

              <para>Component provides the basis for displaying images.
              Canvases and most Containers can display images.</para>
            </listitem>

            <listitem>
              <para>Onscreen size and position control</para>

              <para>Component provides methods that get or set (subject to
              layout manager oversight) the component's current size and
              location.</para>
            </listitem>
          </itemizedlist>

          <para><ulink url="../audio/Gui8.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>

      <section>
        <title><ulink
        url="/library/books/tutorial1.02/ui/components/button.html">Buttons</ulink></title>

        <para>The Button class provides a default button implementation. A
        button is a simple control that generates an action event when the
        user clicks it.</para>

        <figure>
          <title>AWT 1.0 Buttons</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="33px" contentwidth="396px"
                         fileref="img/GUI6.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <section>
          <title>Code Example</title>

          <programlisting>b1 = new Button();
b1.setLabel("Disable middle button");
b2 = new Button("Middle button");
b3 = new Button("Enable middle button");
b3.disable();
. . .
public boolean action(Event e, Object arg) {
    Object target = e.target;
    if (target == b1) { //They clicked "Disable middle button"
        b2.disable();
        b1.disable();
        b3.enable();
        return true;
    }
    if (target == b3) { //They clicked "Enable middle button"
        b2.enable();
        b1.enable();
        b3.disable();
        return true;
    }
    return false;
}</programlisting>
        </section>
      </section>

      <section>
        <title><ulink
        url="/library/books/tutorial1.02/ui/components/label.html">Labels</ulink></title>

        <para>The Label class provides an easy way of putting unselectable
        text in your program's GUI. Labels are aligned to the left of their
        drawing area, by default.</para>

        <figure>
          <title>AWT 1.0 Labels</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="89px" contentwidth="160px"
                         fileref="img/GUI11.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <section>
          <title>Code Example</title>

          <programlisting>Label label1 = new Label();
label1.setText("Left");
Label label2 = new Label("Center");
label2.setAlignment(Label.CENTER);
Label label3 = new Label("Right", Label.RIGHT);</programlisting>

          <para><ulink url="../audio/Gui9.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>

      <section>
        <title><ulink
        url="/library/books/tutorial1.02/ui/components/canvas.html">Canvases</ulink></title>

        <para>The Canvas class exists to be subclassed. It does nothing on its
        own; it merely provides a way for you to implement a custom
        Component</para>

        <figure>
          <title>AWT 1.0 Canvas</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="107px" contentwidth="161px"
                         fileref="img/GUI7.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <section>
          <title>Code Example</title>

          <programlisting>class ImageCanvas extends Canvas {
      Container pappy;
      Image image;
      boolean trueSizeKnown = false;
              
      public ImageCanvas(Image image, Container parent, int w, int h) {
          if (image == null) {
              System.err.println("Canvas got invalid image object!");
              return;
          }
          this.image = image;
          pappy = parent;
          minSize = new Dimension(w,h);
      }

      public Dimension preferredSize() { return minimumSize();}

      public synchronized Dimension minimumSize() { return minSize;}

      public void paint (Graphics g) {
          if (image != null) {
              if (!trueSizeKnown) {
                  int width= image.getWidth(this);
                  int height= image.getHeight(this)
                  if ((imageWidth &gt; 0) &amp;&amp; (imageHeight &gt; 0)) {
                      trueSizeKnown = true; 
                      //    Component-initiated resizing.
                      minSize = new Dimension(width,height);
                      resize(width, height);
                      pappy.layout();
                      pappy.repaint();
                  }
              }
              g.drawRect(0, 0, minSize.width - 1, minSize.height - 1);
              g.drawImage(image, 0, 0, this);
          }
      }
}
</programlisting>

          <para><ulink url="../audio/Gui10.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>

      <section>
        <title><ulink
        url="/library/books/tutorial1.02/ui/components/checkbox.html">Checkboxes</ulink></title>

        <para>Checkboxes are two-state buttons that can be either "on" or
        "off". When the user clicks a checkbox, the checkbox state changes and
        it generates an action event.</para>

        <figure>
          <title>AWT 1.0 Checkbox</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="80px" contentwidth="270px"
                         fileref="img/GUI8.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <section>
          <title>Code Example</title>

          <programlisting>class ImageCanvas extends Canvas {
      Container pappy;
      Image image;
      boolean trueSizeKnown = false;
      Dimension minSize;

      public ImageCanvas(Image image, Container parent, int w, int h) {
             if (image == null) {
                 System.err.println("Canvas got invalid image object!");
                 return;
             }
             this.image = image;
             pappy = parent;
             minSize = new Dimension(w,h);
      }

      public Dimension preferredSize() { return minimumSize();}

      public synchronized Dimension minimumSize() { return minSize;}

      public void paint (Graphics g) {
             if (image != null) {
                 if (!trueSizeKnown) {
                     int width= image.getWidth(this);
                     int height= image.getHeight(this)
                     if ((imageWidth &gt; 0) &amp;&amp; (imageHeight &gt; 0)) {
                         trueSizeKnown = true; 
                         //Component-initiated resizing.
                         minSize = new Dimension(width,height);
                         resize(width, height);
                         pappy.layout();
                         pappy.repaint();
                     }
                 }
                 g.drawRect(0, 0, minSize.width - 1, minSize.height - 1);
                 g.drawImage(image, 0, 0, this);
            }
     }
}</programlisting>
        </section>
      </section>

      <section>
        <title><ulink
        url="/library/books/tutorial1.02/ui/components/choice.html">Choices</ulink></title>

        <para>The Choice class provides a menu-like list of choices, accessed
        by a distinctive button. The user presses the button to bring up a
        "menu", and then chooses one of the items.</para>

        <figure>
          <title>AWT 1.0 Choice</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="122px" contentwidth="252px"
                         fileref="img/GUI9.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <section>
          <title>Code Example</title>

          <programlisting>choice = new Choice();
choice.addItem("ichi");
choice.addItem("ni");
choice.addItem("san");
choice.addItem("yon");

public boolean action(Event e, Object arg) {
       if (e.target instanceof Choice) {
          setLabelText(choice.getSelectedIndex(), (String)arg);
          return true;
       }
       return false;
}</programlisting>

          <para><ulink url="../audio/Gui11.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>

      <section>
        <title><ulink
        url="/library/books/tutorial1.02/ui/components/lists.html">Lists</ulink></title>

        <para>The List class provides a scrollable area containing selectable
        text items.</para>

        <figure>
          <title>AWT 1.0 List</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="158px" contentwidth="511px"
                         fileref="img/GUI12.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <section>
          <title>Code Example</title>

          <programlisting>//Build lists, which allows multiple selections.
spanish = new List(4, true); //prefer 4 items visible
spanish.addItem("uno");
. . .
spanish.addItem("siete");

italian = new List(); //Defaults to none visible, only one selectable
italian.addItem("uno");
. . .
italian.addItem("sette");
. . .
public boolean action(Event e, Object arg) {
       if (e.target instanceof List) {
           String language = (e.target == spanish) ? "Spanish" : "Italian";
           output.appendText("Action event occurred on \""
                             + (String)arg  + "\" in " + language + ".\n");
       }
       return true;
}

public boolean handleEvent(Event e) {
       if (e.target instanceof List) {
           List list = (List)(e.target);
           String language = (list == spanish) ? "Spanish" : "Italian";
           switch (e.id) {
                  case Event.LIST_SELECT:
                      int sIndex = ((Integer)e.arg).intValue();
                      output.appendText("Select event" + sIndex + " (\""
                             + list.getItem(sIndex)  + "\") in " + language + ".\n");
                      break;
                  case Event.LIST_DESELECT:
                      int dIndex = ((Integer)e.arg).intValue();
                      output.appendText("Deselect event + dIndex + " (\""
                             + list.getItem(dIndex)  + "\") in " + language + ".\n");
           }
      }
      return super.handleEvent(e);
}</programlisting>

          <para><ulink url="../audio/Gui12.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>

      <section>
        <title><ulink
        url="/library/books/tutorial1.02/ui/components/scrollbar.html">ScrollPanes</ulink></title>

        <para>A scrollbar can act as a slider that the user manipulates to set
        a value.</para>

        <para>Scrollbars can help you display part of a region that's too
        large for the available display area.</para>

        <figure>
          <title>AWT 1.0 ScrollPane</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="127px" contentwidth="326px"
                         fileref="img/GUI14.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <section>
          <title>Scrollbar parameters</title>

          <itemizedlist>
            <listitem>
              <para>int orientation</para>

              <para>Scrollbar.HORIZONTAL or Scrollbar.VERTICAL.</para>
            </listitem>

            <listitem>
              <para>int value</para>

              <para>The initial value of the position of the scrollbar.</para>
            </listitem>

            <listitem>
              <para>int visible</para>

              <para>How many pixels a click in the scrollbar (but not on the
              knob) causes the display area to shift. Setting this value after
              the scrollbar is visible has no effect. .</para>
            </listitem>

            <listitem>
              <para>int minimum</para>

              <para>The minimum value the scrollbar can have (usually
              0).</para>
            </listitem>

            <listitem>
              <para>int maximum</para>

              <para>The maximum value the scrollbar can have.</para>
            </listitem>
          </itemizedlist>
        </section>

        <section>
          <title>Code Example</title>

          <programlisting>public boolean handleEvent(Event evt) {
    switch (evt.id) {
      case Event.SCROLL_LINE_UP:
      case Event.SCROLL_LINE_DOWN:
      case Event.SCROLL_PAGE_UP:
      case Event.SCROLL_PAGE_DOWN:
      case Event.SCROLL_ABSOLUTE:
        if (evt.target == vert) {
            canvas.ty = ((Integer)evt.arg).intValue();
            canvas.repaint();
        }
        if (evt.target == horz) {
            canvas.tx = ((Integer)evt.arg).intValue();
            canvas.repaint();
        }
    }
    return super.handleEvent(evt);
}</programlisting>

          <para><ulink url="../audio/Gui13.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>

      <section>
        <title><ulink
        url="/library/books/tutorial1.02/ui/components/text.html">TextComponent</ulink></title>

        <para>The TextComponent derived classes, TextArea and TextField,
        display selectable text and, optionally, allow the user to edit the
        text.</para>

        <figure>
          <title>AWT 1.0 TextComponent</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="134px" contentwidth="260px"
                         fileref="img/GUI15.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <section>
          <title>TextArea and TextField</title>

          <para>From TextComponent this classes inherit methods that allow
          them to set and get the current selection, enable and disable
          editing, get the currently selected text (or all the text), and set
          the text.</para>

          <literallayout>             Component
                 |
            TextComponent
                 |
          +--------------+
          |              |
       TextArea       TextField</literallayout>
        </section>

        <section>
          <title>Code Example</title>

          <programlisting>//Where instance variables are defined:
TextField textField;
TextArea textArea;

public void init() {
    textField = new TextField(20);
    textField.addActionListener(this);
    textArea = new TextArea(5, 20);
    textArea.setEditable(false);

    ...//Add the two components to the panel. 
}

public void actionPerformed(ActionEvent evt) {
    String text = textField.getText();
    textArea.append(text + "\n");
    textField.selectAll();
}</programlisting>

          <para><ulink url="../audio/Gui14.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>

      <section>
        <title><ulink
        url="/library/books/tutorial1.02/ui/components/label.html">Menus</ulink></title>

        <para>The following applet shows many of the menu features you're
        likely to use.</para>

        <figure>
          <title>AWT 1.0 Menu</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="151px" contentwidth="500px"
                         fileref="img/GUI13.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <note>
          <itemizedlist>
            <listitem>
              <para>Menus can exist only in menu bars, and menu bars can be
              attached only to windows (specifically, to Frames).</para>
            </listitem>

            <listitem>
              <para>Classes that provide menu functionality do not inherit
              from Component, since many platforms place severe limits on menu
              capabilities.</para>
            </listitem>
          </itemizedlist>
        </note>

        <section>
          <title>MenuComponent subclasses</title>

          <figure>
            <title>AWT 1.0 MenuComponent</title>

            <mediaobject>
              <imageobject>
                <imagedata contentdepth="96px" contentwidth="457px"
                           fileref="img/GUI16.gif" format="GIF" />
              </imageobject>
            </mediaobject>
          </figure>

          <itemizedlist>
            <listitem>
              <para>MenuItem</para>

              <para>Each item in a menu is represented by a MenuItem
              object.</para>
            </listitem>

            <listitem>
              <para>CheckboxMenuItem</para>

              <para>Each menu item that contains a checkbox is represented by
              a CheckboxMenuItem object.</para>
            </listitem>

            <listitem>
              <para>Menu</para>

              <para>Each menu is represented by a Menu object. Menu is a
              subclass of MenuItem so that you can create a submenu by adding
              one menu to another.</para>
            </listitem>

            <listitem>
              <para>MenuBar</para>

              <para>The MenuBar class represents the platform-dependent notion
              of a group of menus attached to a window. MenuBars can not be
              bound to Panels.</para>
            </listitem>
          </itemizedlist>
        </section>

        <section>
          <title>MenuContainer Interface</title>

          <para>To be able to contain a MenuComponent, an object must adhere
          to the MenuContainer interface (Frame, Menu, and MenuBar classes
          do)</para>

          <para><ulink url="../audio/Gui15.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>
    </section>

    <section id="extra_reading_awt_1.0_awt_1.0_menus">
      <title>AWT 1.0 Menus</title>

      <section>
        <title>Code Example</title>

        <programlisting>public class MenuWindow extends Frame {
    . . .
    public MenuWindow() {
        
        //Build the menu bar.
        mb = new MenuBar();
        setMenuBar(mb);
 
        //Build first menu in the menu bar.
        m1 = new Menu("Menu 1", true);
        mb.add(m1);
        mi1_1 = new MenuItem("Menu Item 1_1");
        m1.add(mi1_1);
           . . .

        //Build help menu.
        m5 = new Menu("Menu 5");
        mb.add(m5); //just setting the help menu doesn't work; must add it
        mb.setHelpMenu(m5);
        mi5_1 = new MenuItem("Menu Item 5_1");
        m5.add(mi5_1);
           . . .

        //Build second menu in the menu bar.
        m2 = new Menu("Menu 2");
        mb.add(m2);
        mi2_1 = new CheckboxMenuItem("Menu Item 2_1");
        m2.add(mi2_1);
 
        //Build third menu in the menu bar.
           . . .
    }
    . . .
    public boolean action(Event event, Object arg) {
        String str = "Action detected";
        if (event.target instanceof MenuItem) {
            MenuItem mi=(MenuItem)(event.target);
            str += " on " + arg;
            if (mi instanceof CheckboxMenuItem) {
                    str += " (state is " 
                           + ((CheckboxMenuItem)mi).getState()
                           + ")";
            }
            MenuContainer parent = mi.getParent();
            if (parent instanceof Menu) {
                str += " in " + ((Menu)parent).getLabel();
            } else {
                str += " in a container that isn't a Menu";
            }
        }
        str += ".\n";
        ...//Display the string in the output area...
        return false;
    }
}</programlisting>

        <para><ulink url="../audio/Gui16.asf"><inlinegraphic
        fileref="img/asf.gif" format="GIF" />Audio in
        Portuguese</ulink></para>
      </section>
    </section>

    <section id="extra_reading_awt_1.0_awt_1.0_containers">
      <title>AWT 1.0 Containers</title>

      <section>
        <title><ulink
        url="/library/books/tutorial1.02/ui/components/frame.html">Frames</ulink></title>

        <para>The Frame class provides windows for applets and applications.
        Every application needs at least one Frame.</para>

        <section>
          <title>Code Example</title>

          <programlisting>public class MenuWindow extends Frame {
       boolean inAnApplet = true;
       TextArea output;

       public MenuWindow() {
              //Calls the Frame constructor and adds components to the window.
       }

       public boolean handleEvent(Event event) {
              if (event.id == Event.WINDOW_DESTROY)
                 if (inAnApplet)
                     dispose();
                 else
                     System.exit(0);

              return super.handleEvent(event);
       }
       . . .
       public static void main(String args[]) {
              MenuWindow window = new MenuWindow();
              window.inAnApplet = false;
              window.setTitle("MenuWindow Application");
              window.pack();
              window.show();
       }
}</programlisting>
        </section>

        <section>
          <title>Other methods provided by Frame</title>

          <itemizedlist>
            <listitem>
              <para>String getTitle() and void setTitle(String)</para>

              <para>Returns or sets (respectively) the title of the frame's
              window.</para>
            </listitem>

            <listitem>
              <para>Image getIconImage() and void setIconImage(Image)</para>

              <para>Returns or sets (respectively) the image displayed when
              the window is iconified.</para>
            </listitem>

            <listitem>
              <para>MenuBar getMenuBar() and void setMenuBar(MenuBar)</para>

              <para>Returns or sets (respectively) the menu bar for this
              Frame.</para>
            </listitem>

            <listitem>
              <para>void remove(MenuComponent)</para>

              <para>Removes the specified menu bar from this Frame.</para>
            </listitem>

            <listitem>
              <para>int getCursorType() and void setCursor(int)</para>

              <para>Gets the current cursor image or sets the cursor
              image.</para>
            </listitem>
          </itemizedlist>

          <para><ulink url="../audio/Gui17.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>

      <section>
        <title><ulink
        url="/library/books/tutorial1.02/ui/components/panel.html">Panels</ulink></title>

        <para>The Panel class is a general-purpose Container subclass. You can
        use it as-is to hold Components, or you can define a subclass to
        perform special functionality, such as event handling for the objects
        the Panel contains.</para>

        <note>
          <para>The Applet class is a Panel subclass with special hooks to run
          in a browser or other applet viewer.</para>
        </note>

        <section>
          <title>Code Example</title>

          <programlisting>Panel p1 = new Panel();
p1.add(new Button("Button 1"));
p1.add(new Button("Button 2"));
p1.add(new Button("Button 3"));</programlisting>

          <para>A Panel subclass that draws a frame around its
          contents.</para>

          <figure>
            <title>AWT 1.0 Panel Subclass</title>

            <mediaobject>
              <imageobject>
                <imagedata contentdepth="96px" contentwidth="457px"
                           fileref="img/GUI16.gif" format="GIF" />
              </imageobject>
            </mediaobject>
          </figure>

          <programlisting>class FramedArea extends Panel {
    public FramedArea(CoordinatesDemo controller) {
        ...//Set the layout manager.
           //Add any Components this Panel contains...
    }

    //Ensure that no Component is placed on top of the frame.
    //The inset values were determined by trail and error.
    public Insets getInsets() {
        return new Insets(4,4,5,5);
    }

    //Draw the frame at this Panel's edges.
    public void paint(Graphics g) {
        Dimension d = getSize();
        Color bg = getBackground();
 
        g.setColor(bg);
        g.draw3DRect(0, 0, d.width - 1, d.height - 1, true);
        g.draw3DRect(3, 3, d.width - 7, d.height - 7, false);
    }
}</programlisting>

          <para><ulink url="../audio/Gui18.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>

      <section>
        <title><ulink
        url="/library/books/tutorial1.02/ui/components/dialog.html">Dialogs</ulink></title>

        <para>The AWT provides support for dialogs -- windows that are
        dependent on other windows -- with the Dialog class. It provides a
        useful subclass, FileDialog,that provides dialogs to help the user
        open and save files.</para>

        <figure>
          <title>AWT 1.0 Dialog</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="121px" contentwidth="473px"
                         fileref="img/GUI10.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <section>
          <title>Code Example</title>

          <programlisting>class SimpleDialog extends Dialog {
      TextField field;
      DialogWindow parent;
      Button setButton;

      SimpleDialog(Frame dw, String title) {
             super(dw, title, false);
             parent = (DialogWindow)dw;
           
             ...//Create and add components, such as the set button.
           
             //Initialize this dialog to its preferred size.
             pack();
      }

      public boolean action(Event event, Object arg) {
             if ((event.target == setButton)
                    | (event.target instanceof TextField))
                 parent.setText(field.getText());
             field.selectAll();
             hide();
             return true;
       }
}

     
//Here's the code that brings up the dialog: 

if (dialog == null)
    dialog = new SimpleDialog(this, "A Simple Dialog");

dialog.show();</programlisting>

          <para><ulink url="audio/Gui19.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>
    </section>

    <section id="extra_reading_awt_1.0_events">
      <title><ulink
      url="/library/books/tutorial1.02/ui/overview/events.html">Events</ulink></title>

      <section>
        <title>Definition</title>

        <para>When the user acts on a Component -- clicking it or pressing the
        Return key, for example -- an Event object is created.</para>
      </section>

      <section>
        <title>Processing</title>

        <para>The AWT event-handling system passes the Event up the Component
        hierarchy, giving each Component a chance to react to the event before
        the platform-dependent code that implements the Component fully
        processes it:</para>

        <figure>
          <title>AWT 1.0 Event-Handling</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="337px" contentwidth="320px"
                         fileref="img/GUI4.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <section>
          <title>How Component's event handler can react to an event:</title>

          <itemizedlist>
            <listitem>
              <para>By ignoring the event and allowing it to be passed up the
              Component hierarchy.</para>
            </listitem>

            <listitem>
              <para>By modifying the Event instance before it goes further up
              the hierarchy.</para>
            </listitem>

            <listitem>
              <para>By reacting in some other way to the event.</para>
            </listitem>

            <listitem>
              <para>By intercepting the event, stopping it from being
              processed further.</para>
            </listitem>
          </itemizedlist>

          <note>
            <para>The AWT doesn't see every event that occurs. The AWT can see
            only those events that the platform-dependent code lets it
            see.</para>
          </note>

          <para><ulink url="audio/Gui4.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>

      <section>
        <title>The Event Object</title>

        <para>Each event results in the creation of an Event object. An Event
        object includes the following information:</para>

        <itemizedlist>
          <listitem>
            <para>The type of the event.</para>
          </listitem>

          <listitem>
            <para>The object that was the "target" of the event.</para>
          </listitem>

          <listitem>
            <para>A timestamp indicating when the event occurred.</para>
          </listitem>

          <listitem>
            <para>The (x,y) location where the event occurred.</para>
          </listitem>

          <listitem>
            <para>The key that was pressed (for keyboard events).</para>
          </listitem>

          <listitem>
            <para>An arbitrary argument associated with the Event.</para>
          </listitem>

          <listitem>
            <para>The state of modifier keys, such as Shift and Control, when
            the event occurred.</para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title>Implementing an Event Handler</title>

        <para>The Component class defines many event-handling methods, and you
        can override any of them.</para>

        <itemizedlist>
          <listitem>
            <para>action() (Event.ACTION_EVENT)</para>
          </listitem>

          <listitem>
            <para>mouseEnter() (Event.MOUSE_ENTER)</para>
          </listitem>

          <listitem>
            <para>mouseExit() (Event.MOUSE_EXIT)</para>
          </listitem>

          <listitem>
            <para>mouseMove() (Event.MOUSE_MOVE)</para>
          </listitem>

          <listitem>
            <para>mouseDown() (Event.MOUSE_DOWN)</para>
          </listitem>

          <listitem>
            <para>mouseDrag() (Event.MOUSE_DRAG)</para>
          </listitem>

          <listitem>
            <para>mouseUp() (Event.MOUSE_UP)</para>
          </listitem>

          <listitem>
            <para>keyDown() (Event.KEY_PRESS or Event.KEY_ACTION)</para>
          </listitem>

          <listitem>
            <para>keyUp() (Event.KEY_RELEASE or
            Event.KEY_ACTION_RELEASE)</para>
          </listitem>

          <listitem>
            <para>gotFocus() (Event.GOT_FOCUS)</para>
          </listitem>

          <listitem>
            <para>lostFocus() (Event.LOST_FOCUS)</para>
          </listitem>

          <listitem>
            <para>handleEvent() (all event types)</para>
          </listitem>
        </itemizedlist>

        <note>
          <para>Only basic control components -- Button, Checkbox, Choice,
          List, MenuItem, and TextField objects -- produce action() events.
          They do so when the user indicates somehow that the control should
          perform an action.</para>
        </note>

        <para><ulink url="audio/Gui5.asf"><inlinegraphic fileref="img/asf.gif"
        format="GIF" />Audio in Portuguese</ulink></para>
      </section>

      <section>
        <title>Handling and/or passing</title>

        <para>The return value indicates whether the method completely handled
        an event:</para>

        <itemizedlist>
          <listitem>
            <para>By returning false, the event handler indicates that the
            event should continue to be passed up the component
            hierarchy.</para>
          </listitem>

          <listitem>
            <para>By returning true, the event handler indicates that the
            event should not be forwarded any further.</para>
          </listitem>

          <listitem>
            <para>The handleEvent() method should almost always return
            super.handleEvent(), to ensure that all events are forwarded to
            the appropriate event-handling method.</para>
          </listitem>
        </itemizedlist>

        <para>Two examples of handlers:</para>

        <programlisting>/** Respond to user actions on controls. */
public boolean action(Event e, Object arg) {
       if (e.target instanceof TextField) {
           setSliderValue(getValue());
           controller.convert(this);
           return true;
       }
       if (e.target instanceof Choice) {
           controller.convert(this);
           return true;
       } 
       return false;
}

/** Respond to the slider. */
public boolean handleEvent(Event e) {
       if (e.target instanceof Scrollbar) {
           textField.setText(String.valueOf(slider.getValue()));
           controller.convert(this);
       } 
       return super.handleEvent(e);
}</programlisting>
      </section>

      <section>
        <title>The Keyboard Focus</title>

        <para>Once a window has the focus, the Component requestFocus() method
        can request that a component get the focus.</para>

        <itemizedlist>
          <listitem>
            <para>When a component gets the focus, its gotFocus() method is
            called.</para>
          </listitem>

          <listitem>
            <para>When a component loses the focus, its lostFocus() method is
            called.</para>
          </listitem>
        </itemizedlist>

        <para><ulink url="audio/Gui6.asf"><inlinegraphic fileref="img/asf.gif"
        format="GIF" />Audio in Portuguese</ulink></para>
      </section>
    </section>
  </chapter>

  <chapter id="udf">
    <title>UDF</title>

    <section id="udf_unit_development_folder">
      <title>Unit Development Folder</title>

      <itemizedlist>
        <listitem>
          <para>UDF</para>

          <para><emphasis role="bold">Definition:</emphasis></para>

          <para>It is a specific form of development notebook which has proven
          useful and effective in collecting and orginizing software products
          as they are produced.</para>

          <para><emphasis role="bold">Purposes:</emphasis></para>

          <orderedlist>
            <listitem>
              <para>Provide an ordely and consistent approach in the
              development of each of the units of a program or project.</para>
            </listitem>

            <listitem>
              <para>Provide an uniform and visible collection point for all
              unit documentation and code.</para>
            </listitem>

            <listitem>
              <para>Aid individual discipline in the establishment and
              attainment of scheduled unit-level milestones.</para>
            </listitem>

            <listitem>
              <para>Provide low-level management visibility and control over
              the development process.</para>
            </listitem>

            <listitem>
              <para>Management can easily access the status of the
              unit.</para>
            </listitem>

            <listitem>
              <para>Much of the unit's deliverable documentation can be
              constructed from the UDF, when development is nearing
              completion.</para>
            </listitem>

            <listitem>
              <para>Most of the information necessary for post-delivery
              maintenance will be assembled in one place.</para>
            </listitem>
          </orderedlist>

          <para><emphasis role="bold">Main Points:</emphasis></para>

          <itemizedlist>
            <listitem>
              <para>The UDF is established in skeletal form prior to the start
              of design.</para>
            </listitem>

            <listitem>
              <para>The UDF becomes the primary tool for monitoring progress
              during software development and testing activities.</para>
            </listitem>

            <listitem>
              <para>All UDFs are controlled by a Project Engineer, who assigns
              a UDF Custodian for each UDF.</para>
            </listitem>

            <listitem>
              <para>The UDF can be audited at periodic intervals during the
              development process.</para>
            </listitem>

            <listitem>
              <para>The UDF Custodians are responsible for assuring that their
              UDFs are properly prepared and maintained.</para>
            </listitem>
          </itemizedlist>
        </listitem>
      </itemizedlist>
    </section>

    <section id="udf_unit_development_folder_guide">
      <title>Unit Development Folder Guide</title>

      <itemizedlist>
        <listitem>
          <para><emphasis role="bold">Overview</emphasis></para>

          <para>The purpose of this guide is to define and require a standard
          format for writing Unit Development Folders (UDF. There are several
          purposes which are served by Unit Development Folders:</para>

          <orderedlist>
            <listitem>
              <para>Provide an ordely and consistent approach in the
              development of each of the units of a program or project.</para>
            </listitem>

            <listitem>
              <para>Provide an uniform and visible collection point for all
              unit documentation and code.</para>
            </listitem>

            <listitem>
              <para>Aid individual discipline in the establishment and
              attainment of scheduled unit-level milestones.</para>
            </listitem>

            <listitem>
              <para>Provide low-level management visibility and control over
              the development process.</para>
            </listitem>

            <listitem>
              <para>Management can easily access the status of the unit</para>
            </listitem>

            <listitem>
              <para>Much of the unit's deliverable documentation can be
              constructed from the UDF, when development is nearing
              completion.</para>
            </listitem>

            <listitem>
              <para>Most of the information necessary for post-delivery
              maintenance will be assembled in one place.</para>
            </listitem>
          </orderedlist>

          <para>The UDF is established in skeletal form prior to the start of
          design and becomes the primary tool for monitoring progress during
          software development and testing activities. All UDFs are controlled
          by a Project Engineer, who assigns a UDF Custodian (responsible
          designer) for each UDF. The UDF will be audited at periodic
          intervals during the development process by the responsible Project
          Engineer to assure that the required format of the UDF is maintained
          and to allow complete assessment of unit status to be made.</para>

          <para>The UDF will be maintained in a binder with tabbed sections.
          Each UDF will be externally identified by a unique name, descriptive
          of the unit contained therein. Each UDF contains directly or
          provides a reference to the current documentation for each of its
          required items.</para>

          <para>The UDF Custodians are responsible for assuring that their
          UDFs are properly prepared and maintained. The Project Engineers are
          charged with assuring that the UDFs are structured uniformly to
          provide clarity and ease of inspection. The Project Engineer is also
          responsible for performing audits of the UDFs to verify adherence to
          the standards and requirements established by this guide.</para>
        </listitem>
      </itemizedlist>

      <itemizedlist>
        <listitem>
          <para><emphasis role="bold">UDF Organization and
          Content</emphasis></para>

          <para>The organization and contents of a UDF can be adapted to
          reflect local conditions or individual projects requirements. The
          important considerations in the structuring of a UDF are:</para>

          <orderedlist>
            <listitem>
              <para>The number of subdivisions is not so large as to be
              confusing or unmanageable.</para>
            </listitem>

            <listitem>
              <para>Each of the sections contributes to the management and
              visibility of the development process.</para>
            </listitem>

            <listitem>
              <para>The content and format of each section are afequately and
              unambiguosly defined.</para>
            </listitem>

            <listitem>
              <para>The subdivisions are suficiently flexible to be applicable
              to a variety of software types.</para>
            </listitem>

            <listitem>
              <para>The individual sections are chronologically ordered as
              nearly as possible.</para>
            </listitem>
          </orderedlist>

          <para>The development of the UDF is geared to proceed logically and
          sequentially, and each section should be as complete as possible
          before proceeding to the next section. This is not always possible,
          and software development is usually an interative rather than
          sequencial process. These situations only serve to reinforce the
          need for an ordered process that can be understood and tracked even
          under adverse conditions.</para>

          <para>A UDF should contain the following sections:</para>

          <itemizedlist>
            <listitem>
              <para><emphasis role="bold">Introduction</emphasis></para>

              <para>This section contains a UDF cover sheet (figure 1) for the
              unit and identifies the status of the components of the UDF. The
              cover sheet delineates, for each of the sections, the start and
              completion dates, responsible originators, and reviewer
              sign-offs and dates.</para>

              <para>Following the cover sheet is a description of the unit,
              system overview, and how the unit fits into the system. A top
              level structure diagram of the units components will be
              provided. Also provide naming conventions used, plus any unique
              system capabilities required by the unit.</para>

              <para>Following this description, a unit schedule will be
              included. This schedule will show the state of all the unit's
              components. Each component will be listed along with start date,
              percent complete, and completion date for each of the following
              functions: Design, Code, and Test.</para>

              <para>Following each cover sheet, a UDF Change Log should be
              included to document all UDF changes subsequent to the time when
              the unit is put into a controlled test or maintenance
              environment.</para>
            </listitem>

            <listitem>
              <para><emphasis role="bold">Requirements</emphasis></para>

              <para>This section will contain as separately tabbed subsections
              program requirements specification documentation and the program
              operating environment. The program requirements specification
              subsection will contain a copy of any current requirements
              documentation applicable to the unit. The program operating
              environment subsection will contain the hardware and operating
              system configurations required for the operation of the
              unit.</para>
            </listitem>

            <listitem>
              <para><emphasis role="bold">External
              Interfaces</emphasis></para>

              <para>This section contains a detailed data description for all
              external interfaces either required or generated by this
              unit.</para>
            </listitem>

            <listitem>
              <para><emphasis role="bold">Design Description</emphasis></para>

              <para>This section will contain as subsections the design
              description for each unit component. Each subsection will
              contain the component functional description, the interfaces,
              the data organization (data dictionary, data flows), control
              flows, state diagrams, and PDL describing the process flow.
              Throughout the development and maintenance process, each Design
              subsection represents the current working version of the design,
              and therefore will be maintained and annotated as changes occur
              to the initial design. The information presented here should
              reflect the component's header.</para>

              <para>If you are doing development in an object oriented
              language (such as Java), add the Class Diagrams (UML) of your
              program as pictures. If you used other UML diagrams, add them
              also.</para>
            </listitem>

            <listitem>
              <para><emphasis role="bold">Code</emphasis></para>

              <para>As the unit components are modified, this section contains
              the listing for unit component.</para>

              <para>Do not forget to document the specification of every
              method (or procedure) of your program, a specification of a
              method (or procedure) consists of several clauses:</para>

              <itemizedlist>
                <listitem>
                  <para>a precondition, indicated by the keyword
                  requires;</para>
                </listitem>

                <listitem>
                  <para>a postcondition, indicated by the keyword
                  effects;</para>
                </listitem>

                <listitem>
                  <para>a frame condition, indicated by the keyword
                  modifies.</para>
                </listitem>
              </itemizedlist>

              <para>Remember: not all clauses have to be present in all
              specifications; in Java, use the javadoc utility to generate
              documentation.</para>
            </listitem>

            <listitem>
              <para><emphasis role="bold">Unit Test Plan</emphasis></para>

              <para>This section contains a test plan for the unit and
              identifies the individual tests described. A description of each
              test case will be included. Whenever possible use a xUnit test
              framework. In Java, use the jUnit test framework.</para>
            </listitem>

            <listitem>
              <para><emphasis role="bold">Test Results</emphasis></para>

              <para>This section contains a compilation of all current
              successful test case results and analyses necessary to
              demonstrate that the unit has been tested as described in the
              test plan. Test output should be identified by test case numbers
              and results should be annotated to facilitate reviews of this
              results by other qualified individuals.</para>
            </listitem>

            <listitem>
              <para><emphasis role="bold">Build Procedures</emphasis></para>

              <para>This section will include a list of all the names of all
              the appropriate files (e.g., source and object) as well as their
              locations for system development, modification, and maintenance.
              This section will also include the detailed steps sufficient to
              supply an operator with the procedures necessary to produce the
              executable software.</para>
            </listitem>

            <listitem>
              <para><emphasis role="bold">Problems Reports</emphasis></para>

              <para>This section contains status logs and copies of all Design
              Problems Reports, Design Analysis Reports and Discrepancy
              Reports (as required) which document all design and code
              problems and changes experienced by the unit. This ensures a
              clear and documented traceability for all problems and changes
              incurred.</para>
            </listitem>

            <listitem>
              <para><emphasis role="bold">Notes</emphasis></para>

              <para>This section may be composed of any item pertaining to the
              unit that the UDF Custodian wishes to include.</para>
            </listitem>

            <listitem>
              <para><emphasis role="bold">Audits/Reviews</emphasis></para>

              <para>This section will contain copies of all audit/reviews
              reports applicable to the UDF. This includes PDL and Code
              walkthroughs and UDF audits. Include all notes pertaining to
              those audits and reviews.</para>
            </listitem>
          </itemizedlist>
        </listitem>
      </itemizedlist>

      <itemizedlist>
        <listitem>
          <para><emphasis role="bold">UDF Maintenance</emphasis></para>

          <para>After code development and initial baselining, the design
          responsibility is unchanged. All changes made to the UDF will be as
          described in section 2, UDF Organization and Contents, of this
          guide.</para>
        </listitem>
      </itemizedlist>

      <itemizedlist>
        <listitem>
          <para><emphasis role="bold">Summary</emphasis></para>

          <para>The UDF concept has evolved into a pratical, efective and
          valuable tool not only for the management of software development
          but also for imposing a structured approach on the total software
          development process. The structure and content of the UDF are
          designed to create a set of milestones at the unit leval, each of
          which can be easily observed and reviewed.</para>

          <para>PROGRAM NAME:
          __________________________________________________</para>

          <para>UNIT NAME:______________________________
          CUSTODIAN:______________</para>

          <para>ROUTINES
          INCLUDED:______________________________________________</para>

          <table>
            <title>UDF Cover Page</title>

            <tgroup cols="6">
              <tbody>
                <row>
                  <entry><emphasis role="bold">Section No.</emphasis></entry>

                  <entry><emphasis role="bold">Description</emphasis></entry>

                  <entry><emphasis role="bold">Due Date</emphasis></entry>

                  <entry><emphasis role="bold">Date
                  Completed</emphasis></entry>

                  <entry><emphasis role="bold">Originator</emphasis></entry>

                  <entry><emphasis
                  role="bold">Reviewer/Date</emphasis></entry>
                </row>

                <row>
                  <entry>1</entry>

                  <entry>Requirements</entry>

                  <entry>.</entry>

                  <entry>.</entry>

                  <entry>.</entry>

                  <entry>.</entry>
                </row>

                <row>
                  <entry>2</entry>

                  <entry>External Interfaces</entry>

                  <entry>.</entry>

                  <entry>.</entry>

                  <entry>.</entry>

                  <entry>.</entry>
                </row>

                <row>
                  <entry>3</entry>

                  <entry>Design Description</entry>

                  <entry>.</entry>

                  <entry>.</entry>

                  <entry>.</entry>

                  <entry>.</entry>
                </row>

                <row>
                  <entry>4</entry>

                  <entry>Unit Code</entry>

                  <entry>.</entry>

                  <entry>.</entry>

                  <entry>.</entry>

                  <entry>.</entry>
                </row>

                <row>
                  <entry>5</entry>

                  <entry>Unit Test Plan</entry>

                  <entry>.</entry>

                  <entry>.</entry>

                  <entry>.</entry>

                  <entry>.</entry>
                </row>

                <row>
                  <entry>6</entry>

                  <entry>Test Results</entry>

                  <entry>.</entry>

                  <entry>.</entry>

                  <entry>.</entry>

                  <entry>.</entry>
                </row>

                <row>
                  <entry>7</entry>

                  <entry>Build Procedures</entry>

                  <entry>.</entry>

                  <entry>.</entry>

                  <entry>.</entry>

                  <entry>.</entry>
                </row>

                <row>
                  <entry>8</entry>

                  <entry>Problems Reports</entry>

                  <entry></entry>

                  <entry></entry>

                  <entry></entry>

                  <entry>.</entry>
                </row>

                <row>
                  <entry>9</entry>

                  <entry>Notes</entry>

                  <entry></entry>

                  <entry></entry>

                  <entry></entry>

                  <entry></entry>
                </row>

                <row>
                  <entry>10</entry>

                  <entry>Reviewers</entry>

                  <entry></entry>

                  <entry></entry>

                  <entry></entry>

                  <entry></entry>
                </row>
              </tbody>
            </tgroup>
          </table>
        </listitem>
      </itemizedlist>
    </section>
  </chapter>

  <chapter id="exercises">
    <title>Exercises</title>

    <section id="exercises_exercises_1">
      <title>Exercises 1</title>

      <para><orderedlist>
          <listitem>
            <para>Um âsigned data typeâ possui um nÃºmero de valores
            disponÃ­veis ânÃ£o-zeroâ positivos e negativos
            diferentes.<orderedlist continuation="restarts"
                inheritnum="inherit">
                <listitem>
                  <para>Verdadeiro</para>
                </listitem>

                <listitem>
                  <para>Falso</para>
                </listitem>
              </orderedlist></para>
          </listitem>

          <listitem>
            <para>Escolha o identificador vÃ¡lido:<orderedlist
                continuation="restarts" inheritnum="inherit">
                <listitem>
                  <para>Big01LongStringWithMeaninglessName</para>
                </listitem>

                <listitem>
                  <para>$int</para>
                </listitem>

                <listitem>
                  <para>bytes</para>
                </listitem>

                <listitem>
                  <para>$1</para>
                </listitem>

                <listitem>
                  <para>finalist</para>
                </listitem>
              </orderedlist></para>
          </listitem>

          <listitem>
            <para>Quais das seguintes representaÃ§Ãµes sÃ£o vÃ¡lidas para a
            entrada do mÃ©todo main() de uma aplicaÃ§Ã£o?<orderedlist
                continuation="restarts" inheritnum="inherit">
                <listitem>
                  <para>public static void main()</para>
                </listitem>

                <listitem>
                  <para>public static void main(String arg[])</para>
                </listitem>

                <listitem>
                  <para>public void main(String [] arg)</para>
                </listitem>

                <listitem>
                  <para>public static void main(String[] args)</para>
                </listitem>

                <listitem>
                  <para>public static int main(String [] arg)</para>
                </listitem>
              </orderedlist></para>
          </listitem>

          <listitem>
            <para>Se todos os trÃªs elementos (import, declaraÃ§Ã£o de package
            and classes) ocorrerem em um arquivo fonte, eles devem aparecer em
            que ordem?<orderedlist continuation="restarts"
                inheritnum="inherit">
                <listitem>
                  <para>Imports, declaraÃ§Ã£o de package, classes</para>
                </listitem>

                <listitem>
                  <para>Classes, imports, declaraÃ§Ã£o de package</para>
                </listitem>

                <listitem>
                  <para>DeclaraÃ§Ã£o de Package deve aparecer primeiro; a ordem
                  para imports e definiÃ§Ã£o de class nÃ£o Ã© significativa</para>
                </listitem>

                <listitem>
                  <para>DeclaraÃ§Ã£o de package, imports, classes.</para>
                </listitem>

                <listitem>
                  <para>Imports devem aparecer antes; a ordem para declaraÃ§Ã£o
                  de package e definiÃ§Ã£o de class nÃ£o Ã© significante</para>
                </listitem>
              </orderedlist></para>
          </listitem>

          <listitem>
            <para>Considere a seguinte linha de cÃ³digo:</para>

            <programlisting>     int  x[] = new int [25];</programlisting>

            <para>ApÃ³s a execuÃ§Ã£o, qual(is) afirmaÃ§Ã£o(Ãµes) Ã©(sÃ£o)
            verdadeiras?<orderedlist continuation="restarts"
                inheritnum="inherit">
                <listitem>
                  <para>x[24] Ã© 0</para>
                </listitem>

                <listitem>
                  <para>x[24] Ã© indefinido</para>
                </listitem>

                <listitem>
                  <para>x[25] Ã© 0</para>
                </listitem>

                <listitem>
                  <para>x[0] Ã© nulo</para>
                </listitem>

                <listitem>
                  <para>x.length Ã© 25</para>
                </listitem>
              </orderedlist></para>
          </listitem>

          <listitem>
            <para>Considere a seguinte aplicaÃ§Ã£o:</para>

            <programlisting>1.    class Q6  {
2.        public static void main(String args[])  { 
3.            Holder h = new Holder(); 
4.            h.held = 100; 
5.            h.bump(h);
6.            System.out.println(h.held); 
7.        } 
8.    }
9.        
10.   class Holder { 
11.       public int held;
12.       public void bump(Holder theHolder) { theHolder.held++; } 
13.   }</programlisting>

            <para>Qual valor Ã© impresso na linha 6?<orderedlist
                continuation="restarts" inheritnum="inherit">
                <listitem>
                  <para>0</para>
                </listitem>

                <listitem>
                  <para>1</para>
                </listitem>

                <listitem>
                  <para>100</para>
                </listitem>

                <listitem>
                  <para>101</para>
                </listitem>
              </orderedlist></para>
          </listitem>

          <listitem>
            <para>Considere a seguinte aplicaÃ§Ã£o:</para>

            <programlisting>1.    class Q7  { 
2.        public static void main(String args[ ]) { 
3.            double d = 12.3; 
4.            Decrementer dec = new Decrementer(); 
5.            dec.decrement(d); 
6.            System.out.println(d); 
7.        } 
8.    } 
9.        
10.   class Decrementer { 
11.       public void decrement(double decMe)  { decMe = decMe â 1.0; } 
12.   } </programlisting>

            <para>Qual valor Ã© impresso na linha 6?<orderedlist
                continuation="restarts" inheritnum="inherit">
                <listitem>
                  <para>0.0</para>
                </listitem>

                <listitem>
                  <para>-1.0</para>
                </listitem>

                <listitem>
                  <para>12.3</para>
                </listitem>

                <listitem>
                  <para>11.3</para>
                </listitem>
              </orderedlist></para>
          </listitem>

          <listitem>
            <para>Como se forÃ§a a âgarbage collectionâ de um
            objeto?<orderedlist continuation="restarts" inheritnum="inherit">
                <listitem>
                  <para>Garbage collection nÃ£o pode ser forced</para>
                </listitem>

                <listitem>
                  <para>Call System.gc()</para>
                </listitem>

                <listitem>
                  <para>Call System.gc(), passando na referÃªncia para o objeto
                  a ser âgarbage-collectedâ</para>
                </listitem>

                <listitem>
                  <para>Call Runtime.gc()</para>
                </listitem>

                <listitem>
                  <para>Setar todas referencias para o objeto para novos
                  valores (Ex: null)</para>
                </listitem>
              </orderedlist></para>
          </listitem>

          <listitem>
            <para>Qual a faixa de valores que pode ser designada para uma
            variÃ¡vel do tipo short?<orderedlist continuation="restarts"
                inheritnum="inherit">
                <listitem>
                  <para>depende do hardware</para>
                </listitem>

                <listitem>
                  <para>0 a 216 - 1</para>
                </listitem>

                <listitem>
                  <para>0 a 232 - 1</para>
                </listitem>

                <listitem>
                  <para>-215 a 215 â 1</para>
                </listitem>

                <listitem>
                  <para>-231 a 231 â 1</para>
                </listitem>
              </orderedlist></para>
          </listitem>

          <listitem>
            <para>Qual Ã© a faixa de valores que pode ser designada para uma
            variÃ¡vel do tipo byte?<orderedlist continuation="restarts"
                inheritnum="inherit">
                <listitem>
                  <para>depende do hardware</para>
                </listitem>

                <listitem>
                  <para>0 a 28 - 1</para>
                </listitem>

                <listitem>
                  <para>0 a 216 - 1</para>
                </listitem>

                <listitem>
                  <para>â27 a 27 â 1</para>
                </listitem>

                <listitem>
                  <para>â215 a 215 â 1</para>
                </listitem>
              </orderedlist></para>
          </listitem>
        </orderedlist></para>
    </section>

    <section id="exercises_exercises_2">
      <title>Exercises 2</title>

      <para><orderedlist>
          <listitem>
            <para>Depois da execuÃ§Ã£o do fragmento de cÃ³digo abaixo, quais sÃ£o
            os valores das variaveis 'x', 'a', e 'b'?</para>

            <programlisting>int x, a = 6, b =7;
x = a++ + b++;</programlisting>

            <para><orderedlist continuation="restarts" inheritnum="inherit">
                <listitem>
                  <para>x = 15, a = 7, b = 8;</para>
                </listitem>

                <listitem>
                  <para>x = 15; a = 6, b = 7;</para>
                </listitem>

                <listitem>
                  <para>x = 13; a = 7; b = 8;</para>
                </listitem>

                <listitem>
                  <para>x = 13, a = 6; b = 7;</para>
                </listitem>
              </orderedlist></para>
          </listitem>

          <listitem>
            <para>Quais das seguintes ExpressÃµes sÃ£o legais? (escolha uma ou
            mais)</para>

            <para><orderedlist continuation="restarts" inheritnum="inherit">
                <listitem>
                  <para>int x = 6; x = !x;</para>
                </listitem>

                <listitem>
                  <para>int x = 6; if (!(x &gt; 3)) {}</para>
                </listitem>

                <listitem>
                  <para>int x = 6; x = ~x;</para>
                </listitem>
              </orderedlist></para>
          </listitem>

          <listitem>
            <para>Quais das seguintes expressÃµes resultam um valor positivo em
            x? (escolha uma)</para>

            <para><orderedlist continuation="restarts" inheritnum="inherit">
                <listitem>
                  <para>int x = -1; x = x &gt;&gt;&gt; 5;</para>
                </listitem>

                <listitem>
                  <para>int x = -1; x = x &gt;&gt;&gt; 32;</para>
                </listitem>

                <listitem>
                  <para>byte x = -1; x = x &gt;&gt;&gt; 5;</para>
                </listitem>

                <listitem>
                  <para>int x = -1; x = x &gt;&gt; 5;</para>
                </listitem>
              </orderedlist></para>
          </listitem>

          <listitem>
            <para>Quais das seguintes expressÃµes sÃ£o legais?</para>

            <para><orderedlist continuation="restarts" inheritnum="inherit">
                <listitem>
                  <para>String x = âHello"; int y = 9; x += y;</para>
                </listitem>

                <listitem>
                  <para>String x = âHello"; int y = 9; if (x == y) {}</para>
                </listitem>

                <listitem>
                  <para>String x = âHello"; int y = 9; x = x + y;</para>
                </listitem>

                <listitem>
                  <para>String x = âHello"; int y = 9; y = y + x;</para>
                </listitem>

                <listitem>
                  <para>String x = null; int y = (x != null) &amp;&amp;
                  (x.length() &gt; 0) ? x.length() : 0;</para>
                </listitem>
              </orderedlist></para>
          </listitem>

          <listitem>
            <para>Quais dos seguintes fragmentos de cÃ³digo serÃ¡ compilado com
            sucesso e imprimirÃ¡ na execuÃ§Ã£o a palavra âEqual"? (escolha uma ou
            mais)</para>

            <para><orderedlist continuation="restarts" inheritnum="inherit">
                <listitem>
                  <para>int x = 100; float y = 100.OF; if (x == y)
                  {System.out.println(âEqual");}</para>
                </listitem>

                <listitem>
                  <para>int x = 100; Integer y = new Integer(100); if (x == y)
                  {System.out.println(âEqual");}</para>
                </listitem>

                <listitem>
                  <para>Integer x = new Integer(100); Integer y = new
                  Integer(100); if (x == y)
                  {System.out.println(âEqual");}</para>
                </listitem>

                <listitem>
                  <para>String x = new String(â100");String y = new
                  String(â100"); if (x == y) {
                  System.out.println(âEqual");}</para>
                </listitem>

                <listitem>
                  <para>String x = â100"; String y = â100"; if (x == y)
                  {System.out.println(âEqual");}</para>
                </listitem>
              </orderedlist></para>
          </listitem>

          <listitem>
            <para>Quais os resultados da execuÃ§Ã£o do seguinte cÃ³digo?</para>

            <programlisting>1.      public class short { 
2.          public static void main(String args[]) { 
3.              StringBuffer s = new StringBuffer(âHello"); 
4.              if ((s.length() &gt; 5) &amp;&amp; 
5.                  (s.append(â thereâ¿).equals(âFalse"))) 
6.                  ;  // do nothing 
7.              System.out.println(âvalue is â + s); 
8.          }
9.      }</programlisting>

            <para><orderedlist continuation="restarts" inheritnum="inherit">
                <listitem>
                  <para>A saÃ­da Ã©: Hello</para>
                </listitem>

                <listitem>
                  <para>A saÃ­da Ã©: Hello there</para>
                </listitem>

                <listitem>
                  <para>Erro de compilaÃ§Ã£o na linha 4 ou 5</para>
                </listitem>

                <listitem>
                  <para>Nenhuma saÃ­da</para>
                </listitem>

                <listitem>
                  <para>Ocorre uma NullPointerException</para>
                </listitem>
              </orderedlist></para>
          </listitem>

          <listitem>
            <para>Qual resultado da execuÃ§Ã£o do seguinte cÃ³digo?</para>

            <programlisting>1.      public class Xor{ 
2.          public static void main(String args[])  { 
3.              byte b = 10;  // 0001010 binary 
4.              byte c = 15;  // 00001111 binary 
5.              b = (byte)(b ^c); 
6.              System.out.println(âb contains â + b); 
7.          }
8.      }</programlisting>

            <para><orderedlist continuation="restarts" inheritnum="inherit">
                <listitem>
                  <para>SaÃ­da: b contains 10;</para>
                </listitem>

                <listitem>
                  <para>SaÃ­da: b contains 5;</para>
                </listitem>

                <listitem>
                  <para>SaÃ­da: b contains 250;</para>
                </listitem>

                <listitem>
                  <para>SaÃ­da: b contains 245;</para>
                </listitem>
              </orderedlist></para>
          </listitem>

          <listitem>
            <para>Qual o resultado da tentativa de compilar e executar o
            seguinte cÃ³digo?</para>

            <programlisting>1.      public class Ternary  { 
2.          public static void main(String args[]) { 
3.              int x = 4; 
4.              System.out.println(âvalue is â + 
5.                  ((x &gt; 4) ? 99.99 : 9)); 
6.          } 
7.      } </programlisting>

            <para><orderedlist continuation="restarts" inheritnum="inherit">
                <listitem>
                  <para>SaÃ­da: value is 99.99</para>
                </listitem>

                <listitem>
                  <para>SaÃ­da: value is 9</para>
                </listitem>

                <listitem>
                  <para>SaÃ­da: value is 9.0</para>
                </listitem>

                <listitem>
                  <para>Erro de compilaÃ§Ã£o na linha 5</para>
                </listitem>
              </orderedlist></para>
          </listitem>

          <listitem>
            <para>Qual Ã© a saÃ­da deste fragmento de cÃ³digo?</para>

            <programlisting>1.      int x = 3; int y = 10; 
2.      System.out.println(y % x);
</programlisting>

            <para><orderedlist continuation="restarts" inheritnum="inherit">
                <listitem>
                  <para>0</para>
                </listitem>

                <listitem>
                  <para>1</para>
                </listitem>

                <listitem>
                  <para>2</para>
                </listitem>

                <listitem>
                  <para>3</para>
                </listitem>
              </orderedlist></para>
          </listitem>
        </orderedlist></para>
    </section>

    <section id="exercises_exercises_3">
      <title>Exercises 3</title>

      <orderedlist>
        <listitem>
          <para>Quais das seguintes declaraÃ§Ãµes sÃ£o ilegais? (escolha uma ou
          mais)<orderedlist inheritnum="inherit">
              <listitem>
                <para>friendly String s;</para>
              </listitem>

              <listitem>
                <para>transient int i = 41;</para>
              </listitem>

              <listitem>
                <para>public final static native int w();</para>
              </listitem>

              <listitem>
                <para>abstract double d;</para>
              </listitem>

              <listitem>
                <para>abstract final double hyperbolicCosine();</para>
              </listitem>
            </orderedlist></para>
        </listitem>

        <listitem>
          <para>Qual das seguintes declaraÃ§Ãµes Ã© correta?<orderedlist
              inheritnum="inherit">
              <listitem>
                <para>Uma abstract class nÃ£o pode ter nenhum mÃ©todo
                final</para>
              </listitem>

              <listitem>
                <para>Uma final classe nÃ£o pode ter nenhum mÃ©todo
                abstrato</para>
              </listitem>
            </orderedlist></para>
        </listitem>

        <listitem>
          <para>Qual Ã© a âmÃ­nimaâ modificaÃ§Ã£o que deverÃ¡ ser feita no cÃ³digo
          abaixo para que ele compile corretamente?</para>

          <programlisting>1.      final class Aaa
2.      { 
3.         int xxx 
4.        void yyy() {xxx = 1;} 
5.      } 
6. 
7. 
8.      class Bbb extends Aaa 
9.      { 
10.     final Aaa finalref = new Aaa() 
11.      
12.     final void yyy() 
13.     { 
14.        System.out.println(âIn method yyy()"); 
15.        finalref.xxx = 12345; 
16.     } 
17.  }</programlisting>

          <orderedlist inheritnum="inherit">
            <listitem>
              <para>Na linha 1, remover o modificador âfinalâ</para>
            </listitem>

            <listitem>
              <para>Na linha 10, remover o modificador âfinalâ</para>
            </listitem>

            <listitem>
              <para>Remover linha 15</para>
            </listitem>

            <listitem>
              <para>Nas linhas 1 e 10, remover o modificador âfinalâ</para>
            </listitem>

            <listitem>
              <para>O cÃ³digo serÃ¡ compilado como Ã©, e nenhuma modificaÃ§Ã£o Ã©
              necessÃ¡ria</para>
            </listitem>
          </orderedlist>
        </listitem>

        <listitem>
          <para>Qual das seguintes statements sÃ£o verdadeiras?</para>

          <orderedlist inheritnum="inherit">
            <listitem>
              <para>MÃ©todos transient nÃ£o podem ser overridden</para>
            </listitem>

            <listitem>
              <para>MÃ©todos transient devem ser overridden</para>
            </listitem>

            <listitem>
              <para>Classes transient nÃ£o podem ser serialized</para>
            </listitem>

            <listitem>
              <para>VariÃ¡veis transient devem ser estatic</para>
            </listitem>

            <listitem>
              <para>VariÃ¡veis transients nÃ£o sÃ£o serialized</para>
            </listitem>
          </orderedlist>
        </listitem>

        <listitem>
          <para>Qual statements Ã© verdadeiro sobre a aplicaÃ§Ã£o abaixo?</para>

          <programlisting>1.      class StaticStuff
2.      { 
3.         static int x = 10; 
4.        
5.      static { x += 5;} 
6.        
7.          public static void main(string args[]) 
8.         { 
9.             System.out.println(âx = â + x); 
10.      } 
11.    
12.      static {x /= 5; } 
13.  }</programlisting>

          <orderedlist inheritnum="inherit">
            <listitem>
              <para>As linhas 5 e 12 nao compilarÃ£o, porque o nome do mÃ©todo e
              o type de retorno estÃ£o errados</para>
            </listitem>

            <listitem>
              <para>A linha 12 nÃ£o compilarÃ¡, porque pode haver somente um
              inicializador static</para>
            </listitem>

            <listitem>
              <para>O cÃ³digo compilarÃ¡, e a execuÃ§Ã£o produzirÃ¡ a saÃ­da x =
              10;</para>
            </listitem>

            <listitem>
              <para>O cÃ³digo compilarÃ¡, e a execuÃ§Ã£o produzirÃ¡ a saÃ­da x =
              15;</para>
            </listitem>

            <listitem>
              <para>O cÃ³digo compilarÃ¡, e a execuÃ§Ã£o produzirÃ¡ a saÃ­da x =
              3;</para>
            </listitem>
          </orderedlist>
        </listitem>

        <listitem>
          <para>Qual afirmaÃ§Ã£o Ã© verdadeira para o cÃ³digo abaixo?</para>

          <programlisting>1.      class HasStatic; 
2.      { 
3.          private static int x = 100; 
4.        
5.          public static void main(String args[]) 
6.          { 
7.               HasStatic hs1 = new HasStatic(); 
8.               hs1.x++; 
9.               HasStatic hs2 = new HasStatic(); 
10.           hs2.x++; 
11.           hs1 = new HasStatic(); 
12.           hs1.x++; 
13.           HasStatic.x++; 
14.           System.out.println(âx = â + x); 
15.        } 
16.   }</programlisting>

          <orderedlist inheritnum="inherit">
            <listitem>
              <para>A linha 8 nÃ£o compilarÃ¡, porque ela Ã© uma referencia
              static a uma variÃ¡vel private.</para>
            </listitem>

            <listitem>
              <para>A linha 13 nao compilarÃ¡, porque ele Ã© uma referencia
              static para uma variÃ¡vel private</para>
            </listitem>

            <listitem>
              <para>O programa compilarÃ¡, e a saÃ­da serÃ¡: x = 102;</para>
            </listitem>

            <listitem>
              <para>O programa compilarÃ¡, e a saÃ­da serÃ¡: x = 103</para>
            </listitem>

            <listitem>
              <para>O programa compilarÃ¡, e a saÃ­da serÃ¡: x = 104</para>
            </listitem>
          </orderedlist>
        </listitem>

        <listitem>
          <para>Dado o cÃ³digo abaixo, e nÃ£o fazendo outra mudanÃ§a, qual
          modificador de acesso ( public, protected, private) pode ser
          colocado antes de aMethod() na linha 3? Se a linha 3 for deixada
          como ela Ã©, qual keyword pode ser colocada antes de âaMethodâ na
          linha 8?</para>

          <programlisting>1.      class SuperDuper 
2.      { 
3.            void aMethod() { } 
4.       } 
5.        
6.      class Sub extends SuperDuper 
7.      { 
8.          void aMethod() { } 
9.      }</programlisting>

          <bridgehead>As proximas relacionam-se Ã  seguinte definiÃ§Ã£o de
          class.</bridgehead>

          <programlisting>1.      package abcde; 
2.        
3.      public class Bird   { 
4.         protected static int referenceCount = 0; 
5.         public Bird() { referenceCount++; } 
6.         protected void fly() { /* Flap wings, etc.*/ } 
7.         static int getRefCount() { return referenceCount; } 
8.      }</programlisting>
        </listitem>

        <listitem>
          <para>Qual afirmaÃ§Ã£o Ã© verdadeira sobre a class Bird acima e a class
          Parrot abaixo?</para>

          <programlisting>1.      package abcde; 
2.        
3.      class Parrot extends abcde.Bird { 
4.         public void fly() { /* Parrot specific flight code. */} 
5.         public int getRefcount() { return referenceCount; } 
6.      }</programlisting>

          <orderedlist inheritnum="inherit">
            <listitem>
              <para>CompilaÃ§Ã£o de Parrot.java falha na linha 4, porque o
              method fly() Ã© protected na superclasse e classes Bird e Parrot
              estÃ£o no mesmo pakage.</para>
            </listitem>

            <listitem>
              <para>CompilaÃ§Ã£o de Parrot.Java falha na linha 4, porque o
              mÃ©todo fly() Ã© protected na superclasse e public na suclasse e o
              mÃ©todo nÃ£o pode ser âoverhiddenâ para ser public.â</para>
            </listitem>

            <listitem>
              <para>CompilaÃ§Ã£o de Parrot falharÃ¡ na linha 5, porque o mÃ©todo
              getRefCount() Ã© static na superclasse e metidos static nÃ£o podem
              ser âoverhiddenâpara ser nÃ£o-static.</para>
            </listitem>

            <listitem>
              <para>O programa compilarÃ¡ e executarÃ¡, mas surge uma runtime
              exceptions se o mÃ©todo fly() Ã© sempre chamado na instancia da
              class Parrot.</para>
            </listitem>

            <listitem>
              <para>CompilaÃ§Ã£o de Parrot.Java tem sucesso, mas surge uma
              runtime exceptions se o mÃ©todo getRefCount() Ã© sempre chamado na
              instÃ¢ncia da class Parrot.</para>
            </listitem>
          </orderedlist>
        </listitem>

        <listitem>
          <para>Qual afirmaÃ§Ã£o Ã© verdadeira sobre a class Bird acima e sobre a
          class Nightingale abaixo:</para>

          <programlisting>1.      pachage singers; 
2.        
3.      class Nightingale extends abcde.Bird { 
4.         Nightingale() { referenceCount++; } 
5.        
6.         public static void main(String args[]) { 
7.             System.out.print(âBefore: â + referenceCount); 
8.             Nightingale florence = new Nightingale(); 
9.             System.out.println(â   After: â + referenceCount); 
10.         florence.fly(); 
11.     } 
12.  }</programlisting>

          <orderedlist inheritnum="inherit">
            <listitem>
              <para>O programa compilarÃ¡ e executarÃ¡. A saÃ­da serÃ¡: Before: 0
              After: 2.</para>
            </listitem>

            <listitem>
              <para>O programa compilarÃ¡ e executarÃ¡. A saÃ­da serÃ¡: Before: 0
              After: 1</para>
            </listitem>

            <listitem>
              <para>CompilaÃ§Ã£o de Nightingale falharÃ¡ na linha 4, porque
              membros static nÃ£o podem ser âoverhiddenâ</para>
            </listitem>

            <listitem>
              <para>CompilaÃ§Ã£o de Nightingale falharÃ¡ na linha 10, porque o
              mÃ©todo fly() Ã© protegido na superclasse</para>
            </listitem>

            <listitem>
              <para>CompilaÃ§Ã£o de Nightingale terÃ¡ sucesso, mas surge uma
              exception na linha 10, porque o mÃ©todo fly() Ã© protected na
              superclasse</para>
            </listitem>
          </orderedlist>
        </listitem>
      </orderedlist>
    </section>
  </chapter>

  <chapter id="group_assignments" role="assignments">
    <title>Group Assignments</title>

    <section id="group_assignments_homework1">
      <title>Homework 1</title>

      <section>
        <title>String Changer</title>

        <para>This program should read a text file, search for a string and
        substitute this string for another. The input of commands for this
        program is done at the command line:</para>

        <programlisting>changestr [-h] "string_to_change" "new_string" &lt;file_name&gt; </programlisting>

        <para>The search and substitute algorithms have to be as efficient as
        you can make them. The -h option prints a small help about the
        program.</para>
      </section>

      <section>
        <title>LISP interpreter</title>

        <para>This program should implement a LISP interpreter.</para>

        <para>LISP work with lists of: single elements, several, or other
        lists. Therefore, an element may be an unique element, others
        elements, or lists.</para>

        <programlisting>CAR = head (first element), CDR = tail (all elements without the first (CAR)).</programlisting>

        <para>The program must be able to read a text file, parse, execute
        (and show its results) at least, the following lisp commands:</para>

        <programlisting>(CAR &lt;list&gt;) X= &lt;string&gt;, &lt;list&gt;
(CDR &lt;list&gt;)
(PRINTLN X)
(LIST X {X} )</programlisting>

        <para>For instance, the file may have:</para>

        <programlisting>File INPUT ==&gt; OUTPUT
----------------------------------------------------
- (LIST A B 2) ==&gt; (A B 2)

- (PRINTLN (CAR (LIST A B 2))) ==&gt; A

- (PRINTLN (CDR (LIST A B 2)) ==&gt; (B 2)

- (PRINTLN (CAR (CDR (LIST AB CD EF))) ==&gt; CD

- (PRINTLN (CDR (CAR (LIST (LIST HY HJ I) HJ)))) ==&gt; (HJ I)
----------------------------------------------------</programlisting>
      </section>

      <section>
        <title>UUencode</title>

        <para>This program should read a file and encode it in less than 8
        bits. It should rewrite the file using just the lower part of a byte.
        The command input for it is:</para>

        <programlisting>uuencoder [-n &lt;number_of_bits_used&gt;] &lt;file_name&gt; &lt;file_name_output&gt;</programlisting>

        <para>The optional argument -n will give the number of bits used to
        encode the file. The default value (and maximum) is 7 the minimum is
        4.</para>
      </section>

      <section>
        <title>Interval Number Class</title>

        <para>A new class, derived from Number, that operates with intervals.
        An interval is a real number that has a precision range associated to
        it. For instance, the value of resistance of commercial resistors is
        given by an interval number. A 20 K 10% resistor has its value in
        between 18 K and 22 K.</para>

        <para>This new class has to be able to perform the four basic
        arithmetic operations: addition, subtraction, multiplication and
        division. It should have, at least, the following:</para>

        <programlisting>class Interval extends number{
   Interval(float number, float precision);
   Interval(double number, float precision);
   float precision();
   demo();
   Interval add(Interval x);
   static Interval add(Interval x, Interval y);
      (The same for sub, mult, div)
      (Implement all Number methods)
      (Implement the possible Object methods)
}

For 20K 10%: Interval(&lt;number&gt;, &lt;precision%&gt;) e.g.:
Interval(20000, 10)</programlisting>

        <para>For instance, if one wants to calculate the resistance of two
        parallel resistors:</para>

        <programlisting>R1= 20K 10%   R2= 10K 5%

Interval r1= new Interval(20000, 10);
Interval r2= new Interval(10000, 5);
Interval rp;
rp= Interval.div( Interval.mult(r1, r2), Interval.add(r1,
r2));
System.out.println(" Parallel: " + r1 + " " + r2 + " = " +
rp);

Output:
   Parallel: 20000 10% 10000 5% = 6662.9 6.7%</programlisting>

        <para>This class should have a demo() method to print out and explain
        its main capabilities. You may add to the class any functionality you
        think is worth.</para>
      </section>
    </section>

    <section id="group_assignments_homework2">
      <title>Homework 2</title>

      <section>
        <title>FTP Server</title>

        <para>This program should implement a FTP server and a client.
        Including at least the commands:</para>

        <itemizedlist>
          <listitem>
            <para>ls - List the current directory in the server.</para>
          </listitem>

          <listitem>
            <para>cd - Go to a directory in the server.</para>
          </listitem>

          <listitem>
            <para>lls - List the current directory in the client.</para>
          </listitem>

          <listitem>
            <para>lcd - Go to a directory in the client.</para>
          </listitem>

          <listitem>
            <para>put - Put a file in the server current directory.</para>
          </listitem>

          <listitem>
            <para>mput - Put all files that match a wildcard in the server
            current directory.</para>
          </listitem>

          <listitem>
            <para>get - Get a file from the server current directory.</para>
          </listitem>

          <listitem>
            <para>mget - Get all files that match a wildcard from the server
            current directory.</para>
          </listitem>
        </itemizedlist>

        <para>It just have to work with anonymous ftp and with only bin
        mode.</para>
      </section>

      <section>
        <title>SQL Server</title>

        <para>This program should implement a SQL interpreter that is able to
        get SQL commands from a Telnet connection and send back its results
        also through the same Telnet connection. The server must be able to
        handle more than one client at the same time. All clients will share
        the same database.</para>

        <para>The server has to implement, at least, the following SQL
        commands:</para>

        <programlisting>CREATE TABLE table_name (
      col_name &lt;type&gt;,
       . . .)

DROP TABLE table_name

INSERT INTO table_name (col_name1, col_name2, ...)
   VALUES (value1, value2, ...)

DELETE FROM table_name WHERE col_name &lt;operator&gt; value
   [ AND|OR col_name &lt;operator&gt; value ]

SELECT FROM table_name WHERE col_name &lt;operator&gt; value
   [ AND|OR col_name &lt;operator&gt; value ]

&lt;type&gt; can be: string, int and real.
&lt;operator&gt; can be: =, &gt;, &lt;, &gt;=, &lt;=</programlisting>

        <para>For more information about SQL syntax see a book about
        SQL.</para>
      </section>

      <section>
        <title>Chat Server</title>

        <para>The program should implement a chat server that is able to
        attend multiple clients at the same time. It can be implemented by
        either using a dedicated client or using the Telnet program. It should
        be able to have at least 10 rooms for conversation. The clients should
        be able to create new rooms.</para>

        <programlisting>Commands:
   list              List the names of all rooms.
   nickname &lt;name&gt;   Gives a name for the user.
   join &lt;room name&gt;  Joins a room.
   \                 Leaves a room (only command
                     possible inside a room).</programlisting>

        <para>Events that should be broadcasted for all room members:</para>

        <programlisting>     New user enters room.
     Whatever a user types.
     User leaves room.</programlisting>

        <para>Examples:</para>

        <programlisting>   User hotair enters room pingpong.
   User niceperson: Welcome hotair !
   User hotair: Hi.
   ...
   User hotair: I don't like you, niceperson.
   User hotair leaves room pingpong.</programlisting>
      </section>
    </section>

    <section id="group_assignments_homework3">
      <title>Homework 3</title>

      <section>
        <title>FTP Viewer</title>

        <para>This program should implement a graphic front for a FTP client,
        that is able to provide the same functionality the following commands
        offer:</para>

        <itemizedlist>
          <listitem>
            <para>ls - List the current directory in the server.</para>
          </listitem>

          <listitem>
            <para>cd - Go to a directory in the server.</para>
          </listitem>

          <listitem>
            <para>lls - List the current directory in the client.</para>
          </listitem>

          <listitem>
            <para>lcd - Go to a directory in the client.</para>
          </listitem>

          <listitem>
            <para>put - Put a file in the server current directory.</para>
          </listitem>

          <listitem>
            <para>mput - Put all files that match a wildcard in the server
            current directory.</para>
          </listitem>

          <listitem>
            <para>get - Get a file from the server current directory.</para>
          </listitem>

          <listitem>
            <para>mget - Get all files that match a wildcard from the server
            current directory.</para>
          </listitem>
        </itemizedlist>

        <para>It just have to work with anonymous ftp and with only bin
        mode.</para>

        <para>The main Window should have a Help button explaining the
        functions and operations. It has to have an area to show the directory
        tree of the server machine. The user should be able to chose files
        from this area and download them to his machine, and to upload files
        to the directory represented in this area from a Dialog window. The
        main window should have a button to open ftp locations.</para>
      </section>

      <section>
        <title>WWW Viewer</title>

        <para>This program should display HTML pages as links. The user will
        be able to point the tool to a HTML page and the tool will show all
        links in that page. The user then can click in one of those links and
        the tool will:</para>

        <itemizedlist>
          <listitem>
            <para>Show the new HTML page's links, if the link is a HTML page
            (Its name finishes in .html or .htm).</para>
          </listitem>

          <listitem>
            <para>Show the figure in another window, if the link points to a
            .gif or .jpg file.</para>
          </listitem>

          <listitem>
            <para>Show a message saying it cannot display that link, if any
            other kind of link (like Java applets).</para>
          </listitem>
        </itemizedlist>

        <para>The program should have a HELP button that will display a little
        help and an OPEN button to open URLs.</para>
      </section>

      <section>
        <title>SQL Viewer</title>

        <para>This program should implement a graphic front for a SQL client,
        that is able to provide the following functionality</para>

        <itemizedlist>
          <listitem>
            <para>Connect to a SQL server that can be in any machine.</para>
          </listitem>

          <listitem>
            <para>Allow the user to type a SQL command and submit the command
            to the server connected.</para>
          </listitem>

          <listitem>
            <para>Display the output from the server.</para>
          </listitem>

          <listitem>
            <para>Save the output from the server in a file chosen by the
            user.</para>
          </listitem>

          <listitem>
            <para>A history mechanism that allows the user to re-use commands
            already typed.</para>
          </listitem>
        </itemizedlist>

        <para>The main Window should have a Help button explaining the
        functions and operations.</para>
      </section>

      <section>
        <title>File Manager</title>

        <para>The unit FileManager is the only unit for a File Manager
        Application. The Java File Manager application is designed to provide
        basic facilities to deal with files in a graphic environment. It
        allows file system browsing, copying, moving and deleting files and
        creating folders. It also allows files of a specific type to be
        associated with an application, and handles opening the file with the
        proper application when the user requests it.</para>

        <para>To show information, the Java File Manager uses the following
        format:</para>

        <programlisting>drw  FileName     FileLength    FileType</programlisting>

        <para>where the first three letters indicate wether the file is a
        directory, is readable and writable. The second column is the name of
        the file, followed by its size and a description of the File Type.
        This way you could have:</para>

        <programlisting>-rw  FileManager.java   1324    Java Source File</programlisting>

        <section>
          <title>The Menu</title>

          <para>Commands are given to Java File Manager mainly through Menus.
          There are:</para>

          <section>
            <title>The File Menu</title>

            <para><emphasis role="bold">Open</emphasis>: Opens the currently
            selected file (or the one nearest the top if more than one are
            selected) with the proper application. If the selected file is a
            directory, updates the file list.</para>

            <para><emphasis role="bold">Create Folder</emphasis>: Creates a
            folder with the specified name.</para>

            <para><emphasis role="bold">Associate</emphasis>: Collects
            information about the application to be associated with the
            selected file. A comment about the file type can also be
            specified.</para>

            <para><emphasis role="bold">Quit</emphasis>: Quit Java File
            Manager.</para>
          </section>

          <section>
            <title>The Edit Menu</title>

            <para><emphasis role="bold">Select All</emphasis>: Selects all
            files in the current directory.</para>

            <para><emphasis role="bold">Cut</emphasis>: Mark selected files to
            be moved to a new directory.</para>

            <para><emphasis role="bold">Copy</emphasis>: Mark selected files
            to be copied to a new directory.</para>

            <para><emphasis role="bold">Paste</emphasis>: Copies or moves the
            marked files, according to if they were copied or cut.</para>

            <para><emphasis role="bold">Delete</emphasis>: Deletes currently
            selected files.</para>
          </section>

          <section>
            <title>The View Menu</title>

            <para><emphasis role="bold">-Order by Name</emphasis>: Orders
            files by Name</para>

            <para><emphasis role="bold">-Order by Type</emphasis>: Order files
            by type</para>

            <para><emphasis role="bold">-Order by length</emphasis>: Order
            file by length</para>
          </section>

          <section>
            <title>The Help Menu</title>

            <para><emphasis role="bold">-Help</emphasis>: Shows this
            message</para>
          </section>
        </section>

        <section>
          <title>The Tool Bar</title>

          <para>The buttons Cut, Copy, Paste and Delete shown in the Toolbar
          are shortcuts for their equivalents in the Edit Menu.</para>
        </section>
      </section>

      <section>
        <title>Chat Viewer</title>

        <para>This program should implement a graphic front end for a chat
        client. It should be able to provide the same functionality as the
        following commands offer, when connected to the chat server developed
        in the assignment 2:</para>

        <programlisting>        list - list all rooms
        nickname - change the username
        join - join a room
        leave - leave a room</programlisting>

        <para>The main window should have a Help button explaining the
        functions and operations. The window must have three areas: one to
        show the messages received from the server, one to show the nickname
        of the users in the active room and one to allow the user to send
        messages.</para>
      </section>
    </section>
  </chapter>
</book>