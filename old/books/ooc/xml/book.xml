<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
"http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">
<book id="ooc">
  <bookinfo>
    <title>Object Oriented Computing</title>

    <author>
      <firstname>Dilvan</firstname>

      <othername>de Abreu</othername>

      <surname>Moreira</surname>

      <email>dilvan@computer.org</email>
    </author>

    <editor>
      <firstname>Dilvan</firstname>

      <surname>Moreira</surname>
    </editor>

    <copyright>
      <year>1998-2009</year>

      <holder>Dilvan Moreira</holder>
    </copyright>

    <edition>First</edition>

    <publisher>
      <publishername>Dilvan Moreira</publishername>

      <address><city>SÃ£o Carlos </city><country>Brazil</country></address>
    </publisher>

    <pubdate>March 1998</pubdate>
  </bookinfo>

  <chapter id="object_oriented_programming">
    <title>Object Oriented Programming</title>

    <section id="object_oriented_programming_semantic_gap">
      <title><ulink url="/dilvan/thesis.phd/objects.html#HEADING1-1">Semantic
      Gap</ulink></title>

      <figure>
        <title>Semantic Gap</title>

        <mediaobject>
          <imageobject>
            <imagedata contentdepth="502px" contentwidth="670px"
                       fileref="img/objects1.gif" format="GIF" />
          </imageobject>
        </mediaobject>
      </figure>

      <section>
        <title>Definition</title>

        <para>The semantic gap is the difference between how completely a
        model represents reality and reality itself.</para>
      </section>

      <section>
        <title>Advantage</title>

        <para>The smaller the gap, the easier the system is to understand and
        modify. Modifications will tend to be local, affecting one or few
        individual items, which are represented by code isolated in
        objects.</para>
      </section>

      <section>
        <title>Why is it important?</title>

        <para>All computer programs represent real objects in a way or
        another.</para>
      </section>

      <section>
        <title>Audio</title>

        <para><ulink url="../audio/Objects1.wav"><inlinegraphic
        fileref="img/asf.gif" format="GIF" />Audio in
        Portuguese</ulink></para>
      </section>
    </section>

    <section id="object_oriented_programming_objects">
      <title>Objects</title>

      <section>
        <title><ulink
        url="/dilvan/thesis.phd/objects.html#HEADING1-7">Object</ulink></title>

        <para>An entity able to save a state (information) and which offers a
        number of operations (behaviours) to either examine or affect this
        state.</para>
      </section>

      <section>
        <title>Object Oriented Model</title>

        <para>It is one where the components of the modelled system are
        represented by a number of objects. These objects usually correspond
        to real life entities, such as a share, an invoice, or a customer.
        Information (states) and operations (behaviours) to each
        object.</para>

        <figure>
          <title>The outside world view of an object</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="352px" contentwidth="448px"
                         fileref="img/objects2.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <table>
          <title>Invoice Object</title>

          <tgroup cols="2">
            <colspec align="center" />

            <thead>
              <row>
                <entry align="center">Invoice Object State</entry>

                <entry align="center">Invoice Object Operations</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>Company to be invoiced</entry>

                <entry>Bill the customer</entry>
              </row>

              <row>
                <entry>Value</entry>

                <entry>Add Taxes</entry>
              </row>

              <row>
                <entry>Taxes Deductions</entry>

                <entry>Change Address</entry>
              </row>

              <row>
                <entry>etc.</entry>

                <entry>etc.</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </section>

      <section>
        <title>What is important?</title>

        <itemizedlist>
          <listitem>
            <para>Information hiding: <phrase>The only part of an object
            accessible from the outside should be its operations, its inside
            should be hidden from the outside world.</phrase></para>
          </listitem>

          <listitem>
            <para>Encapsulation:<phrase>Encapsulating related variables and
            methods into a neat software bundle is a simple yet powerful idea
            that provides two primary benefits to software
            developers.</phrase></para>

            <para><phrase>Advantages:</phrase><itemizedlist>
                <listitem>
                  <para>Information hiding</para>
                </listitem>

                <listitem>
                  <para>Modularity</para>
                </listitem>
              </itemizedlist></para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title>Communication</title>

        <itemizedlist>
          <listitem>
            <para>Message Passing:<phrase>More pure;</phrase></para>
          </listitem>

          <listitem>
            <para>Method calling: <phrase>More efficient .</phrase></para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title>Audio</title>

        <para><ulink url="../audio/Objects2.wav"><inlinegraphic
        fileref="img/asf.gif" format="GIF" />Audio in
        Portuguese</ulink></para>
      </section>
    </section>

    <section id="object_oriented_programming_classes_and_instances">
      <title>Classes and Instances</title>

      <section>
        <title><ulink
        url="/dilvan/thesis.phd/objects.html#HEADING1-16">Classes</ulink></title>

        <para>A class is a definition, a template or a mould to enable the
        creation of new objects and is, therefore, a description of the common
        characteristics of several objects.</para>

        <para>Using the concept of class, characteristics can be associated
        with a whole group of objects. A class can then be described as an
        abstraction that describes all the common characteristics of the
        objects forming part of it.</para>
      </section>

      <section>
        <title>Instances</title>

        <para>An object that belongs to a class is called an instance of that
        class.</para>

        <figure>
          <title>Instances of class Man</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="503px" contentwidth="398px"
                         fileref="img/objects3.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>
      </section>

      <section>
        <title>Audio</title>

        <para><ulink url="../audio/Objects3.wav"><inlinegraphic
        fileref="img/asf.gif" format="GIF" />Audio in
        Portuguese</ulink></para>
      </section>
    </section>

    <section id="object_oriented_programming_inheritance">
      <title><ulink
      url="/dilvan/thesis.phd/objects.html#HEADING1-21">Inheritance</ulink></title>

      <para>When two classes have a lot of common information, this common
      information can be shared by the classes by extracting it and putting it
      in another class. All the common characteristics are collected under one
      specific class and the original classes inherit them from it.</para>

      <figure>
        <title>Classes inheritance</title>

        <mediaobject>
          <imageobject>
            <imagedata contentdepth="525px" contentwidth="384px"
                       fileref="img/objects4.gif" format="GIF" />
          </imageobject>
        </mediaobject>
      </figure>

      <section>
        <title>Advantages</title>

        <itemizedlist>
          <listitem>
            <para>Using inheritance, common descriptions can be reused,
            promoting the concept of code reusability;</para>

            <para>Inheritance cuts redundancy as descendant classes only
            implement the extra information that differentiates them (It leads
            to smaller, easier to understand systems);</para>

            <para>When modifications are implemented on the common information
            all descendant classes automatically inherit it (This helps create
            models that are easier to modify and evolve).</para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title>Audio</title>

        <para><ulink url="../audio/Objects4.wav"><inlinegraphic
        fileref="img/asf.gif" format="GIF" />Audio in
        Portuguese</ulink></para>
      </section>
    </section>

    <section id="object_oriented_programming_polimorphism">
      <title><ulink
      url="/dilvan/thesis.phd/objects.html#HEADING1-27">Polymorphism</ulink></title>

      <para>Polymorphism means that the sender of a message does not need to
      be aware of which class the receiving object belongs to. The receiving
      instance can belong to an arbitrary class .</para>

      <section>
        <title>What is important?</title>

        <para>A sender object needs only to know that another object can
        perform a certain behaviour, not which class it belongs to nor which
        operations will perform that behaviour.</para>
      </section>

      <section>
        <title>Advantage</title>

        <para>Flexible and modification resistant systems can be implemented.
        When a new object from a new class is added, this modification should
        only affect this new object not those who send messages to it.</para>

        <figure>
          <title>Polymorphism</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="403px" contentwidth="432px"
                         fileref="img/object5.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>
      </section>

      <section>
        <title>Audio</title>

        <para><ulink url="../audio/Objects5.wav"><inlinegraphic
        fileref="img/asf.gif" format="GIF" />Audio in
        Portuguese</ulink></para>
      </section>
    </section>
  </chapter>

  <chapter id="java_software">
    <title>The Java Software</title>

    <section id="java_software_introduction">
      <title>Introduction</title>

      <section>
        <title>Introduction</title>

        <itemizedlist>
          <listitem>
            <para>Object Oriented Programming language.</para>
          </listitem>

          <listitem>
            <para>Developed by Sun Microsystems.</para>
          </listitem>

          <listitem>
            <para>Modeled after C++.</para>
          </listitem>

          <listitem>
            <para>Designed to be:</para>

            <itemizedlist>
              <listitem>
                <para>Small and simple.</para>
              </listitem>

              <listitem>
                <para>Portable (Different OSs and architectures).</para>
              </listitem>

              <listitem>
                <para>Distributed over the Internet.</para>
              </listitem>
            </itemizedlist>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title>Goals of the Java Design</title>

        <itemizedlist>
          <listitem>
            <para><emphasis role="bold">Simple, Object Oriented and
            Familiar</emphasis></para>

            <para><emphasis><emphasis>Java is a truly object oriented
            language. It has a set of classes libraries that implement basic
            functionality for basic data types, I/O, network interfacing and
            graphics. Java has a syntax close to the C++ language to ease its
            adoption by designers.</emphasis></emphasis></para>
          </listitem>

          <listitem>
            <para><emphasis role="bold">Portable and Machine
            Independent</emphasis></para>

            <para><emphasis><emphasis>To be portable and run in different OSs,
            the Java compiler generates
            bytecodes.</emphasis></emphasis></para>

            <para><emphasis><emphasis><emphasis role="bold">Bytecode:
            </emphasis>Byte sequence where each byte represents an instruction
            for a virtual machine. Bytecodes are machine independent to allow
            portability across different
            platforms.</emphasis></emphasis></para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title>Audio</title>

        <para><ulink url="../audio/JavaSoftware1.wav"><inlinegraphic
        fileref="img/asf.gif" format="GIF" />Audio in
        Portuguese</ulink></para>
      </section>
    </section>

    <section id="java_software_java_interpreter">
      <title>Java Interpreter</title>

      <section>
        <title>Java Interpreter</title>

        <para>It is a program that interprets the bytecodes and changes the
        states of a simulated virtual machine.</para>

        <para><emphasis role="bold">Java Virtual Machine:</emphasis></para>

        <para>It is a specification for an architecture independent state
        machine. This machine is implemented by the Java Interpreter.</para>

        <para><emphasis role="bold">Runtime Environment:</emphasis></para>

        <para>The support environment attached to the virtual machine. It
        connects the virtual machine to the underlying OS and add many basic
        functions, like I/O, networking, etc.</para>

        <para><emphasis role="bold">Portability:</emphasis></para>

        <para>Java bytecodes can run in any machine that has a Java
        Interpreter running. It is not necessary to recompile the Java
        program. Only the virtual machine and the runtime system need to be
        ported to each architecture.</para>
      </section>

      <section>
        <title>Main Features</title>

        <itemizedlist>
          <listitem>
            <para>Automatic Garbage Collection.</para>
          </listitem>

          <listitem>
            <para>Multithreading with synchronization primitives.</para>
          </listitem>

          <listitem>
            <para>Runtime type checking.</para>
          </listitem>

          <listitem>
            <para>Dynamic linking on demand (even over the Internet).</para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title>Java Basic Libraries</title>

        <para><command>java.lang</command></para>

        <para>The collection of basic classes like Object, Class, String,
        etc.</para>

        <para><command>java.io</command></para>

        <para>I/O classes like Streams, IOStreams, etc.</para>

        <para><command>java.util</command></para>

        <para>Miscellaneous utility classes, like Dictionary, Stack, Date,
        Time, etc.</para>

        <para><command>java.awt</command></para>

        <para>Abstract Windowing Toolkit - Classes to deal with graphics
        (machine independently).</para>
      </section>

      <section>
        <title>Audio</title>

        <para><ulink url="../audio/JavaSoftware2.wav"><inlinegraphic
        fileref="img/asf.gif" format="GIF" />Audio in
        Portuguese</ulink></para>
      </section>
    </section>

    <section id="java_software_differences">
      <title>Differences from C++</title>

      <para><emphasis role="bold">No typedefs, defines or
      preprocessors</emphasis></para>

      <para>There is no <command>typedef</command> command, Java uses only
      classes. There are no <filename>#define</filename> macros, Java uses
      constants. Java does not use header files.</para>

      <para><emphasis role="bold">No structure or union</emphasis></para>

      <para>Java allows only class definitions.</para>

      <para><emphasis role="bold">No functions</emphasis></para>

      <para>Java is a more pure OOP language than C++. It does not allow the
      definition of pure functions only methods attached to classes.</para>

      <para><emphasis role="bold">No multiple inheritance</emphasis></para>

      <para><emphasis role="bold">No goto</emphasis></para>

      <para><emphasis role="bold">No operator overload</emphasis></para>

      <para><emphasis role="bold">No automatic casting</emphasis></para>

      <para><programlisting>    int i;
    double x = 4.567;
    i = x; ERROR

    It needs a casting operation:

    i = (int) x;</programlisting></para>

      <para><emphasis role="bold">No pointers!</emphasis></para>

      <para>Pointers are a great source of hard to find bugs. Even when
      dealing with arrays the Java runtime system checks for index
      problems.</para>

      <section>
        <title>Audio</title>

        <para><ulink url="../audio/JavaSoftware3.wav"><inlinegraphic
        fileref="img/asf.gif" format="GIF" />Audio in
        Portuguese</ulink></para>
      </section>
    </section>

    <section id="java_software_objects_in_java">
      <title>Objects in Java</title>

      <para><emphasis role="bold">State</emphasis> The state of an object is
      defined by its instances variables.</para>

      <para><emphasis role="bold">Behavior</emphasis> An object behavior is
      defined by its methods. They change the state of the object's instance
      variables to create new states. <programlisting>    class Point extends Object {
            public double x;
            public double y;

            Point() {
                    x = 0.0;
                    y = 0.0;
            }

            Point(double x, double y) {
                    this.x = x;
                    this.y = y;
            }
    }</programlisting></para>

      <section>
        <title>Audio</title>

        <para><ulink url="../audio/JavaSoftware4.wav"><inlinegraphic
        fileref="img/asf.gif" format="GIF" />Audio in
        Portuguese</ulink></para>
      </section>
    </section>
  </chapter>

  <chapter id="the_java_language">
    <title>The Java Language</title>

    <section id="the_java_language_variables_and_data_types">
      <title>Variables and Data Types</title>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/java/nutsandbolts/variables.html">Variable
        Types</ulink></title>

        <para>Java is a strongly typed language. It tests type information
        even at runtime.</para>

        <caution>
          <informalfigure>
            <mediaobject>
              <imageobject>
                <imagedata fileref="img/noc++.gif" format="GIF" />
              </imageobject>
            </mediaobject>
          </informalfigure>

          <para>You can not force a type upon a variable as you do in C. The
          following program will result in an error:</para>

          <programlisting>String var1= new String("foo");
URL var2= (URL) var1;</programlisting>
        </caution>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/java/nutsandbolts/datatypes.html">Primitive
        Data Types</ulink></title>

        <para>Primitive types contain a single value and include types such as
        integer, floating point, character, and boolean. The following table
        lists, by keyword, all of the primitive data types supported by Java,
        their size and format, and a brief description of each.</para>

        <table>
          <title>Primitive Data Types</title>

          <tgroup cols="3">
            <colspec align="center" />

            <thead>
              <row>
                <entry align="center">Type</entry>

                <entry align="center">Size/Format</entry>

                <entry align="center">Description</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>byte</entry>

                <entry>8-bit two's complement</entry>

                <entry>Byte-length integer</entry>
              </row>

              <row>
                <entry>short</entry>

                <entry>16-bit two's complement</entry>

                <entry>Short integer</entry>
              </row>

              <row>
                <entry>int</entry>

                <entry>32-bit two's complement</entry>

                <entry>Integer</entry>
              </row>

              <row>
                <entry>long</entry>

                <entry>64-bit two's complement</entry>

                <entry>Long integer</entry>
              </row>

              <row>
                <entry>float</entry>

                <entry>32-bit IEEE 754</entry>

                <entry>Single-precision floating point</entry>
              </row>

              <row>
                <entry>double</entry>

                <entry>64-bit IEEE 754</entry>

                <entry>Double-precision floating point</entry>
              </row>

              <row>
                <entry>char</entry>

                <entry>16-bit Unicode character</entry>

                <entry>A single character</entry>
              </row>

              <row>
                <entry>boolean</entry>

                <entry>true or false</entry>

                <entry>A boolean value (true or false)</entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <para><ulink url="../audio/JavaLang1.wav"><inlinegraphic
        fileref="img/asf.gif" format="GIF" />Audio in
        Portuguese</ulink></para>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/java/nutsandbolts/variables.html">Reference
        Data Types</ulink></title>

        <para>Reference types are called such because the value of a reference
        variable is a reference (a pointer in other terminology) to the actual
        value or set of values represented by the variable.</para>

        <figure>
          <title>Pointers in Java</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="342px" contentwidth="413px"
                         fileref="img/javalang1.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <section>
          <title>Evaluation</title>

          <para>When used in a statement or expression, the name args
          evaluates to the address of the memory location where the array
          lives. This is in contrast to the name of a primitive variable, the
          count variable, which evaluates to the variable's actual
          value.</para>

          <caution>
            <informalfigure>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="img/noc++.gif" format="GIF" />
                </imageobject>
              </mediaobject>
            </informalfigure>

            <para>The following C types are not supported by Java:</para>

            <para>Pointer, Struct, Union</para>
          </caution>

          <para><ulink url="../audio/JavaLang2.wav"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/java/nutsandbolts/variableNames.html">Variable
        Names</ulink></title>

        <para>In Java, a variable name:</para>

        <itemizedlist>
          <listitem>
            <para>must be a legal Java identifier comprised of a series of
            Unicode characters. This is important so that programmers can
            write code that is meaningful in their native languages;</para>
          </listitem>

          <listitem>
            <para>must not be the same as a keyword or a boolean literal (true
            or false);</para>
          </listitem>

          <listitem>
            <para>must not have the same name as another variable whose
            declaration appears in the same scope.</para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/java/nutsandbolts/scope.html">Scope</ulink></title>

        <para>A variable's scope is the block of code within which the
        variable is accessible. Also, a variable's scope determines when the
        variable is created and destroyed. Scope places a variable into one of
        these four categories:</para>

        <itemizedlist>
          <listitem>
            <para>member variable;</para>
          </listitem>

          <listitem>
            <para>local variable</para>
          </listitem>

          <listitem>
            <para>method parameter</para>
          </listitem>

          <listitem>
            <para>exception handler parameter</para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/java/nutsandbolts/variableInitialization.html">Variable
        Initialization</ulink></title>

        <para>Local variables and member variables can be initialized when
        they are declared:</para>

        <programlisting>int count = 0;</programlisting>
      </section>

      <section>
        <title>Reference type Initialization</title>

        <para>A reference type when is created its pointer is initialized to
        NULL.</para>

        <para>All of them must be initialized before use:</para>

        <programlisting>String name= new String("Java");</programlisting>

        <para>or</para>

        <programlisting>String name;
name= new String("Java");</programlisting>

        <caution>
          <informalfigure>
            <mediaobject>
              <imageobject>
                <imagedata fileref="img/noc++.gif" format="GIF" />
              </imageobject>
            </mediaobject>
          </informalfigure>

          <para>Objects in Java have to be always explicit created using the
          command new.</para>
        </caution>

        <para><ulink url="../audio/JavaLang3.wav"><inlinegraphic
        fileref="img/asf.gif" format="GIF" />Audio in
        Portuguese</ulink></para>
      </section>
    </section>

    <section id="the_java_language_operators">
      <title><ulink
      url="http://java.sun.com/docs/books/tutorial/java/nutsandbolts/operators.html">Operators</ulink></title>

      <para>Operators perform some function on either one or two
      operands.</para>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/java/nutsandbolts/arithmetic.html">Arithmetic
        Operators</ulink></title>

        <table>
          <title>Arithmetic Operators</title>

          <tgroup cols="3">
            <colspec align="center" />

            <thead>
              <row>
                <entry align="center">Operator</entry>

                <entry align="center">Use</entry>

                <entry align="center">Description</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>+</entry>

                <entry>op1 + op2</entry>

                <entry>Adds op1 and op2</entry>
              </row>

              <row>
                <entry>-</entry>

                <entry>op1 - op2</entry>

                <entry>Subtracts op2 from op1</entry>
              </row>

              <row>
                <entry>*</entry>

                <entry>op1 * op2</entry>

                <entry>Multiplies op1 and op2</entry>
              </row>

              <row>
                <entry>/</entry>

                <entry>op1 / op2</entry>

                <entry>Divides op1 by op2</entry>
              </row>

              <row>
                <entry>%</entry>

                <entry>op1 % op2</entry>

                <entry>Computes the remainder of dividing op1 by op2</entry>
              </row>

              <row>
                <entry>+</entry>

                <entry>+ op</entry>

                <entry>Indicates a positive value</entry>
              </row>

              <row>
                <entry>-</entry>

                <entry>- op</entry>

                <entry>Arithmetically negates op</entry>
              </row>

              <row>
                <entry>++</entry>

                <entry>op ++</entry>

                <entry>Increments op by 1; Eval before incrementing</entry>
              </row>

              <row>
                <entry>++</entry>

                <entry>++ op</entry>

                <entry>Increments op by 1; Eval after incrementing</entry>
              </row>

              <row>
                <entry>--</entry>

                <entry>op --</entry>

                <entry>Decrements op by 1; Eval before decrementing</entry>
              </row>

              <row>
                <entry>--</entry>

                <entry>-- op</entry>

                <entry>Decrements op by 1; Eval after decrementing</entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <caution>
          <informalfigure>
            <mediaobject>
              <imageobject>
                <imagedata fileref="img/noc++.gif" format="GIF" />
              </imageobject>
            </mediaobject>
          </informalfigure>

          <para>The Java language extends the definition of the operator + to
          include string concatenation.</para>
        </caution>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/java/nutsandbolts/relational.html">Relational
        Operators</ulink></title>

        <table>
          <title>Relational Operators</title>

          <tgroup cols="3">
            <colspec align="center" />

            <thead>
              <row>
                <entry align="center">Operator</entry>

                <entry align="center">Use</entry>

                <entry>Returns true if</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>&gt;</entry>

                <entry>op1 &gt; op2</entry>

                <entry>op1 is greater than op2</entry>
              </row>

              <row>
                <entry>&gt;=</entry>

                <entry>op1 &gt;= op2</entry>

                <entry>op1 is greater than or equal to op2</entry>
              </row>

              <row>
                <entry>&lt;</entry>

                <entry>op1 &lt; op2</entry>

                <entry>op1 is less than to op2</entry>
              </row>

              <row>
                <entry>&lt;=</entry>

                <entry>op1 &lt;= op2</entry>

                <entry>op1 is less than or equal to op2</entry>
              </row>

              <row>
                <entry>==</entry>

                <entry>op1 == op2</entry>

                <entry>op1 and op2 are equal</entry>
              </row>

              <row>
                <entry>!=</entry>

                <entry>op1 != op2</entry>

                <entry>op1 and op2 are not equal</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/java/nutsandbolts/relational.html">Conditional
        Operators</ulink></title>

        <table>
          <title>Conditional Operators</title>

          <tgroup cols="3">
            <colspec align="center" />

            <thead>
              <row>
                <entry align="center">Operator</entry>

                <entry align="center">Use</entry>

                <entry>Returns true if</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>&amp;&amp;</entry>

                <entry>op1 &amp;&amp; op2</entry>

                <entry>op1 and op2 are both true</entry>
              </row>

              <row>
                <entry>||</entry>

                <entry>op1 || op2</entry>

                <entry>op1 or op2 is true</entry>
              </row>

              <row>
                <entry>!</entry>

                <entry>! op</entry>

                <entry>op is false</entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <para><ulink url="../audio/JavaLang4.wav"><inlinegraphic
        fileref="img/asf.gif" format="GIF" />Audio in
        Portuguese</ulink></para>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/java/nutsandbolts/bitwise.html">Bitwise
        Operators</ulink></title>

        <table>
          <title>Bitwise Operators</title>

          <tgroup cols="3">
            <colspec align="center" />

            <thead>
              <row>
                <entry align="center">Operator</entry>

                <entry align="center">Use</entry>

                <entry align="center">Operation</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>&gt;&gt;</entry>

                <entry>op1 &gt;&gt; op2</entry>

                <entry>shift bits of op1 right by distance op2</entry>
              </row>

              <row>
                <entry>&lt;&lt;</entry>

                <entry>op1 &lt;&lt; op2</entry>

                <entry>shift bits of op1 left by distance op2</entry>
              </row>

              <row>
                <entry>&gt;&gt;&gt;</entry>

                <entry>op1 &gt;&gt;&gt; op2</entry>

                <entry>shift bits of op1 right by distance op2
                (unsigned)</entry>
              </row>

              <row>
                <entry>&amp;</entry>

                <entry>op1 &amp; op2</entry>

                <entry>bitwise and</entry>
              </row>

              <row>
                <entry>|</entry>

                <entry>op1 | op2</entry>

                <entry>bitwise or</entry>
              </row>

              <row>
                <entry>^</entry>

                <entry>op1 ^ op2</entry>

                <entry>bitwise xor</entry>
              </row>

              <row>
                <entry>~</entry>

                <entry>~ op</entry>

                <entry>bitwise complement</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/java/nutsandbolts/assignment.html">Assignment
        Operator</ulink></title>

        <para>You use the assignment operator, =, to assign one value to
        another.</para>

        <caution>
          <informalfigure>
            <mediaobject>
              <imageobject>
                <imagedata fileref="img/noc++.gif" format="GIF" />
              </imageobject>
            </mediaobject>
          </informalfigure>

          <para>The assignment operator just changes the pointer of Reference
          variables.</para>
        </caution>

        <para>The code:</para>

        <programlisting>StringBuffer car1 = new StringBuffer("Toyota");
StringBuffer car2 = new StringBuffer("Ford");</programlisting>

        <para>Results in the following memory structures:</para>

        <figure>
          <title>Memory Structure: 2 pointers</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="202px" contentwidth="330px"
                         fileref="img/javalang2.gif" />
            </imageobject>
          </mediaobject>
        </figure>

        <para>If the Assignment operator is used:</para>

        <programlisting>car2 = car1;</programlisting>

        <para>The car2 variable is pointed to the same object as car1
        variable:</para>

        <figure>
          <title>Memory Structure: Same pointer</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="200px" contentwidth="330px"
                         fileref="img/javalang3.gif" />
            </imageobject>
          </mediaobject>
        </figure>

        <para>A common source of mistakes is to think that car2 holds a copy
        of the object in car1 and to change it not expecting this to affect
        the object held by car1.</para>

        <para><ulink url="../audio/JavaLang5.wav"><inlinegraphic
        fileref="img/asf.gif" format="GIF" />Audio in
        Portuguese</ulink></para>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/java/nutsandbolts/opsummary.html">Short
        Cuts for the Assignment operator</ulink></title>

        <table>
          <title>Short Cut for the Assignment Operator</title>

          <tgroup cols="3">
            <colspec align="center" />

            <thead>
              <row>
                <entry align="center">Operator</entry>

                <entry align="center">Use</entry>

                <entry align="center">Equivalent to</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>+=</entry>

                <entry>op1 += op2</entry>

                <entry>op1 = op1 + op2</entry>
              </row>

              <row>
                <entry>-=</entry>

                <entry>op1 -= op2</entry>

                <entry>op1 = op1 - op2</entry>
              </row>

              <row>
                <entry>*=</entry>

                <entry>op1 *= op2</entry>

                <entry>op1 = op1 * op2</entry>
              </row>

              <row>
                <entry>/=</entry>

                <entry>op1 /= op2</entry>

                <entry>op1 = op1 / op2</entry>
              </row>

              <row>
                <entry>-=</entry>

                <entry>op1 -= op2</entry>

                <entry>op1 = op1 - op2</entry>
              </row>

              <row>
                <entry>|=</entry>

                <entry>op1 |= op2</entry>

                <entry>op1 = op1 | op2</entry>
              </row>

              <row>
                <entry>^=</entry>

                <entry>op1 ^= op2</entry>

                <entry>op1 = op1 ^ op2</entry>
              </row>

              <row>
                <entry>&lt;&lt;=</entry>

                <entry>op1 &lt;&lt;= op2</entry>

                <entry>op1 = op1 &lt;&lt; op2</entry>
              </row>

              <row>
                <entry>&gt;&gt;=</entry>

                <entry>op1 &gt;&gt;= op2</entry>

                <entry>op1 = op1 &gt;&gt; op2</entry>
              </row>

              <row>
                <entry>&gt;&gt;&gt;=</entry>

                <entry>op1 &gt;&gt;&gt;= op2</entry>

                <entry>op1 = op1 &gt;&gt;&gt; op2</entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <para><ulink url="../audio/JavaLang6.wav"><inlinegraphic
        fileref="img/asf.gif" format="GIF" />Audio in
        Portuguese</ulink></para>
      </section>
    </section>

    <section id="the_java_language_expressions_and_control_flow_statements">
      <title>Expressions and Control Flow Statements</title>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/java/nutsandbolts/expressions.html">Expressions</ulink></title>

        <para>Expressions are used to compute and assign values to variables
        and to help control the execution flow of a program. The job of an
        expression is two-fold: perform the computation indicated by the
        elements of the expression and return some value.</para>

        <para>Definition:</para>

        <para>An expression is a series of variables, operators, and method
        calls (constructed according to the syntax of the language) that
        evaluates to a single value. For example:</para>

        <programlisting>count++; 
System.in.read() != -1;</programlisting>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/java/nutsandbolts/flow.html">Control
        Flow Statements</ulink></title>

        <para>Statements that change the flow of execution of a
        program.</para>

        <table>
          <title>Control Flow Statements</title>

          <tgroup cols="2">
            <colspec align="center" />

            <thead>
              <row>
                <entry align="center">Statement</entry>

                <entry align="center">Keyword</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>decision making</entry>

                <entry>if-else, switch-case</entry>
              </row>

              <row>
                <entry>loop</entry>

                <entry>for, while, do-while</entry>
              </row>

              <row>
                <entry>exception</entry>

                <entry>try-catch-finally, throw</entry>
              </row>

              <row>
                <entry>miscellaneous</entry>

                <entry>break, continue, label:, return</entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <section>
          <title><ulink
          url="http://java.sun.com/docs/books/tutorial/java/nutsandbolts/while.html">While
          Statement</ulink></title>

          <para>A while statement performs some action while a certain
          condition remains true.</para>

          <programlisting>while (expression)
    statement;</programlisting>

          <para>Example:</para>

          <programlisting>. . .
while (System.in.read() != -1) {
    count++;
    System.out.println("Read a character. Count = " + count);
}
. . .</programlisting>

          <para><emphasis><inlinegraphic fileref="img/asf.gif"
          format="GIF" />Audio in Portuguese</emphasis></para>
        </section>

        <section>
          <title><ulink
          url="http://java.sun.com/docs/books/tutorial/java/nutsandbolts/if.html">If-else
          Statement</ulink></title>

          <para>The if-else statement provides your programs with the ability
          to selectively execute other statements based on some
          criteria.</para>

          <programlisting>if (expression)
    statement;</programlisting>

          <para>Example:</para>

          <programlisting>. . .
if (response == OK) {
  // code to perform OK action
} else {
  // code to perform Cancel action
}</programlisting>
        </section>

        <section>
          <title><ulink
          url="http://java.sun.com/docs/books/tutorial/java/nutsandbolts/switch.html">Switch
          Statement</ulink></title>

          <para>The switch statement conditionally perform statements based on
          some expression.</para>

          <para>Example:</para>

          <programlisting>. . .
switch (month) {
case 1:  System.out.println("January"); break;
case 2:  System.out.println("February"); break;
  ...
case 11: System.out.println("November"); break;
case 12: System.out.println("December"); break;
default: System.out.println("Hey, that's not a valid month!");
    break;
}</programlisting>
        </section>

        <section>
          <title><ulink
          url="http://java.sun.com/docs/books/tutorial/java/nutsandbolts/for.html">For
          Statement</ulink></title>

          <para>Use the for loop when you know the constraints of the loop
          (its initialization instruction, termination criteria, and increment
          instruction).</para>

          <programlisting>for (initialization; termination; increment)
    statement;</programlisting>

          <para>Example:</para>

          <programlisting>. . .
for (int i = 0; i &lt; a.length; i++) {
    // do something to the i th element of a
}</programlisting>

          <para><emphasis><inlinegraphic fileref="img/asf.gif"
          format="GIF" />Audio in Portuguese</emphasis></para>
        </section>

        <section>
          <title><ulink
          url="http://java.sun.com/docs/books/tutorial/java/nutsandbolts/while.html">Do-while
          Statement</ulink></title>

          <para>The do-while loop is similar to the while loop except that the
          expression is evaluated at the bottom of the loop:</para>

          <programlisting>do {
    statements
} while (booleanExpression);</programlisting>

          <para>Example:</para>

          <programlisting>. . .
do {
    c = in.read();
    . . .
} while (c != -1);</programlisting>
        </section>

        <section>
          <title><ulink
          url="http://java.sun.com/docs/books/tutorial/java/nutsandbolts/branch.html">Continue
          and Break Statements</ulink></title>

          <para>Continue and break statements are used to continue or break
          loops or switch statements. Used without labels, they have the same
          effects as in C.</para>

          <para>To continue or break multiple-nested loop or switch
          statements, labels can be placed on loop and switch statements and
          used to break out or continue to the blocks named by them. For
          instance (from the String class):</para>

          <programlisting>test: for (int i = fromIndex; i+max1&lt;=max2; i++) {
          if (chartAt(i)==c0){
              for (int k=1; k&lt;max1; k++) {
                  if (chartAt(i+k) != str.chartAt(k)) {
                      continue test;
                  }
              }      /* end of inner for loop */
          }
      }              /* end of outer for loop */</programlisting>

          <caution>
            <informalfigure>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="img/noc++.gif" format="GIF" />
                </imageobject>
              </mediaobject>
            </informalfigure>

            <para>Labeled continues and breaks are an alternative to the goto
            statement which is not supported by Java.</para>
          </caution>
        </section>

        <section>
          <title><ulink
          url="http://java.sun.com/docs/books/tutorial/java/nutsandbolts/branch.html#return">Return
          Statement</ulink></title>

          <para>Return exits from the current method and jump back to the
          statement within the calling method that follows the original method
          call.</para>

          <para>Example:</para>

          <programlisting>return ++count;</programlisting>
        </section>

        <section>
          <title><ulink
          url="http://java.sun.com/docs/books/tutorial/java/nutsandbolts/exception.html">Exception
          Handling Statements</ulink></title>

          <para>The calling method can use the try, catch, and finally to
          catch and handle exceptions. It will be seen together with <ulink
          url="/library/books/tutorial1.02/java/exceptions/index.html">Exceptions</ulink>.</para>

          <para><ulink url="../audio/JavaLang9.wav"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>
    </section>

    <section id="the_java_language_arrays">
      <title><ulink
      url="http://java.sun.com/docs/books/tutorial/java/data/arrays.html">Arrays</ulink></title>

      <para>An array in Java is a real object with a runtime representation.
      You can declare and allocate arrays of any type, and arrays of arrays
      (to get multi-dimension arrays). But arrays do not belong to a Java
      class, they are special objects.</para>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/java/data/arraybasics.html">Declaration</ulink></title>

        <programlisting>int[] foo;</programlisting>
      </section>

      <section>
        <title>Initialization:</title>

        <para>Like any other reference variable, after declaring an array
        memory has to be allocated to it. Arrays can contain any legal Java
        data type:</para>

        <programlisting>foo= new int[40];</programlisting>
      </section>

      <section>
        <title>Out of bounds:</title>

        <para>Java arrays automatically test for index out of bounds errors.
        It throws the IndexOutOfBoundsException if one happens.</para>
      </section>

      <section>
        <title>The length property:</title>

        <para>Length is a property provided for all Java arrays, it retrieves
        the current length of the array:</para>

        <programlisting>System.out.println(foo.length);</programlisting>

        <para><ulink url="../audio/JavaLang10.wav"><inlinegraphic
        fileref="img/asf.gif" format="GIF" />Audio in
        Portuguese</ulink></para>
      </section>
    </section>
  </chapter>

  <chapter id="oop_in_java">
    <title>OOP in Java</title>

    <section id="oop_in_java_objetcs">
      <title><ulink
      url="http://java.sun.com/docs/books/tutorial/java/data/objects.html">Objects</ulink></title>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/java/data/objectcreation.html">Instantiating
        an Object (the new operator)</ulink></title>

        <para>The new operator instantiates a class by allocating memory for a
        new object of that type. It requires a single argument: a call to a
        constructor method. Constructor methods are special methods provided
        by each Java class that are responsible for initializing new objects
        of that type.</para>

        <note>
          <para>The new operator creates the object, the constructor
          initializes it.</para>
        </note>

        <para>The new operator returns a reference to the newly created
        object. This reference can be assigned to a variable of the
        appropriate type.</para>

        <programlisting>Rectangle rect = new Rectangle(0, 0, 100, 200);</programlisting>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/java/data/usingobject.html">Using
        Objects</ulink></title>

        <para>There are two ways to change the state of an object:</para>

        <itemizedlist>
          <listitem>
            <para>Manipulate the object's variables directly;</para>
          </listitem>

          <listitem>
            <para>Call one of the object's methods.</para>
          </listitem>
        </itemizedlist>

        <para>The second option is more object-oriented and safer because you
        manipulate the object's variables indirectly through its protective
        layer of methods rather than twiddling directly with them.</para>

        <para>Manipulating an object's variables directly is often considered
        error-prone; you could potentially put the object into an inconsistent
        state.</para>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/java/data/usingobject.html">Referencing
        an Object's Variables</ulink></title>

        <para>To access an object's variables, simply append the variable name
        to an object reference with an intervening '.' (period).</para>

        <programlisting>objectReference.variable</programlisting>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/java/data/usingobject.html">Calling
        an Object's Methods</ulink></title>

        <para>Calling an object's method is similar to getting an object's
        variable. To call an object's method, simply append the method name to
        an object reference with an intervening '.' (period), and provide any
        arguments to the method within enclosing parentheses. If the method
        does not require any arguments, just use empty parentheses.</para>

        <programlisting>objectReference.methodName(argumentList);</programlisting>

        <para>or</para>

        <programlisting>objectReference.methodName();</programlisting>

        <para><ulink url="../audio/OOPJava1.wav"><inlinegraphic
        fileref="img/asf.gif" format="GIF" />Audio in
        Portuguese</ulink></para>
      </section>
    </section>

    <section id="oop_in_java_classes">
      <title><ulink
      url="http://java.sun.com/docs/books/tutorial/java/javaOO/classes.html">Classes</ulink></title>

      <para>A class is a blueprint or prototype that you can use to create
      many objects.</para>

      <programlisting>classDeclaration { 
  memberVariableDeclarations
  methodDeclarations 
}</programlisting>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/java/javaOO/classdecl.html">The
        Class Declaration</ulink></title>

        <para>At minimum, a class declaration must contain the class keyword
        and the name of the class that you are defining:</para>

        <programlisting>class NameOfClass {
    . . .
}</programlisting>

        <section>
          <title>Declaring a Class's Superclass</title>

          <para>In Java, every class has a superclass. If you do not specify a
          superclass for your class, it is assumed to be the Object class
          (declared in java.lang).</para>

          <programlisting>class NameOfClass extends SuperClassName {
    . . .
}</programlisting>

          <para>A subclass inherits variables and methods from its
          superclass.</para>
        </section>

        <section>
          <title>Listing the Interfaces Implemented by a Class</title>

          <para>An interface declares a set of methods and constants without
          specifying the implementation for any of the methods. When a class
          claims to implement an interface, it's claiming to provide
          implementations for all of the methods declared in the
          interface.</para>

          <programlisting>class ImaginaryNumber extends Number implements Arithmetic {
    . . .
}</programlisting>
        </section>

        <section>
          <title>Summary of a Class Declaration</title>

          <programlisting>[ modifiers ] class ClassName [ extends SuperClassName ] [ implements InterfaceNames ] {
    . . .
}</programlisting>

          <itemizedlist>
            <listitem>
              <para>modifiers declare whether the class is public, abstract,
              or final</para>
            </listitem>

            <listitem>
              <para>ClassName sets the name of the class you are
              declaring</para>
            </listitem>

            <listitem>
              <para>SuperClassName is the name of ClassName's
              superclass</para>
            </listitem>

            <listitem>
              <para>InterfaceNames is a comma-delimited list of the interfaces
              implemented</para>
            </listitem>
          </itemizedlist>

          <para><ulink url="../audio/OOPJava2.wav"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/java/javaOO/variables.html">Declaring
        Member Variables</ulink></title>

        <programlisting>class IntegerClass {
  int anInteger;
  . . . // define methods here . . .
}</programlisting>

        <caution>
          <informalfigure>
            <mediaobject>
              <imageobject>
                <imagedata fileref="img/noc++.gif" format="GIF" />
              </imageobject>
            </mediaobject>
          </informalfigure>

          <para>A member variable and a method can have the same name.</para>
        </caution>

        <para>In short, a member variable declaration looks like this:</para>

        <programlisting>[accessSpecifier] [static] [final] type variableName</programlisting>

        <itemizedlist>
          <listitem>
            <para>accessSpecifier defines which other classes have access to
            the variable. You control access to methods using the same
            specifiers, so Controlling Access to Members of a Class covers how
            you can control access to both member variables and
            methods.</para>
          </listitem>

          <listitem>
            <para>static indicates that the variable is a class member
            variable as opposed to an instance member variable. You also use
            static to declare class methods. Instance and Class Members talks
            about declaring instance and class variables and writing instance
            and class methods.</para>
          </listitem>
        </itemizedlist>

        <section>
          <title>Declaring Constants</title>

          <programlisting>class Avo {
  final double AVOGADRO = 6.023e23;
}</programlisting>
        </section>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/java/javaOO/methods.html">The
        Method Declaration</ulink></title>

        <programlisting>returnType methodName() {
      . . . 
}</programlisting>

        <section>
          <title><ulink
          url="http://java.sun.com/docs/books/tutorial/java/javaOO/arguments.html">Passing
          Information into a Method</ulink></title>

          <caution>
            <informalfigure>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="img/noc++.gif" format="GIF" />
                </imageobject>
              </mediaobject>
            </informalfigure>

            <para>In Java methods arguments are passed only by value.</para>
          </caution>

          <section>
            <title><ulink
            url="http://java.sun.com/docs/books/tutorial/java/javaOO/methodbody.html">The
            Method Body</ulink></title>

            <programlisting>. . .
boolean isEmpty() {
    if (topelement == STACK_EMPTY)
            return true;
    else
            return false;
}</programlisting>

            <para><ulink url="../audio/OOPJava3.wav"><inlinegraphic
            fileref="img/asf.gif" format="GIF" />Audio in
            Portuguese</ulink></para>
          </section>
        </section>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/java/javaOO/accesscontrol.html">Controlling
        Access to Members of a Class</ulink></title>

        <table frame="none">
          <title>Access to Members of a Class</title>

          <tgroup cols="5">
            <colspec align="center" />

            <thead>
              <row>
                <entry align="center">Specifier</entry>

                <entry align="center">class</entry>

                <entry align="center">subclass</entry>

                <entry align="center">package</entry>

                <entry align="center">world</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry align="left">private</entry>

                <entry align="center">X</entry>

                <entry align="center"></entry>

                <entry align="center"></entry>

                <entry align="center"></entry>
              </row>

              <row>
                <entry align="left">protected</entry>

                <entry align="center">X</entry>

                <entry align="center">X</entry>

                <entry align="center">X</entry>

                <entry align="center"></entry>
              </row>

              <row>
                <entry align="left">public</entry>

                <entry align="center">X</entry>

                <entry align="center">X</entry>

                <entry align="center">X</entry>

                <entry align="center">X</entry>
              </row>

              <row>
                <entry align="left">package</entry>

                <entry align="center">X</entry>

                <entry align="center"></entry>

                <entry align="center">X</entry>

                <entry align="center"></entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <section>
          <title><ulink
          url="http://java.sun.com/docs/books/tutorial/java/javaOO/accesscontrol.html">Private</ulink></title>

          <para>The most restrictive access level is private. A private member
          is accessible only to the class in which it is defined.</para>

          <programlisting>class Alpha {
    private int iamprivate;
    private void privateMethod() {
        System.out.println("privateMethod");
    }
}
class Beta {
    void accessMethod() {
        Alpha a = new Alpha();
        a.iamprivate = 10;      // illegal
        a.privateMethod();      // illegal
    }
}</programlisting>
        </section>

        <section>
          <title><ulink
          url="http://java.sun.com/docs/books/tutorial/java/javaOO/accesscontrol.html">Protected</ulink></title>

          <para>It allows the class itself, subclasses, and all classes in the
          same package to access the members.</para>

          <programlisting>package Greek;
public class Alpha {
    protected int iamprotected;
    protected void protectedMethod() {
        System.out.println("protectedMethod");
    }
}
package Greek;
class Gamma {
    void accessMethod() {
        Alpha a = new Alpha();
        a.iamprotected = 10;    // legal
        a.protectedMethod();    // legal
    }
}
package Latin;
class Delta extends Alpha {
    void accessMethod(Alpha a, Delta d) {
        a.iamprotected = 10; a.protectedMethod();   // illegal
        d.iamprotected = 10; d.protectedMethod();   // legal
    }
}</programlisting>

          <para><emphasis><inlinegraphic fileref="img/asf.gif"
          format="GIF" />Audio in Portuguese</emphasis></para>
        </section>

        <section>
          <title><ulink
          url="http://java.sun.com/docs/books/tutorial/java/javaOO/accesscontrol.html">Public</ulink></title>

          <para>Any class, in any package, has access to a class's public
          members.</para>

          <programlisting>package Greek;

public class Alpha {
    public int iampublic;
    public void publicMethod() {
        System.out.println("publicMethod");
    }
}
import Greek.*;

package Roman;

class Beta {
    void accessMethod() {
        Alpha a = new Alpha();
        a.iampublic = 10;       // legal
        a.publicMethod();       // legal
    }
}</programlisting>
        </section>

        <section>
          <title><ulink
          url="http://java.sun.com/docs/books/tutorial/java/javaOO/accesscontrol.html">Package-Access</ulink></title>

          <para>The last access level is what you get if you don't explicitly
          set a member's access to one of the other levels. This access level
          allows classes in the same package as your class to access the
          members.</para>

          <programlisting>package Greek;

class Alpha {
    int iampackage;
    void packageMetho() {
        System.out.println("packageMethod");
    }
}
package Greek;

class Beta {
    void accessMethod() {
        Alpha a = new Alpha();
        a.iampackage = 10;     // legal
        a.packageMethod();     // legal
    }
}</programlisting>

          <para><ulink url="../audio/OOPJava5.wav"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>

      <section>
        <title><ulink type=""
        url="http://java.sun.com/docs/books/tutorial/java/javaOO/constructors.html">Constructors</ulink></title>

        <para>Constructors create objects from the class blueprint.</para>

        <para>They look like normal methodsâexcept:</para>

        <itemizedlist>
          <listitem>
            <para>They use the name of the class and</para>
          </listitem>

          <listitem>
            <para>have no return type.</para>
          </listitem>
        </itemizedlist>

        <para>For example, <command>Bicycle</command> has one
        constructor:</para>

        <programlisting>public class Bicycle {

    <emphasis>// the Bicycle class has three fields</emphasis>
    public int cadence;
    public int gear;
    public int speed;

    <emphasis>// the Bicycle class has one constructor</emphasis>
    public Bicycle(int startCadence, int startSpeed, int startGear) {
        gear = startGear;
        cadence = startCadence;
        speed = startSpeed;
    }
...
}</programlisting>

        <para>To create a new <computeroutput>Bicycle</computeroutput> object
        called <computeroutput>myBike</computeroutput>, a constructor is
        called by the new operator:</para>

        <programlisting>Bicycle myBike = new Bicycle(30, 0, 8);</programlisting>

        <para>new<computeroutput> Bicycle(30, 0, 8)</computeroutput> creates
        space in memory for the object and initializes its fields.</para>

        <para><computeroutput>Bicycle</computeroutput> could have others,
        including a no-argument constructor:</para>

        <programlisting>public Bicycle() {
       gear = 1;
       cadence = 10;
       speed = 0;
}</programlisting>
      </section>
    </section>

    <section id="oop_in_java_subclasses_and_inheritance">
      <title><ulink
      url="http://java.sun.com/docs/books/tutorial/java/concepts/inheritance.html">Subclasses
      and Inheritance</ulink></title>

      <para>The derived class is called a subclass. The class from which its
      derived is called the superclass.</para>

      <figure>
        <title>Subclass</title>

        <mediaobject>
          <imageobject>
            <imagedata contentdepth="138px" contentwidth="314px"
                       fileref="img/OOPjava1.gif" format="GIF" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>In Java all classes must be derived from some class. The top-most
      class, the class from which all other classes are derived, is the Object
      class defined in java.lang:</para>

      <figure>
        <title>Inheritance</title>

        <mediaobject>
          <imageobject>
            <imagedata contentdepth="314px" contentwidth="612px"
                       fileref="img/OOPjava2.gif" format="GIF" />
          </imageobject>
        </mediaobject>
      </figure>

      <section>
        <title>Definition</title>

        <para>A subclass is a class that derives from another class. It
        subclass inherits state and behavior in the form of variables and
        methods from all of its ancestors. It can just use the items inherited
        from its superclass as is, or the subclass can modify or override it.
        So, as you drop down in the hierarchy, the classes become more and
        more specialized.</para>

        <para><ulink url="../audio/OOPJava6.wav"><inlinegraphic
        fileref="img/asf.gif" format="GIF" />Audio in
        Portuguese</ulink></para>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/java/javaOO/subclass.html">Creating
        Subclasses</ulink></title>

        <para>To declare a subclass you would write:</para>

        <programlisting>class SubClass extends SuperClass { . . . }</programlisting>

        <caution>
          <informalfigure>
            <mediaobject>
              <imageobject>
                <imagedata fileref="img/noc++.gif" format="GIF" />
              </imageobject>
            </mediaobject>
          </informalfigure>

          <para>A Java class can have only one direct superclass. Java does
          not support multiple inheritance.</para>
        </caution>

        <section>
          <title>Seen Hidden Member Variables</title>

          <para>Member variables defined in the subclass hide member variables
          of the same name in the superclass. Consider this superclass and
          subclass pair:</para>

          <programlisting>class Super {
    Number aNumber;
}
class Sub extends Super {
    Float aNumber;
}
super.aNumber</programlisting>
        </section>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/java/javaOO/override.html">Overriding
        Methods</ulink></title>

        <para>A subclass can either completely override the implementation for
        an inherited method or the subclass can enhance the method by adding
        functionality to it.</para>

        <itemizedlist>
          <listitem>
            <para>Replacing a Superclass's Method Implementation</para>
          </listitem>

          <listitem>
            <para>Adding to a Superclass's Method Implementation</para>
          </listitem>

          <listitem>
            <para>Methods a Subclass Cannot Override</para>

            <programlisting>class ChessAlgorithm {
   . . .
   final void nextMove(ChessPiece piece) {...}
   static void mate(ChessPiece piece) {...}
   . . .
}</programlisting>
          </listitem>

          <listitem>
            <para>Methods a Subclass Must Override</para>

            <programlisting>abstract class GraphicObject {
   . . .
   abstract void draw();
   . . .
}</programlisting>
          </listitem>
        </itemizedlist>

        <para><ulink url="../audio/OOPJava7.wav"><inlinegraphic
        fileref="img/asf.gif" format="GIF" />Audio in
        Portuguese</ulink></para>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/java/javaOO/final.html">Writing
        Final Classes and Methods</ulink></title>

        <section>
          <title>Final Classes</title>

          <para>You can declare that your class is final; that is, that your
          class cannot be subclassed. There are (at least) two reasons why you
          might want to do this: security reasons and design reasons.</para>
        </section>

        <section>
          <title>Final Methods</title>

          <para>You can use the final keyword in a method declaration to
          indicate to the compiler that the method cannot be overridden by
          subclasses.</para>
        </section>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/java/javaOO/abstract.html">Writing
        Abstract Classes and Methods</ulink></title>

        <section>
          <title>Abstract Classes</title>

          <para>Classes, which implement abstract concepts and should not be
          instantiated, are called abstract classes. An abstract class is a
          class that can only be subclassed - it cannot be
          instantiated.</para>
        </section>

        <section>
          <title>Abstract Methods</title>

          <para>An abstract class may contain abstract methods, that is,
          methods with no implementation. In this way, an abstract class can
          define a complete programming interface thereby providing its
          subclasses with the method declarations for all of the methods
          necessary to implement that programming interface.</para>
        </section>

        <section>
          <title>Architectural advantage</title>

          <para>Abstract classes provide a way to represent objects at a
          conceptual generic level.</para>

          <para>In a graphic library, you can create an abstract class to
          represent a generic graphic object and a method for drawing it. This
          method is them only implemented on the derived classes.</para>

          <figure>
            <title>Graphic Classes</title>

            <mediaobject>
              <imageobject>
                <imagedata contentdepth="160px" contentwidth="328px"
                           fileref="img/OOPjava3.gif" format="GIF" />
              </imageobject>
            </mediaobject>
          </figure>

          <para><ulink url="../audio/OOPJava8.wav"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>
    </section>

    <section id="oop_in_java_interfaces">
      <title><ulink
      url="http://java.sun.com/docs/books/tutorial/java/interpack/interfaces.html">Interfaces</ulink></title>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/java/interpack/interfaceDef.html">Definition</ulink></title>

        <para>An interface is a collection of method definitions (without
        implementations) and constant values.</para>

        <section>
          <title>Advantages</title>

          <itemizedlist>
            <listitem>
              <para>capturing similarities between unrelated classes without
              forcing a class relationship;</para>
            </listitem>

            <listitem>
              <para>declaring methods that one or more classes are expected to
              implement;</para>
            </listitem>

            <listitem>
              <para>revealing an object's programming interface without
              revealing its class (objects such as these are called anonymous
              objects and can be useful when shipping a package of classes to
              other developers).</para>
            </listitem>
          </itemizedlist>
        </section>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/java/interpack/createinterface.html">Defining
        an Interface</ulink></title>

        <para>The interface declaration and the interface body:</para>

        <programlisting>interfaceDeclaration {
    interfaceBody
}</programlisting>

        <section>
          <title>The interface Declaration</title>

          <programlisting>[public] interface InterfaceName [extends listOfSuperInterfaces] {
     . . .
}
interface Collection {
   int MAXIMUM = 500;
   void add(Object obj);
   void delete(Object obj);
   Object find(Object obj);
   int currentCount();
}</programlisting>
        </section>

        <section>
          <title>Multiple Extensions (Inheritance)</title>

          <para>An interface can extend multiple interfaces (while a class can
          only extend one), and an interface cannot extend classes.</para>

          <para><ulink url="../audio/OOPJava9.wav"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/java/interpack/usinginterface.html">Implementing
        an Interface</ulink></title>

        <para>To use an interface, you write a class that implements the
        interface.</para>

        <para>Definition: To implement an interface a class has to provides a
        method implementation for all of the methods declared within the
        interface.</para>

        <programlisting>class FIFOQueue implements Collection {
   . . .
   void add(Object obj) { . . . }
   . . .
}</programlisting>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/java/interpack/interfaceAsType.html">Using
        an Interface as a Type</ulink></title>

        <para>An interface is a new reference data type.</para>

        <para>You can use interface names anywhere you'd use any other type
        name: variable declarations, method parameters and so on:</para>

        <programlisting>interface CellAble {
   void draw();
   void toString();
   void toFloat();
}

class Row {
   . . .
   private CellAble[] contents;
   . . .
   void setObjectAt(CellAble ca, int index) {
      . . .
   }
   . . .
}</programlisting>

        <para>Any object that implemented the CellAble interface can be
        contained in the contents array and can be passed into the
        setObjectAt() method.</para>

        <para><ulink url="../audio/OOPJava10.wav"><inlinegraphic
        fileref="img/asf.gif" format="GIF" />Audio in
        Portuguese</ulink></para>
      </section>
    </section>

    <section id="oop_in_java_packages">
      <title><ulink
      url="http://java.sun.com/docs/books/tutorial/java/interpack/packages.html">Packages</ulink></title>

      <para>Groups of related classes bundled into a package. Packages can
      also contain interface definitions.</para>

      <section>
        <title>Advantages</title>

        <itemizedlist>
          <listitem>
            <para>It makes objects easier to find and use.</para>
          </listitem>

          <listitem>
            <para>It avoids naming conflicts.</para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/java/interpack/createpkgs.html">Roll
        Your Own Packages</ulink></title>

        <section>
          <title>Definition</title>

          <programlisting>package graphics;
interface Draggable { . . . }
class Circle { . . . }
class Rectangle { . . . }</programlisting>

          <para>The .class files generated must be placed in a directory named
          graphics somewhere in your CLASSPATH.</para>

          <para>CLASSPATH: A list of directories that indicate where on the
          file system you've installed various compiled Java classes and
          interfaces.</para>

          <para>Java searches your CLASSPATH for a directory whose name
          matches the package name of which the class is a member.</para>

          <para>Note: If you don't specify a package, your classes and
          interfaces become members of the default package, which has no
          name.</para>
        </section>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/java/interpack/usepkgs.html">Using
        the Classes and Interfaces from a Package</ulink></title>

        <para>To use the classes and interfaces defined in one package from
        within another package, you need to import the package:</para>

        <programlisting>import graphics.Circle;
import graphics.*;</programlisting>

        <para>Also, the classes and interfaces must be declared public.</para>

        <para>This packages are always automatically imported:</para>

        <itemizedlist>
          <listitem>
            <para>The default package (a package with no name);</para>
          </listitem>

          <listitem>
            <para>The java.lang package.</para>
          </listitem>
        </itemizedlist>

        <para><ulink url="../audio/OOPJava11.wav"><inlinegraphic
        fileref="img/asf.gif" format="GIF" />Audio in
        Portuguese</ulink></para>
      </section>

      <section>
        <title><ulink
        url="/library/books/tutorial1.02/java/javaOO/javapkgs.html">The Java
        Packages</ulink></title>

        <section>
          <title>The Java language package</title>

          <para>It contains classes that are core to the Java language:</para>

          <itemizedlist>
            <listitem>
              <para>Object: The class from which all others inherit.</para>
            </listitem>

            <listitem>
              <para>Data Type Wrappers: A collection of classes used to wrap
              variables of a primitive data type.</para>
            </listitem>

            <listitem>
              <para>Strings: Two classes that implement character data.</para>
            </listitem>

            <listitem>
              <para>System and Runtime : These two classes provide let your
              programs use system resources.</para>
            </listitem>

            <listitem>
              <para>Threads: It implements the multi-threading capabilities so
              important to the Java language.</para>
            </listitem>

            <listitem>
              <para>Classes: The Class class provides a runtime description of
              a class and the ClassLoader class allows you to load classes
              during runtime.</para>
            </listitem>

            <listitem>
              <para>Math: A library of math routines and values such as
              pi.</para>
            </listitem>

            <listitem>
              <para>Exceptions, Errors and Throwable: Classes that handle
              errors.</para>
            </listitem>

            <listitem>
              <para>Processes: Process objects represent the system
              processes.</para>
            </listitem>
          </itemizedlist>
        </section>

        <section>
          <title>The Java I/O Package</title>

          <para>The Java I/O Package provides a set of input and output
          streams.</para>
        </section>

        <section>
          <title>The Java Utility Package</title>

          <para>This Java package, java.util, contains a collection of utility
          classes.</para>
        </section>

        <section>
          <title>The Java Networking Package</title>

          <para>The java.net package implements various networking
          capabilities.</para>
        </section>

        <section>
          <title>The Applet Package</title>

          <para>This package contains the Applet class -- the class that you
          must subclass if you're writing an applet.</para>
        </section>

        <section>
          <title>The Abstract Window Toolkit Packages</title>

          <para>Three packages comprise the Abstract Window Toolkit.</para>

          <para><ulink url="../audio/OOPJava12.wav"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>
    </section>
  </chapter>

  <chapter>
    <title>Essencial Classes</title>

    <section id="oop_in_java_string_class">
      <title><ulink
      url="http://java.sun.com/docs/books/tutorial/java/data/strings.html">String
      Class</ulink></title>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/java/data/whytwo.html">Two
        classes for strings</ulink></title>

        <itemizedlist>
          <listitem>
            <para>String, for constant strings.</para>
          </listitem>

          <listitem>
            <para>StringBuffer, for strings that can change.</para>
          </listitem>
        </itemizedlist>

        <para>Why use String? Because they are constants, Strings are cheaper
        than StringBuffers and they can be shared.</para>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/java/data/creating.html">Creating
        Strings and StringBuffers</ulink></title>

        <programlisting>StringBuffer dest = new StringBuffer(len);
StringBuffer dest = new StringBuffer();

String dest = new String("Destination");</programlisting>
      </section>

      <section>
        <title>String literals</title>

        <programlisting>"Gobbledy gook."</programlisting>

        <para>is equivalent to:</para>

        <programlisting>new String("Gobbledy gook.")</programlisting>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/java/data/accessors.html">Accessor
        Methods</ulink></title>

        <programlisting>charAt()</programlisting>

        <figure>
          <title>charAt() Method</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="img/Essencial1.gif" />
            </imageobject>
          </mediaobject>
        </figure>

        <para>and</para>

        <programlisting>length()</programlisting>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/java/data/modifying.html">Modifying
        StringBuffers</ulink></title>

        <programlisting>append()</programlisting>

        <figure>
          <title>Inside the StringBuffer</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="img/Essencial2.gif" />
            </imageobject>
          </mediaobject>
        </figure>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/java/data/conversion.html">Converting
        Objects to Strings</ulink></title>

        <programlisting>toString();</programlisting>

        <para>All classes inherit toString() from the Object class and many
        classes override this method to provide an implementation that is
        meaningful to that class. Implement it in your classes too!</para>

        <programlisting>valueOf()</programlisting>

        <para>Static member of String that can be used to convert variables of
        different types to Strings.</para>

        <para><ulink url="../audio/OOPJava13.wav"><inlinegraphic
        fileref="img/asf.gif" format="GIF" />Audio in
        Portuguese</ulink></para>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/java/data/stringsAndJavac.html">Strings
        and the Java Compiler</ulink></title>

        <para>The Java compiler uses the String and StringBuffer classes
        behind the scenes to handle literal strings and concatenation.</para>

        <section>
          <title>Literal Strings</title>

          <programlisting>"Hello World!"</programlisting>

          <para>You can use literal strings anywhere you would use a String
          object.</para>

          <programlisting>System.out.println("I add that you look lovely today.");
int len = "Goodbye Cruel World".length();
String s = "Hola Mundo";</programlisting>

          <para>The above construct is equivalent to, but more efficient than,
          this one, which ends up creating two Strings instead of one:</para>

          <programlisting>String s = new String("Hola Mundo");</programlisting>
        </section>

        <section>
          <title>Concatenation and the + Operator</title>

          <programlisting>String cat = "cat";
System.out.println("con" + cat + "enation");</programlisting>

          <para>The above example compiles to:</para>

          <programlisting>String cat = "cat";
System.out.println(new StringBuffer().append("con").append(cat).append("enation"));</programlisting>

          <para>You can also use the + operator to append values to a String
          that are not themselves Strings:</para>

          <programlisting>System.out.println("Java's Number " + 1);</programlisting>

          <caution>
            <informalfigure>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="img/noc++.gif" format="GIF" />
                </imageobject>
              </mediaobject>
            </informalfigure>

            <para>Java Strings are First-class Objects, unlike C or C++
            strings which are simply null-terminated arrays of 8-bit
            characters.</para>
          </caution>

          <para><ulink url="../audio/OOPJava14.wav"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>
    </section>

    <section id="oop_in_java_system_class">
      <title><ulink
      url="http://java.sun.com/docs/books/tutorial/essential/system/using.html">System
      Class</ulink></title>

      <para>Often, a program requires access to system resources such as
      properties, standard input and output streams, or the current
      time:</para>

      <figure>
        <title>System Class</title>

        <mediaobject>
          <imageobject>
            <imagedata contentdepth="215px" contentwidth="303px"
                       fileref="img/OOPjava5.gif" format="GIF" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>System class include:</para>

      <itemizedlist>
        <listitem>
          <para>standard input, output, and error streams;</para>
        </listitem>

        <listitem>
          <para>system properties;</para>
        </listitem>

        <listitem>
          <para>garbage collection;</para>
        </listitem>

        <listitem>
          <para>loading dynamic libraries;</para>
        </listitem>

        <listitem>
          <para>miscellany, including copying arrays, getting the current
          time, exiting the runtime environment, and using the security
          manager.</para>
        </listitem>
      </itemizedlist>

      <note>
        <para>All of System's methods and variables are class methods and
        class variables.</para>
      </note>

      <section>
        <title><ulink
        url="/library/books/tutorial1.02/java/system/properties.html">System
        Properties</ulink></title>

        <para>A set of properties - key/value pairs - that define traits or
        attributes of the current working environment.</para>

        <table>
          <title>System Properties</title>

          <tgroup cols="3">
            <colspec align="center" />

            <thead>
              <row>
                <entry align="center">Key</entry>

                <entry align="center">Meaning</entry>

                <entry align="center">Applet Access</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>"file.separator"</entry>

                <entry>File separator (e.g., "/")</entry>

                <entry>yes</entry>
              </row>

              <row>
                <entry>"java.class.path"</entry>

                <entry>Java classpath</entry>

                <entry>no</entry>
              </row>

              <row>
                <entry>"java.class.version"</entry>

                <entry>Java class version number</entry>

                <entry>yes</entry>
              </row>

              <row>
                <entry>"java.home"</entry>

                <entry>Java installation directory</entry>

                <entry>no</entry>
              </row>

              <row>
                <entry>"java.vendor"</entry>

                <entry>Java vendor-specific string</entry>

                <entry>yes</entry>
              </row>

              <row>
                <entry>"java.vendor.url"</entry>

                <entry>Java vendor URL</entry>

                <entry>yes</entry>
              </row>

              <row>
                <entry>"java.version"</entry>

                <entry>Java version number</entry>

                <entry>yes</entry>
              </row>

              <row>
                <entry>"line.separator"</entry>

                <entry>Line separator</entry>

                <entry>yes</entry>
              </row>

              <row>
                <entry>"os.arch"</entry>

                <entry>Operating system architecture</entry>

                <entry>yes</entry>
              </row>

              <row>
                <entry>"os.name"</entry>

                <entry>Operating system name</entry>

                <entry>yes</entry>
              </row>

              <row>
                <entry>"path.separator"</entry>

                <entry>Path separator (e.g., ":")</entry>

                <entry>yes</entry>
              </row>

              <row>
                <entry>"user.dir"</entry>

                <entry>User's current working directory</entry>

                <entry>no</entry>
              </row>

              <row>
                <entry>"user.home"</entry>

                <entry>User home directory</entry>

                <entry>no</entry>
              </row>

              <row>
                <entry>"user.name"</entry>

                <entry>User account name</entry>

                <entry>no</entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <para><ulink url="../audio/OOPJava15.wav"><inlinegraphic
        fileref="img/asf.gif" format="GIF" />Audio in
        Portuguese</ulink></para>
      </section>

      <section>
        <title>Reading/Writing System Properties</title>

        <programlisting>System.getProperty("path.separator");

System.getProperty("subliminal.message", "Buy Java Now!");</programlisting>

        <para>The getProperties() returns a Properties object.</para>

        <para>The setProperties() method: takes a Properties object.</para>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/essential/system/garbage.html">Forcing
        Finalization and Garbage Collection</ulink></title>

        <programlisting>System.runFinalization();</programlisting>

        <para>This method calls the finalize() methods on all objects that are
        waiting to be garbage collected.</para>

        <programlisting>System.gc();</programlisting>

        <para>It asks the garbage collector to run at any time by calling
        System's gc() method.</para>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/essential/system/runtime.html">The
        Runtime Object</ulink></title>

        <para>It bypasses the system-independent interface of the System class
        and use system resources directly from the runtime environment.</para>

        <figure>
          <title>Runtime Object</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="347px" contentwidth="492px"
                         fileref="img/OOPjava6.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <para>The oval labelled Runtime in the diagram represents the current
        runtime environment and is an instance of the Runtime Class.</para>

        <note>
          <para>Messaging the Runtime object directly compromises your ability
          to run your program on different systems. You should do this only in
          special situation.</para>
        </note>

        <para><ulink url="../audio/OOPJava16.wav"><inlinegraphic
        fileref="img/asf.gif" format="GIF" />Audio in
        Portuguese</ulink></para>
      </section>
    </section>

    <section id="oop_in_java_input_output_streams">
      <title><ulink
      url="http://java.sun.com/docs/books/tutorial/essential/io/">Input/Output
      Streams</ulink></title>

      <section>
        <title>Definition</title>

        <para>A stream is a flowing sequence of characters.</para>

        <itemizedlist>
          <listitem>
            <para>A program can get input by reading characters from a stream
            attached to a source.</para>
          </listitem>
        </itemizedlist>

        <figure>
          <title>A stream of data entering a program.</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="img/Streams1.gif" />
            </imageobject>
          </mediaobject>
        </figure>

        <itemizedlist>
          <listitem>
            <para>A program can produce output by writing characters to a
            stream attached to a destination.</para>
          </listitem>

          <listitem>
            <para>Input and output sources can be anything that can contain
            data: a file, a string, or memory.</para>
          </listitem>
        </itemizedlist>

        <figure>
          <title>A stream of data leaving a program.</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="img/Streams2.gif" />
            </imageobject>
          </mediaobject>
        </figure>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/essential/io/overview.html">The
        System class Streams</ulink></title>

        <itemizedlist>
          <listitem>
            <para>standard input: InputStream System.in</para>
          </listitem>

          <listitem>
            <para>standard output: PrintStream System.out</para>
          </listitem>

          <listitem>
            <para>standard error: PrintStream System.err</para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/essential/io/overview.html">InputStream
        Class</ulink></title>

        <figure>
          <title>InputStream Class</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="214px" contentwidth="492px"
                         fileref="img/OOPjava7.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/essential/io/overview.html">OutputStream
        Class</ulink></title>

        <figure>
          <title>OutputStream Class</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="145px" contentwidth="423px"
                         fileref="img/OOPjava8.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/essential/io/overview.html">Simple
        Input and Output Streams</ulink></title>

        <section>
          <title>FileInputStream and FileOutputStream</title>

          <para>Read data from or write data to a file on the native file
          system.</para>
        </section>

        <section>
          <title>PipedInputStream and PipedOutputStream</title>

          <para>Implement the input and output components of a pipe.</para>
        </section>

        <section>
          <title>ByteArrayInputStream and ByteArrayOutputStream</title>

          <para>Read data from or write data to a byte array in memory.</para>
        </section>

        <section>
          <title>SequenceInputStream</title>

          <para>Concatenate multiple input streams into one input
          stream.</para>
        </section>

        <section>
          <title>StringBufferInputStream</title>

          <para>Allow programs to read from a StringBuffer as if it were an
          input stream.</para>
        </section>

        <section>
          <title><ulink
          url="http://java.sun.com/docs/books/tutorial/essential/io/filtered.html">Filtered
          Streams</ulink></title>

          <para>To use a filtered input (output) stream, you attach the
          filtered stream to another input (output) stream:</para>

          <programlisting>DataInputStream dis = new DataInputStream(System.in.read());
String input;
while ((input = dis.readLine()) != null) {
  . . . // do something interesting here }</programlisting>

          <para><command>DataInputStream and DataOutputStream</command></para>

          <para><command>BufferedInputStream and
          BufferedOutputStream</command></para>

          <para><command>LineNumberInputStream</command></para>

          <para><command>PushbackInputStream</command></para>

          <para><command>Byte pushback buffer</command></para>

          <para><command>PrintStream</command></para>
        </section>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/essential/io/overview.html">Using
        Input and Output Streams</ulink></title>

        <programlisting>File inputFile = new File("farrago.txt");
File outputFile = new File("outagain.txt");

FileInputStream fis = new FileInputStream(inputFile);
FileOutputStream fos = new FileOutputStream(outputFile);

while ((c = fis.read()) != -1) {
   fos.write(c);
}
fis.close();
fos.close();</programlisting>

        <para><ulink url="../audio/OOPJava17.wav"><inlinegraphic
        fileref="img/asf.gif" format="GIF" />Audio in
        Portuguese</ulink></para>
      </section>
    </section>
  </chapter>

  <chapter id="exceptions">
    <title>Exceptions</title>

    <section id="exceptions_what_are_exceptions">
      <title><ulink
      url="http://java.sun.com/docs/books/tutorial/essential/exceptions/definition.html">What
      are exceptions</ulink>?</title>

      <section>
        <title>Definition</title>

        <para>An exception is an event that occurs during the execution of a
        program that disrupts the normal flow of instructions.</para>
      </section>

      <section>
        <title>Throwing an exception</title>

        <para>It happens when an error occurs the method creates an exception
        object and hands it off to the runtime system.</para>

        <figure>
          <title>Call Stack</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="img/Exceptions4.gif" />
            </imageobject>
          </mediaobject>
        </figure>
      </section>

      <section>
        <title>The exception object</title>

        <para>The exception object contains information about the exception,
        including its type and the state of the program when the error
        occurred.</para>
      </section>

      <section>
        <title>Catching an exception</title>

        <para>It happens when the exception object bubbles up through the call
        stack until an appropriate exception handler is found. The handler
        catches the exception.</para>

        <para>The runtime system searches the call stack for a method that
        contains a block of code that can handle the exception.</para>

        <figure>
          <title>Catching an Exception</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="img/Exceptions5.gif" />
            </imageobject>
          </mediaobject>
        </figure>
      </section>

      <section>
        <title>Advantages</title>

        <section>
          <title>Advantage 1: Separating Error Handling Code from "Regular"
          Code</title>

          <table frame="none">
            <title>Advantage 1</title>

            <tgroup cols="2">
              <tbody>
                <row>
                  <entry><programlisting>errorCodeType readFile {
    initialize errorCode = 0;
    open the file;
    if (theFileIsOpen) {
        determine the length of the file;
        if (gotTheFileLength) {
            allocate that much memory;
            if (gotEnoughMemory) {
                read the file into memory;
                if (readFailed) {
                    errorCode = -1;
                }
            } else {
                errorCode = -2;
            }
        } else {
            errorCode = -3;
        }
        close the file;
...  
}</programlisting></entry>

                  <entry><programlisting>readFile {
    try {
        open the file;
        determine its size;
        allocate that much memory;
        read the file into memory;
        close the file;
    } catch (fileOpenFailed) {
        doSomething;
    } catch (sizeDeterminationFailed) {
        doSomething;
    } catch (memoryAllocationFailed) {
        doSomething;
    } catch (readFailed) {
        doSomething;
    } catch (fileCloseFailed) {
        doSomething;
    }


}</programlisting></entry>
                </row>
              </tbody>
            </tgroup>
          </table>

          <para><ulink url="../audio/Exceptions1.wav"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>

        <section>
          <title>Advantage 2: Propagating Errors Up the Call Stack</title>

          <table>
            <title>Advantage 2</title>

            <tgroup cols="2">
              <tbody>
                <row>
                  <entry><programlisting>method1 {
    errorCodeType error;
    error = call method2;
    if (error)
        doErrorProcessing;
    else
        proceed;
}
errorCodeType method2 {
    errorCodeType error;
    error = call method3;
    if (error)
        return error;
    else
        proceed;
}
errorCodeType method3 {
    errorCodeType error;
    error = call readFile;
    if (error)
        return error;
    else
        proceed;
}</programlisting></entry>

                  <entry><programlisting>method1 {
    try {
        call method2;
    } catch (exception) {
        doErrorProcessing;
    }
}
method2 throws exception {
    call method3;
}
method3 throws exception {
    call readFile;
}











</programlisting></entry>
                </row>
              </tbody>
            </tgroup>
          </table>
        </section>

        <section>
          <title>Advantage 3: Grouping Error Types and Error
          Differentiation</title>

          <figure>
            <title>Advantage 3</title>

            <mediaobject>
              <imageobject>
                <imagedata contentdepth="197px" contentwidth="406px"
                           fileref="img/Exceptions1.gif" format="GIF" />
              </imageobject>
            </mediaobject>
          </figure>

          <programlisting>catch (ArrayException e) {
    . . .
}
catch (Exception e) {
    . . .
}</programlisting>

          <para><ulink url="../audio/Exceptions2.wav"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>
    </section>

    <section id="exceptions_throwing_exceptions">
      <title><ulink
      url="http://java.sun.com/docs/books/tutorial/essential/exceptions/throwing.html">Throwing
      exceptions</ulink></title>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/essential/exceptions/throw.html">The
        throw Statement</ulink></title>

        <programlisting>throw someThrowableObject;</programlisting>

        <para>Example:</para>

        <programlisting>public Object pop() throws EmptyStackException {
   Object obj;
   if (size == 0) throw new EmptyStackException();
   obj = objectAt(size - 1);
   setObjectAt(size - 1, null);
   size--;
   return obj;
}</programlisting>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/essential/exceptions/throwable.html">The
        Throwable Class and Its Subclasses</ulink></title>

        <figure>
          <title>Throwable and its Subclasses</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="258px" contentwidth="495px"
                         fileref="img/Exceptions2.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <section>
          <title>Errors</title>

          <para>When a dynamic linking failure or some other "hard" failure in
          the virtual machine occurs, the virtual machine throws an
          Error.</para>
        </section>

        <section>
          <title>Exceptions</title>

          <para>Most programs throw and catch objects that derive from the
          Exception class.</para>
        </section>

        <section>
          <title>Runtime Exceptions</title>

          <para>The RuntimeException class represents exceptions that occur
          within the Java virtual machine (during runtime).</para>

          <para><ulink url="../audio/Exceptions3.wav"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>
    </section>

    <section id="exceptions_catch_or_specify_requirement">
      <title><ulink
      url="http://java.sun.com/docs/books/tutorial/essential/exceptions/catchOrDeclare.html">Catch
      or specify requirement</ulink></title>

      <para>Java requires that a method either catch or specify all checked
      exceptions that can be thrown within the scope of the method.</para>

      <section>
        <title>Catch</title>

        <para>A method can catch an exception by providing a method can catch
        an exception by providing an exception handler for that type of
        exception.</para>
      </section>

      <section>
        <title>Specify</title>

        <para>If a method chooses not to catch an exception, the method must
        specify that it can throw that exception.</para>
      </section>

      <section>
        <title>Why Specify?</title>

        <para>Because any exception that can be thrown by a method is really
        part of the method's public programming interface</para>
      </section>

      <section>
        <title>Checked Exceptions</title>

        <para>Checked exceptions are exceptions that are not runtime
        exceptions and are checked by the compiler.</para>
      </section>

      <section>
        <title>Why not catch Runtime exceptions?</title>

        <para>Runtime exceptions can occur anywhere in a program and in a
        typical program can be very numerous. Often the cost of checking for
        runtime exceptions exceeds the benefit of catching or specifying
        them.</para>
      </section>

      <section>
        <title>Do not make all of your's exceptions Runtime</title>

        <para>Do not throw a runtime exception or create a subclass of
        RuntimeException simply because you don't want to be bothered with
        specifying them.</para>
      </section>

      <section>
        <title>Exceptions that can be thrown within the scope of the
        method</title>

        <itemizedlist>
          <listitem>
            <para>Exceptions that are thrown directly by the method with
            Java's throw statement;</para>
          </listitem>

          <listitem>
            <para>Exceptions that are thrown indirectly by the method through
            calls to other methods.</para>
          </listitem>
        </itemizedlist>

        <para><ulink url="../audio/Exceptions4.wav"><inlinegraphic
        fileref="img/asf.gif" format="GIF" />Audio in
        Portuguese</ulink></para>
      </section>
    </section>

    <section id="exceptions_catching_and_handling_exceptions">
      <title><ulink
      url="http://java.sun.com/docs/books/tutorial/essential/exceptions/handling.html">Catching
      and handling exceptions</ulink></title>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/essential/exceptions/try.html">The
        try Block</ulink></title>

        <programlisting>try { Java statements }</programlisting>

        <para>It should enclose the exception-throwing statements.</para>

        <programlisting>try {
   int i;
   pStr = new PrintStream( new BufferedOutputStream( new FileOutputStream("OutFile.txt")));
   for (i = 0; i &lt; size; i++)
      pStr.println("Value at: " + i + " = " + victor.elementAt(i));
}</programlisting>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/essential/exceptions/catch.html">The
        catch Block(s)</ulink></title>

        <programlisting>try {
    . . .
} catch (Throwable e) {
    . . .
} catch ( . . . ) {
    . . .
} . . .

catch (SomeThrowableObject variableName) {
    Java statements
}</programlisting>

        <para>variableName: is the name by which the handler can refer to the
        exception caught by the handler.</para>

        <programlisting>e.getMessage();</programlisting>

        <para>You access the instance variables and methods of exceptions in
        the same manner that you do with other objects.</para>

        <programlisting>try {
    . . .
} catch (ArrayIndexOutOfBoundsException e) {
    System.err.println("Caught ArrayIndexOutOfBoundsException: " + e.getMessage());
} catch (IOException e) {
    System.err.println("Caught IOException: " + e.getMessage());
}</programlisting>

        <para><ulink url="../audio/Exceptions5.wav"><inlinegraphic
        fileref="img/asf.gif" format="GIF" />Audio in
        Portuguese</ulink></para>
      </section>

      <section>
        <title>Specialized Handler</title>

        <para>If you write a handler for a "leaf" class (a class with no
        subclasses), you've written a specialized handler: it will only handle
        exceptions of that specific type.</para>

        <programlisting>try {
    . . .
} catch (ArrayIndexOutOfBoundsException e) {
    System.err.println("Caught ArrayIndexOutOfBoundsException: " + e.getMessage());
} catch (IOException e) {
    System.err.println("Caught IOException: " + e.getMessage());
}</programlisting>
      </section>

      <section>
        <title>General Handler</title>

        <para>If you write a handler for a "node" class (a class with
        subclasses), you've written a general handler: it will handle any
        exception whose type is the node class or any of its
        subclasses.</para>

        <programlisting>try {
    . . .
} catch (Exception e) {
    System.err.println("Exception caught: " + e.getMessage());
}</programlisting>

        <figure>
          <title>General Handler</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="258px" contentwidth="495px"
                         fileref="img/Exceptions3.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <para><ulink url="../audio/Exceptions6.wav"><inlinegraphic
        fileref="img/asf.gif" format="GIF" />Audio in
        Portuguese</ulink></para>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/essential/exceptions/finally.html">The
        finally Block</ulink></title>

        <para>The statements within the finally block are always
        executed.</para>

        <section>
          <title>Why?</title>

          <para>To provides a mechanism that allows your method to clean up
          after itself regardless of what happens within the try block. Use
          the finally block to close files or release other system
          resources.</para>

          <programlisting>finally {
   if (pStr != null) {
      System.out.println("Closing PrintStream");
      pStr.close();
   } else {
      System.out.println("PrintStream not open");
   }
}</programlisting>

          <caution>
            <informalfigure>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="img/noc++.gif" format="GIF" />
                </imageobject>
              </mediaobject>
            </informalfigure>

            <para>C++ exception handlers can not have a finally block.</para>
          </caution>
        </section>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/essential/exceptions/putItTogether.html">Putting
        It All Together</ulink></title>

        <programlisting>public void writeList() {
    PrintStream pStr = null;

    try {
        int i;

        System.out.println("Entering try statement");
        pStr = new PrintStream(
                new BufferedOutputStream(
                 new FileOutputStream("OutFile.txt")));

        for (i = 0; i &lt; size; i++)
            pStr.println("Value at: " + i + " = " + victor.elementAt(i));
    } catch (ArrayIndexOutOfBoundsException e) {
        System.err.println("Caught ArrayIndexOutOfBoundsException: " + e.getMessage());
    } catch (IOException e) {
        System.err.println("Caught IOException: " + e.getMessage());
    } finally {
        if (pStr != null) {
            System.out.println("Closing PrintStream");
            pStr.close();
        } else {
            System.out.println("PrintStream not open");
        }
    }
}</programlisting>

        <para><ulink url="../audio/Exceptions7.wav"><inlinegraphic
        fileref="img/asf.gif" format="GIF" />Audio in
        Portuguese</ulink></para>
      </section>
    </section>
  </chapter>

  <chapter id="threads">
    <title>Threads</title>

    <section id="threads_what_is_a_thread">
      <title><ulink
      url="http://java.sun.com/docs/books/tutorial/essential/threads/definition.html">What
      is a Thread</ulink>?</title>

      <section>
        <title>Definition</title>

        <itemizedlist>
          <listitem>
            <para>A thread is a single sequential flow of control within a
            program.</para>
          </listitem>

          <listitem>
            <para>A thread runs within the context of a program's process and
            takes advantage of the resources allocated for that process and
            the it's environment.</para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title>Multiple threads</title>

        <itemizedlist>
          <listitem>
            <para>Multiple threads can run at the same time in the same
            process performing different tasks.</para>
          </listitem>

          <listitem>
            <para>Multiple threads can share the resources of the process they
            share.</para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/essential/threads/simple.html">Example</ulink></title>

        <programlisting>class TwoThreadsTest {
   public static void main (String[] args) {
      new SimpleThread("Jamaica").start();
      new SimpleThread("Fiji").start();
   }
}
class SimpleThread extends Thread {
   public SimpleThread(String str) {
      super(str);}
   public void run() {
      for (int i = 0; i &lt; 10; i++) {
         System.out.println(i + " " + getName());
         try {
            sleep((int)(Math.random() * 1000));
         }
         catch (InterruptedException e) {}
      }
      System.out.println("DONE! " + getName());
   }
}</programlisting>

        <section>
          <title>Output</title>

          <programlisting>0 Jamaica
0 Fiji
1 Fiji
1 Jamaica
2 Jamaica
2 Fiji
...
8 Fiji
9 Fiji
8 Jamaica
DONE! Fiji
9 Jamaica
DONE! Jamaica</programlisting>

          <para><ulink url="../audio/Threads1.wav"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>
    </section>

    <section id="threads_thread_attributes">
      <title><ulink
      url="http://java.sun.com/docs/books/tutorial/essential/threads/lifecycle.html">Thread
      Attributes</ulink></title>

      <section>
        <title>Thread class</title>

        <para>It implements a system independent definition of Java
        threads.</para>
      </section>

      <section>
        <title>Thread Body: The run() method</title>

        <para>After a thread has been created and initialized, the runtime
        system calls its run() method.</para>

        <section>
          <title><ulink
          url="http://java.sun.com/docs/books/tutorial/essential/threads/customizing.html">Customizing
          the run() method</ulink></title>

          <orderedlist>
            <listitem>
              <para>Subclassing the Thread class defined in the java.lang
              package and override the run() method.</para>
            </listitem>

            <listitem>
              <para>Providing a class that implements the Runnable interface
              and giving to a new thread a handle to an instance of it.</para>
            </listitem>
          </orderedlist>

          <para>When to use each?</para>

          <para>If your class must subclass some other class, you should use
          Runnable as described in option #2.</para>

          <para><ulink url="../audio/Threads2.wav"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/essential/threads/lifecycle.html">Thread
        States</ulink></title>

        <figure>
          <title>Thread States</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="240px" contentwidth="519px"
                         fileref="img/Threads1.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <section>
          <title>New Thread</title>

          <programlisting>Thread myThread = new MyThreadClass();</programlisting>

          <para>Definition: It is merely an empty Thread object. No system
          resources have been allocated for it yet.</para>
        </section>

        <section>
          <title>Runnable</title>

          <programlisting>Thread myThread = new MyThreadClass();
myThread.start();</programlisting>

          <para>Definition: It is when the start() method creates the system
          resources necessary to run the thread and schedules the thread to
          run.</para>

          <note>
            <para>The thread might not actually be running when it is in this
            state.</para>
          </note>

          <para><ulink url="../audio/Threads3.wav"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>

        <section>
          <title>Not Runnable</title>

          <para>Definition: A thread enters the "Not Runnable" state when one
          of these four events occurs:</para>

          <itemizedlist>
            <listitem>
              <para>Someone invokes its sleep() method.</para>
            </listitem>

            <listitem>
              <para>Someone invokes its suspend() method.</para>
            </listitem>

            <listitem>
              <para>The thread uses its wait() method to wait on a condition
              variable.</para>
            </listitem>

            <listitem>
              <para>The thread is blocking on I/O.</para>
            </listitem>
          </itemizedlist>

          <note>
            <para>Even if the processor becomes available a "Not Runnable"
            thread does not run.</para>
          </note>

          <para>Leaving the "Not Runnable" state:</para>

          <itemizedlist>
            <listitem>
              <para>If a thread has been put to sleep, then the specified
              number of milliseconds must elapse.</para>
            </listitem>

            <listitem>
              <para>If a thread has been suspended, then someone must call its
              resume() method.</para>
            </listitem>

            <listitem>
              <para>If a thread is waiting on a condition variable, whatever
              object owns the variable must relinquish it by calling either
              notify() or notifyAll().</para>
            </listitem>

            <listitem>
              <para>If a thread is blocked on I/O, then the I/O must
              complete.</para>
            </listitem>
          </itemizedlist>
        </section>

        <section>
          <title>Dead</title>

          <para>From natural causes:</para>

          <para>A thread dies naturally when its run() method exits
          normally.</para>

          <para>Being killed:</para>

          <para>A thread is killed when its stop() method is called.</para>

          <programlisting>Thread myThread = new MyThreadClass();
myThread.start();
try {
    Thread.currentThread().sleep(10000);
} catch (InterruptedException e){
}
myThread.stop();</programlisting>

          <para>The stop() method throws a ThreadDeath object at the thread to
          kill it.</para>

          <para><ulink url="../audio/Threads4.wav"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/essential/threads/priority.html">Thread
        Priority</ulink></title>

        <para>Scheduling: Execution of multiple threads on a single CPU, in
        some order.</para>

        <para>Priority: The Java supports a very simple, deterministic
        scheduling algorithm known as fixed priority scheduling.</para>

        <para>When a Java thread is created, it inherits its priority from the
        thread that created it.</para>

        <para>Priority Modification: setPriority() method. Thread priorities
        are integers ranging between MIN_PRIORITY and MAX_PRIORITY.</para>

        <para>Preemptive Scheduling: If a thread with a higher priority than
        the currently executing thread needs to execute, the higher priority
        thread is immediately scheduled.</para>

        <para>Equal Priority Scheduling:</para>

        <para>The scheduler chooses in a round-robin fashion. The chosen
        thread will run until one of the following conditions is true:</para>

        <itemizedlist>
          <listitem>
            <para>a higher priority thread becomes "Runnable"</para>
          </listitem>

          <listitem>
            <para>it yields, or its run() method exits</para>
          </listitem>

          <listitem>
            <para>on systems that support time-slicing, its time allotment has
            expired</para>
          </listitem>
        </itemizedlist>

        <para>Then the second thread is given a chance to run, and so on,
        until the interpreter exits.</para>

        <note>
          <para>Use priority only to affect scheduling policy for efficiency
          purposes. Do not rely on thread priority for algorithm
          correctness.</para>
        </note>

        <para>Time-Slicing:</para>

        <para>Time-sliced system divides the CPU into time slots and
        iteratively gives each of the equal-and-highest priority threads a
        time slot in which to run.</para>

        <note>
          <para>The Java runtime does not implement (and therefore does not
          guarantee) time-slicing.</para>
        </note>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/essential/threads/threadgroup.html">Daemon
        Threads</ulink></title>

        <itemizedlist>
          <listitem>
            <para>Daemon threads are those that provide a service for other
            threads in the system.</para>
          </listitem>

          <listitem>
            <para>When the only remaining threads in a process are daemon
            threads, the interpreter exits.</para>
          </listitem>
        </itemizedlist>

        <para><ulink url="../audio/Threads5.wav"><inlinegraphic
        fileref="img/asf.gif" format="GIF" />Audio in
        Portuguese</ulink></para>
      </section>
    </section>

    <section id="threads_thread_group">
      <title><ulink
      url="http://java.sun.com/docs/books/tutorial/essential/threads/group.html">Thread
      Group</ulink></title>

      <para>Every Java thread is a member of a thread group.</para>

      <para>Default Group: The same as the thread that created it.</para>

      <para>Start up Group: the Java runtime system creates a ThreadGroup
      named "main".</para>

      <section>
        <title><ulink
        url="/library/books/tutorial1.02/java/threads/threadgroup.html">The
        ThreadGroup Class</ulink></title>

        <para>The ThreadGroup class manages groups of threads for Java
        applications.</para>

        <figure>
          <title>ThreadGroup Class</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="343px" contentwidth="487px"
                         fileref="img/Threads2.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <para>The ThreadGroup class has methods that can be categorized as
        follows:</para>

        <itemizedlist>
          <listitem>
            <para>Collection Management Methods - methods that manage the
            collection of threads and subgroups contained in the thread
            group;</para>
          </listitem>

          <listitem>
            <para>Methods that Operate on the Group - these methods set or get
            attributes of the ThreadGroup object;</para>
          </listitem>

          <listitem>
            <para>Methods that Operate on All Threads within a Group - this is
            a set of methods that perform some operation on all the threads
            and subgroups within the ThreadGroup;</para>
          </listitem>

          <listitem>
            <para>resume();</para>
          </listitem>

          <listitem>
            <para>stop();</para>
          </listitem>

          <listitem>
            <para>suspend():</para>
          </listitem>

          <listitem>
            <para>Access Restriction Methods - ThreadGroup and Thread allow
            the security manager to restrict access to threads based on group
            membership.</para>
          </listitem>
        </itemizedlist>

        <para><ulink url="../audio/Threads6.wav"><inlinegraphic
        fileref="img/asf.gif" format="GIF" />Audio in
        Portuguese</ulink></para>
      </section>
    </section>

    <section id="threads_synchronizing_threads">
      <title><ulink
      url="http://java.sun.com/docs/books/tutorial/essential/threads/multithreaded.html">Synchronizing
      Threads</ulink></title>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/essential/threads/synchronization.html">Producer/Consumer
        Scenario</ulink></title>

        <programlisting>class Producer extends Thread {
    public void run() {
        for (int i = 0; i &lt; 10; i++) {
            cubbyhole.put(i);
            System.out.println("Producer #" + this.number + " put: " + i);
            try {
                sleep((int)(Math.random() * 100));
            } catch (InterruptedException e){}
        }
    }
}</programlisting>

        <para>The <ulink
        url="http://java.sun.com/docs/books/tutorial/essential/threads/synchronization.html">Consumer</ulink>
        consumes all integers from the CubbyHole as quickly as they become
        available.</para>

        <programlisting>class Consumer extends Thread {
    public void run() {
        int value = 0;
        for (int i = 0; i &lt; 10; i++) {
            value = cubbyhole.get();
            System.out.println("Consumer #" + this.number + " got: " + value);
        }
    }
}</programlisting>

        <section>
          <title>Two outcomes</title>

          <para>Producer is quicker than the Consumer:</para>

          <programlisting>. . .
Consumer #1 got: 3
Producer #1 put: 4
Producer #1 put: 5
Consumer #1 got: 5
. . .</programlisting>

          <para>Consumer is quicker than the Producer:</para>

          <programlisting>. . .
Producer #1 put: 4
Consumer #1 got: 4
Consumer #1 got: 4
Producer #1 put: 5
. . .</programlisting>

          <para><ulink url="../audio/Threads7.wav"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/essential/threads/monitors.html">Monitors</ulink></title>

        <para>Definition: A monitor is associated with a specific data item
        and functions as a lock on that data.</para>

        <itemizedlist>
          <listitem>
            <para>When a thread holds the monitor for some data item, other
            threads are locked out and cannot inspect or modify the
            data.</para>
          </listitem>

          <listitem>
            <para>A unique monitor is associated with every object that has a
            synchronized method.</para>
          </listitem>
        </itemizedlist>

        <programlisting>class CubbyHole {
    private int contents;
    private boolean available = false;

    public synchronized int get() {
        while (available == false) {
            try {
                wait();
            } catch (InterruptedException e) {
            }
        }
        available = false;
        notify();
        return contents;
    }

    public synchronized void put(int value) {
        while (available == true) {
            try {
                wait();
            } catch (InterruptedException e) {
            }
        }
        contents = value;
        available = true;
        notify();
    }
}</programlisting>

        <section>
          <title>Control</title>

          <para>Lock: The thread that called a synchronized method acquires
          the monitor for the object whose method has been called.</para>

          <para>Object state: No other threads can call a synchronized method
          on the same object.</para>

          <para>Unlock: When the synchronized method returns, the thread
          releases the monitor thereby unlocking the object.</para>

          <para><ulink url="../audio/Threads8.wav"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/essential/threads/waitAndNotify.html">The
        wait() and notify() Methods</ulink></title>

        <section>
          <title>The wait() method</title>

          <para>The wait() method causes the current thread to:</para>

          <orderedlist>
            <listitem>
              <para>Wait until another thread notifies it of a condition
              change.</para>
            </listitem>

            <listitem>
              <para>Release the monitor for the object.</para>
            </listitem>
          </orderedlist>

          <programlisting>public synchronized int get() {
    while (available == false) {
        try {
            wait();          // waits for notify() call from Producer
        } catch (InterruptedException e) {
        }
    }
    available = false;
    notify();
    return contents;
}</programlisting>

          <para>Other versions:</para>

          <programlisting>wait(long timeout) 
wait(long timeout, int nanos) </programlisting>
        </section>

        <section>
          <title>The notify() method</title>

          <para>The notify() method chooses one thread that is waiting on the
          monitor held by the current thread and wakes it up.</para>

          <note>
            <para>The Java runtime system makes no commitments or guarantees
            about which thread will be chosen.</para>
          </note>

          <programlisting>public synchronized int get() {
    while (available == false) {
        try {
            wait();
        } catch (InterruptedException e) {
        }
    }
    available = false;
    notify();           // notifies Producer
    return contents;
}</programlisting>

          <para>notifyAll():</para>

          <orderedlist>
            <listitem>
              <para>It wakes up all the threads waiting on the same
              monitor.</para>
            </listitem>

            <listitem>
              <para>The awakened threads compete for the monitor.</para>
            </listitem>

            <listitem>
              <para>One thread gets the monitor and the others go back to
              waiting.</para>
            </listitem>
          </orderedlist>

          <para><ulink url="../audio/Threads9.wav"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>
    </section>
  </chapter>

  <chapter id="uml">
    <title>UML</title>

    <section id="uml_uml_unified_modeling_language">
      <title>UML - Unified Modeling Language</title>

      <para>The UML is standard diagramming language to visualize the results
      of analysis and design.</para>

      <itemizedlist>
        <listitem>
          <para>An emerging standard for modeling object-oriented
          software.</para>
        </listitem>

        <listitem>
          <para>Resulted from the convergence of notations from three leading
          object-oriented methods:</para>

          <itemizedlist>
            <listitem>
              <para><emphasis>OMT</emphasis> (James Rumbaugh)</para>
            </listitem>

            <listitem>
              <para><emphasis>OOSE</emphasis> (Ivar Jacobson)</para>
            </listitem>

            <listitem>
              <para><emphasis>Booch</emphasis> (Grady Booch)</para>
            </listitem>
          </itemizedlist>
        </listitem>

        <listitem>
          <para>UML Notation is simple and relatively trivial.</para>
        </listitem>

        <listitem>
          <para>Much more important: Skill in designing with objects.</para>
        </listitem>
      </itemizedlist>

      <para>The UML is not:</para>

      <itemizedlist>
        <listitem>
          <para>A process or methodology.</para>
        </listitem>

        <listitem>
          <para>Object-oriented analysis and design.</para>
        </listitem>

        <listitem>
          <para>Guideline for design.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section id="uml_uml_diagrams">
      <title>UML Diagrams</title>

      <itemizedlist>
        <listitem>
          <para><emphasis role="bold">Use Cases Diagrams</emphasis></para>

          <para>Describe the functional behavior of the system as seen by the
          user.</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">Class Diagrams</emphasis></para>

          <para>Describe the static structure of the system: Objects,
          Attributes, and Associations.</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">Interaction Diagrams</emphasis></para>

          <para>Models that describe how groups of objects collaborate in some
          behavior.</para>

          <itemizedlist>
            <listitem>
              <para><emphasis role="bold">Sequence Diagrams</emphasis></para>

              <para>Describe the dynamic behavior between actors and the
              system and between objects of the system.</para>
            </listitem>

            <listitem>
              <para><emphasis role="bold">Collaboration
              Diagrams</emphasis></para>

              <para>Similar to Sequence diagrams, however the sequence is
              indicated by numbering the messages.</para>
            </listitem>
          </itemizedlist>
        </listitem>

        <listitem>
          <para><emphasis role="bold">Package Diagrams</emphasis></para>

          <para>Groups classes together into high level unities.</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">State Diagrams</emphasis></para>

          <para>Describe the dynamic behavior of an individual object as a
          finite state machine.</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">Activity Diagrams</emphasis></para>

          <para>Model the dynamic behavior of a system, in particular the
          workflow, i.e. a flowchart.</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">Deployment Diagrams</emphasis></para>

          <para>Shows the physical relationships among software and hardware
          components in the delivered system.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section id="uml_main_diagrams">
      <title>Main Diagrams</title>

      <para><ulink url="../pdf/UMLdiagrams1.pdf">Use Cases, Class, Sequence
      and State Diagrams</ulink>.</para>
    </section>

    <section id="uml_uses_cases_diagrams">
      <title>Uses Cases Diagrams</title>

      <para><ulink url="../pdf/UMLdiagrams2.pdf">Uses Cases
      Diagrams</ulink>.</para>

      <para><ulink url="../pdf/UMLdiagrams3.pdf">Graphics</ulink>.</para>
    </section>

    <section id="uml_class_diagrams">
      <title>Class Diagrams</title>

      <para><ulink url="../pdf/UMLdiagrams4.pdf">Graphics</ulink>.</para>
    </section>

    <section id="uml_sequence_and_activity_diagrams">
      <title>Sequence and Activity Diagrams</title>

      <para>Sequence Diagrams <ulink
      url="../pdf/UMLdiagrams5.pdf">Graphics</ulink>.</para>

      <para>Activity Diagrams <ulink
      url="../pdf/UMLdiagrams6.pdf">Graphics</ulink>.</para>
    </section>

    <section id="uml_summary">
      <title>Summary</title>

      <para>UML provides a wide variety of notations for representing many
      aspects of software development:</para>

      <itemizedlist>
        <listitem>
          <para>Powerful, but complex language.</para>
        </listitem>

        <listitem>
          <para>Can be misused to generate unreadable models.</para>
        </listitem>

        <listitem>
          <para>Can be misunderstood when using too many exotic
          features.</para>
        </listitem>
      </itemizedlist>

      <para>We concentrate only on a few notations:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis role="bold">Functional model</emphasis>: use case
          diagram.</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">Object model</emphasis>: class
          diagram.</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">Dynamic model</emphasis>: sequence
          diagrams, state and activity diagrams.</para>
        </listitem>
      </itemizedlist>
    </section>
  </chapter>

  <chapter>
    <title>Associatons and Collections</title>

    <para></para>

    <section>
      <title>Overview</title>

      <para>What happens if we want to model automobiles in UML. We can have a
      class called Car to model cars in general and a subclass Sedan to model
      a kind of car. But how do we relate a class Tires to Car?</para>

      <para>Obviously all cars have tires but a tire isn't a kind of car. The
      relationship we are trying to model isn't <emphasis>is_a</emphasis> but
      <emphasis>part_of</emphasis>: A Tire is <emphasis>part_of</emphasis> a
      Car.</para>

      <para>There is a relationship of aggregation: there is a relation
      part-&gt;whole, a tire (part) is a part of car (whole).</para>

      <figure>
        <title>Car as a collection of parts</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="img/collections1.gif" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>Classes can be associated to other classes by other properties
      other than inheritance.</para>
    </section>

    <section>
      <title>Association</title>

      <para>An association defines a relationship between classes of objects
      which allows one object instance of one class to send messages and
      change states of objects of another class in the association.</para>

      <figure>
        <title>Association between Seminar and Course</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="img/Collections2.jpg" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>Associations have characteristics of such as:</para>

      <para>cause another to perform an action on its behalf.</para>

      <itemizedlist>
        <listitem>
          <para>Multiplicity: How many objects of each class are possible in
          each end of the relationship.</para>
        </listitem>

        <listitem>
          <para>Navigation: If it is possible for each object to access others
          in the same association.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Composition</title>

      <para>A composition is a kind of association where there is a
      part-&gt;whole relationship among the parts and the parts cannot exist
      without the whole (they are therefore strong connected).</para>

      <para>Ex: A Room is part of a Building, but there is no room if there is
      no building. Fingers are parts of a Hand, there are no fingers that are
      not parts of a hand, but there can be a hand without one finger.</para>

      <figure>
        <title>Composition: Building X Room</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="img/Collections4.jpg" />
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>Aggregation</title>

      <para>It is a kind of association where there is a part-&gt;whole
      relationship among the parts, but the object that represents the whole
      doesn't owns the objects that makeup the parts.</para>

      <para>Ex: A university owns various departments (e.g., chemistry), and
      each department has a number of professors. If the university closes,
      the departments will no longer exist, but the professors in those
      departments will continue to exist. Therefore, a University can be seen
      as a composition of departments, whereas departments have an aggregation
      of professors. In addition, a Professor could work in more than one
      department, but a department could not be part of more than one
      university.</para>

      <figure>
        <title>Aggregation X Composition</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="img/Collections3.png" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>How do we implement those classes in Java?</para>
    </section>

    <section>
      <title><ulink
      url="http://java.sun.com/docs/books/tutorial/collections/interfaces/index.html">Core
      Collection Interfaces</ulink></title>

      <para>There are interfaces to separate the kinds of collections (List)
      to their implemantations (ArrayList, LinkedList, etc).</para>

      <figure>
        <title>Kinds of Collections</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="img/Colections5.gif" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>Main interfaces:</para>

      <itemizedlist>
        <listitem>
          <para><interfacename>Collection</interfacename> â the root of the
          collection hierarchy. A collection represents a group of objects
          known as its elements. </para>
        </listitem>

        <listitem>
          <para><interfacename>Set</interfacename> â a collection that cannot
          contain duplicate elements (no consept of order).</para>
        </listitem>

        <listitem>
          <para> <interfacename>List</interfacename> â an ordered collection
          (sometimes called a sequence). Lists can contain duplicate
          elements.</para>
        </listitem>

        <listitem>
          <para> <interfacename>Queue</interfacename> â a collection used to
          hold multiple elements prior to processing.Queues typically, but do
          not necessarily, order elements in a FIFO (first-in, first-out)
          manner. Among the exceptions are priority queues.</para>
        </listitem>

        <listitem>
          <para><interfacename>Map</interfacename> â an object that maps keys
          to values. A Map cannot contain duplicate keys; each key can map to
          at most one value.</para>
        </listitem>
      </itemizedlist>

      <para>Srted versions:</para>

      <itemizedlist>
        <listitem>
          <para> <interfacename>SortedSet</interfacename> â a Set that
          maintains its elements in ascending order. Sorted sets are used for
          naturally ordered sets, such as word lists and membership
          rolls.</para>
        </listitem>

        <listitem>
          <para><interfacename>SortedMap</interfacename> â a Map that
          maintains its mappings in ascending key order. Sorted maps are used
          for naturally ordered collections of key/value pairs, such as
          dictionaries and telephone directories</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title><ulink
      url="http://java.sun.com/docs/books/tutorial/collections/interfaces/collection.html">Collection
      Interface</ulink></title>

      <para>Basic Operations:</para>

      <programlisting>    int size();
    boolean isEmpty();
    boolean contains(Object element);
    boolean add(E element);         //optional
    boolean remove(Object element); //optional
    Iterator&lt;E&gt; iterator();</programlisting>

      <para>Bulk Operations:</para>

      <itemizedlist>
        <listitem>
          <para> containsAll â returns true if the target Collection contains
          all of the elements in the specified Collection.</para>
        </listitem>

        <listitem>
          <para>addAll â adds all of the elements in the specified Collection
          to the target Collection.</para>
        </listitem>

        <listitem>
          <para>removeAll â removes from the target Collection all of its
          elements that are also contained in the specified Collection.</para>
        </listitem>

        <listitem>
          <para> retainAll â removes from the target Collection all its
          elements that are not also contained in the specified Collection.
          That is, it retains only those elements in the target Collection
          that are also contained in the specified Collection.</para>
        </listitem>

        <listitem>
          <para> clear â removes all elements from the Collection.</para>
        </listitem>
      </itemizedlist>

      <programlisting>    boolean containsAll(Collection&lt;?&gt; c);
    boolean addAll(Collection&lt;? extends E&gt; c); //optional
    boolean removeAll(Collection&lt;?&gt; c);        //optional
    boolean retainAll(Collection&lt;?&gt; c);        //optional
    void clear();                              //optional</programlisting>

      <para>Array Convertions:</para>

      <programlisting>    // Array operations
    Object[] toArray();
    &lt;T&gt; T[] toArray(T[] a</programlisting>
    </section>

    <section>
      <title><ulink
      url="http://java.sun.com/docs/books/tutorial/collections/interfaces/set.html">Set
      Interface</ulink></title>

      <para>A Set is a Collection that cannot contain duplicate elements. It
      models the mathematical set abstraction.</para>

      <para>The Set interface contains only methods inherited from Collection
      and adds the restriction that duplicate elements are prohibited.</para>

      <para>Bulk operations are particularly well suited to Sets; when
      applied, they perform standard set-algebraic operations. Suppose s1 and
      s2 are sets. Here's what bulk operations do:</para>

      <itemizedlist>
        <listitem>
          <para><methodname>s1.containsAll(s2)</methodname> â returns true if
          s2 is a subset of s1. (s2 is a subset of s1 if set s1 contains all
          of the elements in s2.) </para>
        </listitem>

        <listitem>
          <para><methodname>s1.addAll(s2)</methodname> â transforms s1 into
          the union of s1 and s2. (The union of two sets is the set containing
          all of the elements contained in either set.)</para>
        </listitem>

        <listitem>
          <para><methodname>s1.retainAll(s2)</methodname> â transforms s1 into
          the intersection of s1 and s2. (The intersection of two sets is the
          set containing only the elements common to both sets.) </para>
        </listitem>

        <listitem>
          <para><methodname>s1.removeAll(s2)</methodname> â transforms s1 into
          the (asymmetric) set difference of s1 and s2. (For example, the set
          difference of s1 minus s2 is the set containing all of the elements
          found in s1 but not in s2.) </para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title><ulink
      url="http://java.sun.com/docs/books/tutorial/collections/interfaces/list.html">List
      Interface</ulink></title>

      <para>A List is an ordered Collection (sometimes called a sequence).
      Lists may contain duplicate elements.</para>

      <para>Positional access â manipulates elements based on their numerical
      position in the list:</para>

      <programlisting>    E get(int index);
    E set(int index, E element);    //optional
    boolean add(E element);         //optional
    void add(int index, E element); //optional
    E remove(int index);            //optional
    boolean addAll(int index,
        Collection&lt;? extends E&gt; c); //optional</programlisting>

      <para>Search â searches for a specified object in the list and returns
      its numerical position:</para>

      <programlisting>    int indexOf(Object o);
    int lastIndexOf(Object o);</programlisting>

      <para> Range-view â performs arbitrary range operations on the
      list.:</para>

      <programlisting>    List&lt;E&gt; subList(int from, int to);</programlisting>

      <para>Iteration â extends Iterator semantics to take advantage of the
      list's sequential nature :</para>

      <programlisting>    ListIterator&lt;E&gt; listIterator();
    ListIterator&lt;E&gt; listIterator(int index);
</programlisting>

      <para><ulink
      url="lastIndexOfSubList â returns the index of the last sublist of one List that is equal to another">List
      Algorithms</ulink>:</para>

      <itemizedlist>
        <listitem>
          <para>sort â sorts a List using a merge sort algorithm, which
          provides a fast, stable sort. (A stable sort is one that does not
          reorder equal elements.)</para>
        </listitem>

        <listitem>
          <para>shuffle â randomly permutes the elements in a List</para>
        </listitem>

        <listitem>
          <para>reverse â reverses the order of the elements in a List.</para>
        </listitem>

        <listitem>
          <para>rotate â rotates all the elements in a List by a specified
          distance</para>
        </listitem>

        <listitem>
          <para>swap â swaps the elements at specified positions in a
          List</para>
        </listitem>

        <listitem>
          <para>replaceAll â replaces all occurrences of one specified value
          with another</para>
        </listitem>

        <listitem>
          <para>fill â overwrites every element in a List with the specified
          value</para>
        </listitem>

        <listitem>
          <para>copy â copies the source List into the destination List</para>
        </listitem>

        <listitem>
          <para>binarySearch â searches for an element in an ordered List
          using the binary search algorithm.</para>
        </listitem>

        <listitem>
          <para>indexOfSubList â returns the index of the first sublist of one
          List that is equal to another.</para>
        </listitem>

        <listitem>
          <para>lastIndexOfSubList â returns the index of the last sublist of
          one List that is equal to another</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title><ulink
      url="http://java.sun.com/docs/books/tutorial/collections/interfaces/order.html">Object
      Ordering</ulink> - Comparable Interface</title>

      <para>A List l may be sorted as follows.</para>

      <programlisting>Collections.sort(l);</programlisting>

      <para> If the List consists of String elements, it will be sorted into
      alphabetical order. If it consists of Date elements, it will be sorted
      into chronological order.</para>

      <para>How does this happen? </para>

      <para>String and Date both implement the Comparable interface:</para>

      <programlisting>public interface Comparable&lt;T&gt; {
    public int compareTo(T o);
}</programlisting>

      <para>The compareTo method compares the receiving object with the
      specified object and returns:</para>

      <itemizedlist>
        <listitem>
          <para>negative - less than object argument.</para>
        </listitem>

        <listitem>
          <para>0 - equal to object argument.</para>
        </listitem>

        <listitem>
          <para>positive - greter than object argument.</para>
        </listitem>
      </itemizedlist>

      <para>If the specified object cannot be compared to the receiving
      object, the method throws a ClassCastException.</para>
    </section>
  </chapter>

  <chapter id="gui">
    <title>Graphic User Interface</title>

    <section id="gui_overview">
      <title>Overview</title>

      <section>
        <title><ulink url="http://java.sun.com/products/jfc">Java Foundation
        Classes</ulink></title>

        <para>The Java Foundation Classes (JFC) are a set of APIs developed to
        support the creation of graphical user interfaces (GUIs) and to
        enhance the user interactivity. Basically, the JFC is composed by the
        following technologies:</para>

        <itemizedlist>
          <listitem>
            <para><emphasis role="bold">Abstract Window Toolkit
            (AWT):</emphasis> Comprises the APIs that enable the integration
            with the native window system, providing a basic set of graphic
            components and support for event handling.</para>
          </listitem>

          <listitem>
            <para><emphasis role="bold">Swing:</emphasis> APIs that complement
            the AWT to provide a more rich and complete set of graphical
            components, including pluggable Look-and-Feel features.</para>
          </listitem>

          <listitem>
            <para><emphasis role="bold">Java 2D:</emphasis> Enables the
            creation and manipulation of advanced 2D graphics, text and
            images. Includes APIs for generating output to printing
            devices.</para>
          </listitem>

          <listitem>
            <para><emphasis role="bold">Internationalization:</emphasis>
            Include APIs to support the development of applications that can
            interact with the users in their own languages and characters
            sets.</para>
          </listitem>

          <listitem>
            <para><emphasis role="bold">Accessibility: </emphasis>Provide APIs
            to enable the use of assistive technologies, increasing the
            accessibility for users with disabilities.</para>
          </listitem>
        </itemizedlist>

        <para>In this course we'll see only the two first technologies: the
        Abstract Window Toolkit (AWT) and the Swing.</para>

        <para><ulink url="../audio/SwingComments.wav"><inlinegraphic
        fileref="img/asf.gif" format="GIF" />Audio in Portuguese
        (Comments)</ulink></para>
      </section>

      <section>
        <title><ulink url="http://java.sun.com/products/jdk/awt">The Abstract
        Window Toolkit</ulink></title>

        <para>The AWT contains a set of classes for writing GUI programs, do
        layout managing and perform event handling. The AWT GUI components are
        considered "<emphasis>heavyweight</emphasis>" components, that is,
        they delegate to a native platform-specific peer on the host system.
        This have caused a lot of compatibility and performance problems,
        constraining the resources that could be disponibilized. Because these
        problems they were substituted by Swing components and won't be
        detailed here.</para>

        <figure>
          <title>AWT Peers</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="187px" contentwidth="438px"
                         fileref="img/GUI17.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/developer/onlineTraining/GUI/Swing1/shortcourse.html#JFCWidgets">Swing</ulink></title>

        <para>Swing is the main part of the JFC and was built to complement
        and resolve many of the AWT limitations. All the visual components are
        drew directly on the screen and only the containers
        <classname>JFrame</classname>, <classname>JDialog</classname>,
        <classname>JWindow</classname>, and <classname>JApplet</classname>
        that extend AWT components make calls to native peers. All the others
        components are considered "<emphasis>lightweight</emphasis>"
        components and have no dependency with the graphics resources of the
        operating system.</para>

        <para>Although many says the Swing API was heavy and slow in the
        beginning, the new implementations are becoming light and fast enough,
        enabling the creation of Java graphical interfaces that are robust and
        flexible.</para>

        <figure>
          <title>AWT similar components</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="455px" contentwidth="464px"
                         fileref="img/GUI37.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <figure>
          <title>New components</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="486px" contentwidth="411px"
                         fileref="img/GUI38.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/uiswing/components/panel.html">A
        GUI based example</ulink></title>

        <figure>
          <title>Converter of distances between US and metric.</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="200px" contentwidth="290px"
                         fileref="img/GUI39.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <section>
          <title><ulink
          url="http://java.sun.com/docs/books/tutorial/uiswing/components/example-1dot4/index.html#Converter">Classes
          in the Example Program</ulink></title>

          <figure>
            <title>Classes in the Example Program</title>

            <mediaobject>
              <imageobject>
                <imagedata contentdepth="180px" contentwidth="505px"
                           fileref="img/GUI40.gif" format="GIF" />
              </imageobject>
            </mediaobject>
          </figure>

          <itemizedlist>
            <listitem>
              <para>Create the <classname>ConversionPanel</classname>s (one
              for metric, another for U.S.).</para>
            </listitem>

            <listitem>
              <para>The <classname>ConversionPanel</classname> class provides
              a way of grouping all the controls that describe a particular
              set of distance measurements.</para>
            </listitem>

            <listitem>
              <para>The <classname>Unit</classname> class provides objects
              that group a description (such as "Centimeters") with a
              multiplier that indicates the number of units per meter (0.01,
              for example).</para>
            </listitem>
          </itemizedlist>
        </section>

        <section>
          <title>The Component Hierarchy</title>

          <literallayout>                                                             
                              Converter
                                  |
                               JPanel
                                  |
                  ----------------------------------
                  |                                |
            ConversionPanel                  ConversionPanel 
             (metricPanel)                      (usaPanel)
                  |                                |
       -----------------------          -----------------------
       |          |          |          |          |          |         
  JTextField  JComboBox  JSlider    JTextField  JComboBox  JSlider</literallayout>
        </section>

        <section>
          <title><ulink
          url="http://java.sun.com/docs/books/tutorial/uiswing/14painting/concepts.html">Drawing</ulink></title>

          <para>When the <classname>Converter</classname> application draws
          itself, here's what happens</para>

          <orderedlist>
            <listitem>
              <para>The <classname>JFrame</classname> draws itself.</para>
            </listitem>

            <listitem>
              <para>The <classname>Converter</classname> object draws itself,
              drawing a box around its area.</para>
            </listitem>

            <listitem>
              <para>One of the two <classname>ConversionPanels</classname>
              draws itself, drawing a box around its area.</para>
            </listitem>

            <listitem>
              <para>The contents of the <classname>ConversionPanel</classname>
              -- the <classname>JTextField</classname>, <classname>JComboBox
              </classname>and <classname>JSlider</classname> -- draw
              themselves.</para>
            </listitem>
          </orderedlist>

          <para><ulink url="../audio/Swing1.wav"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>
    </section>

    <section id="gui_swing_containers">
      <title><ulink
      url="http://java.sun.com/docs/books/tutorial/uiswing/components/toplevel.html">Swing
      Containers</ulink></title>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/uiswing/components/frame.html">JFrames</ulink></title>

        <para>The <classname>JFrame</classname> class provides windows for
        applets and applications. GUI based applications generally uses at
        least one frame.</para>

        <section>
          <title>Code Example</title>

          <programlisting>public class FrameWindow extends JFrame {
    boolean inAnApplet;
    JTextArea output;

    public FrameWindow() {
        // Calls the Frame constructor and adds components to the window
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                if (inAnApplet)
                    dispose();
                else System.exit(0);
            }
        });
    }

    . . .

    public static void main(String args[]) {
        FrameWindow window = new FrameWindow();
        window.inAnApplet = false;
        window.setTitle("FrameWindow Application");
        window.setSize(450, 200);
        window.setVisible(true);
    }
}</programlisting>
        </section>

        <section>
          <title>Other methods provided by
          <classname>JFrame</classname></title>

          <itemizedlist>
            <listitem>
              <para><methodname>String getTitle()</methodname> and void
              <methodname>setTitle(String)</methodname></para>

              <para>Returns or sets (respectively) the title of the frame's
              window.</para>
            </listitem>

            <listitem>
              <para><methodname>Image getIconImage()</methodname> and
              <methodname>void setIconImage(Image)</methodname></para>

              <para>Returns or sets (respectively) the image displayed when
              the window is iconified.</para>
            </listitem>

            <listitem>
              <para><methodname>JMenuBar getJMenuBar()</methodname> and void
              <methodname>setJMenuBar(JMenuBar)</methodname></para>

              <para>Returns or sets (respectively) the menu bar for this
              frame.</para>
            </listitem>
          </itemizedlist>

          <para><ulink url="../audio/Swing2.wav"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/uiswing/components/panel.html">Panels</ulink></title>

        <para>The <classname>JPanel</classname> class is a general-purpose
        <classname>Container</classname> subclass. You can use it as-is to
        hold components, or you can define a subclass to perform special
        functionality, such as event handling for the objects the
        <classname>JPanel</classname> contains.</para>

        <note>
          <para>The<classname> JApplet</classname> class is a
          <classname>JPanel</classname> subclass with special hooks to run in
          a browser or in other applet viewer.</para>
        </note>

        <section>
          <title>Code Example</title>

          <programlisting>JPanel p = new JPanel();
p.add(new JButton("Button 1"));
p.add(new JButton("Button 2"));
p.add(new JButton("Button 3"));</programlisting>

          <para>A <classname>JPanel</classname> subclass that draws a frame
          border around its contents.</para>

          <figure>
            <title>JPanel subclass.</title>

            <mediaobject>
              <imageobject>
                <imagedata contentdepth="96px" contentwidth="457px"
                           fileref="img/GUI16.gif" format="GIF" />
              </imageobject>
            </mediaobject>
          </figure>

          <programlisting>class FramedArea extends JPanel {
    public FramedArea() {
        . . .
        // Set the layout manager.
        // Add any components to this panel.
    }

    // Ensure that no component is placed on top of the frame.
    // The inset values were determined by trial and error.
    public Insets getInsets() {
        return new Insets(4, 4, 5, 5);
    }

    //Draw the frame at this Panel's edges.
    public void paint(Graphics g) {
        Dimension d = getSize();
        Color bg = getBackground();
        g.setColor(bg);
        g.draw3DRect(0, 0, d.width - 1, d.height - 1, true);
        g.draw3DRect(3, 3, d.width - 7, d.height - 7, false);
    }
}</programlisting>

          <para><ulink url="../audio/Swing3.wav"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>

      <section>
        <title><ulink
        url="/library/books/tutorial1.02/ui/components/dialog.html">Dialogs</ulink></title>

        <para>Swing provides support for custom dialogs with the
        <classname>JDialog</classname> class. It also provides a useful class,
        <classname>JOptionPane</classname>, that enables the creation of a
        variety of standard dialogs through its class methods.</para>

        <figure>
          <title>Dialog</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="109px" contentwidth="298px"
                         fileref="img/GUI41.jpg" format="JPG" />
            </imageobject>
          </mediaobject>
        </figure>

        <section>
          <title>Code Example</title>

          <programlisting>class SimpleDialog extends JDialog implements ActionListener {
    JFrame parent;
    JTextField field;
    JButton setButton;

    SimpleDialog(JFrame parent, String title) {
        super(parent, title, false);
        ...
        // Create and add components, such as the set button.   
        // Initialize this dialog to its preferred size.
        pack();
    }

    public void actionPerformed(ActionEvent event) {
        Object source = event.getSource();
        if (source == setButton)
            parent.setTitle(field.getText());
    }
}
     
// Here's the code that brings up the dialog:
SimpleDialog dialog = new SimpleDialog(this, "A Simple Dialog");
dialog.setVisible(true);</programlisting>
        </section>

        <section>
          <title><ulink
          url="http://java.sun.com/docs/books/tutorial/uiswing/components/dialog.html">JOptionPane</ulink></title>

          <para>The <classname>JOptionPane</classname> class displays standard
          dialogs that prompts the user for input or shows messages. Some of
          it's main methods are:</para>

          <informaltable>
            <tgroup cols="2">
              <tbody>
                <row>
                  <entry><emphasis role="bold">Method Name</emphasis></entry>

                  <entry><emphasis role="bold">Description</emphasis></entry>
                </row>

                <row>
                  <entry><methodname>showConfirmDialog</methodname></entry>

                  <entry>Asks a confirming question, showing the buttons
                  yes,no or cancel.</entry>
                </row>

                <row>
                  <entry><methodname>showInputDialog</methodname></entry>

                  <entry>Prompt the user for some input.</entry>
                </row>

                <row>
                  <entry><methodname>showMessageDialog</methodname></entry>

                  <entry>Tells the user about something.</entry>
                </row>

                <row>
                  <entry><methodname>showOptionDialog</methodname></entry>

                  <entry>The unification of the above three.</entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable>

          <para>The example below cretes a dialog that promps user to choose
          an option in a list.</para>

          <programlisting>Object[] options = { "Option 0", "Option 1", "Option 2", "Option 3" };
JOptionPane.showInputDialog(this, "Message", "Title", JOptionPane.QUESTION_MESSAGE,
                            null, options, options[2]); </programlisting>

          <figure>
            <title>A JOptionPane input dialog</title>

            <mediaobject>
              <imageobject>
                <imagedata contentdepth="126px" contentwidth="268px"
                           fileref="img/GUI43.gif" format="GIF" />
              </imageobject>
            </mediaobject>
          </figure>

          <para><ulink url="../audio/Swing4.wav"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>
    </section>

    <section id="gui_swing_components">
      <title><ulink
      url="http://java.sun.com/docs/books/tutorial/uiswing/components/index.html">Swing
      Components</ulink></title>

      <section>
        <title>Rules for Using Components</title>

        <section>
          <title>How to Add a Component to a Container</title>

          <para>For any <classname>Component</classname> object except a
          <classname>JFrame</classname> to display itself onscreen, you must
          first add it to a <classname>Container</classname> object.</para>

          <para>The <classname>Container</classname> class defines three
          methods for adding components:</para>

          <itemizedlist>
            <listitem>
              <para><methodname>add(Component comp)</methodname> method simply
              requires that you specify the component to add.</para>
            </listitem>

            <listitem>
              <para><methodname>add(Component comp, int ind)</methodname>
              method lets you add an argument specifying the integer position
              at which the component should be added. This argument is also
              used to determine the layout manager-dependent position at which
              the component should be added.</para>
            </listitem>

            <listitem>
              <para><methodname>add(String pos, Component comp)</methodname>
              method has as first argument a layout manager-dependent string
              that specifies the component's position to the layout
              manager.</para>
            </listitem>
          </itemizedlist>

          <note>
            <para>Adding a component to a container removes the component from
            the container it used to be in (if any).</para>
          </note>
        </section>

        <section>
          <title>What the Component Class Provides</title>

          <itemizedlist>
            <listitem>
              <para><emphasis role="bold">Basic drawing
              support</emphasis></para>

              <para><classname>Component</classname> provides the
              <methodname>paint(), update(), and repaint()</methodname>
              methods, which enable components to draw themselves on
              screen.</para>
            </listitem>

            <listitem>
              <para><emphasis role="bold">Event handling</emphasis></para>

              <para><classname>Component</classname> defines the
              general-purpose <methodname>handleEvent()</methodname> method
              and a group of methods such as <methodname>action()</methodname>
              that handle specific event types.</para>
            </listitem>

            <listitem>
              <para><emphasis role="bold">Appearance control:
              font</emphasis></para>

              <para><classname>Component</classname> provides methods to get
              and set the current font, and to get information about the
              current font.</para>
            </listitem>

            <listitem>
              <para><emphasis role="bold">Appearance control:
              color</emphasis></para>

              <para><classname>Component</classname> provides methods to get
              and set the foreground and background colors.</para>
            </listitem>

            <listitem>
              <para><emphasis role="bold">Image handling</emphasis></para>

              <para><classname>Component</classname> provides the basis for
              displaying images. Most containers can display images.</para>
            </listitem>

            <listitem>
              <para><emphasis role="bold">Onscreen size and position
              control</emphasis></para>

              <para><classname>Component</classname> provides methods that get
              or set (subject to layout manager oversight) the component's
              current size and location.</para>
            </listitem>
          </itemizedlist>

          <para><ulink url="../audio/Swing5.wav"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/uiswing/components/button.html">Buttons</ulink></title>

        <para>The JButton class provides a default button implementation. A
        button is a simple control that generates an action event when the
        user clicks it.</para>

        <figure>
          <title>Buttons</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="33px" contentwidth="396px"
                         fileref="img/GUI6.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <section>
          <title>Code Example</title>

          <programlisting>b1 = new JButton();
b1.setText("Disable middle button");
b1.setActionCommand(DISABLE);

b2 = new JButton("Middle button");

b3 = new JButton("Enable middle button");
b3.setEnabled(false);
b3.setActionCommand(ENABLE);

// Listen for actions on buttons 1 and 3.
b1.addActionListener(this);
b3.addActionListener(this);

...

public void actionPerformed(ActionEvent e) {
    String command = e.getActionCommand();
    if (command == DISABLE) { // User clicked "Disable middle button"
        b1.setEnabled(false);
        b2.setEnabled(false);
        b3.setEnabled(true);
    }
    if (command == ENABLE) { // User clicked "Enable middle button"
        b1.setEnabled(true);
        b2.setEnabled(true);
        b3.setEnabled(false);
    }
}</programlisting>

          <para><ulink url="../audio/Swing6.wav"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/uiswing/components/label.html">Labels</ulink></title>

        <para>The JLabel class provides an easy way of putting unselectable
        text in your program's GUI. Labels are aligned to the left of their
        drawing area, by default.</para>

        <figure>
          <title>Labels</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="176px" contentwidth="236px"
                         fileref="img/GUI43.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <section>
          <title>Code Example</title>

          <programlisting>ImageIcon icon = new ImageIcon("images/middle.gif");

JLabel lbl1 = new JLabel("Image and Text", JLabel.CENTER);
lbl1.setIcon(icon);

// Set the position of the text, relative to the icon:
lbl1.setVerticalTextPosition(JLabel.BOTTOM);
lbl1.setHorizontalTextPosition(JLabel.CENTER);

JLabel lbl2 = new JLabel("Text-Only Label");

JLabel lbl3 = new JLabel(icon);
lbl3.setHorizontalAlignment(JLabel.CENTER);</programlisting>
        </section>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/uiswing/components/button.html">Checkboxes</ulink></title>

        <para>Checkboxes are two-state buttons that can be either "selected"
        or "deselected" . When the user clicks a checkbox, the checkbox state
        changes and generates an action event. The
        <classname>JCheckBox</classname> class implements the Swing version of
        checkboxes.</para>

        <figure>
          <title>Checkbox</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="80px" contentwidth="100px"
                         fileref="img/GUI44.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <section>
          <title>Code Example</title>

          <programlisting>cb1 = new JCheckBox(); // Default state is "deselected" (false)
cb1.setText("Checkbox 1");

cb2 = new JCheckBox("Checkbox 2");

cb3 = new JCheckBox("Checkbox 3");
cb3.setSelected(true); // Set state to "selected" (true)

// Register a listener for the checkboxes
cb1.addItemListener(this);
cb2.addItemListener(this);
cb3.addItemListener(this);

...

public void itemStateChanged(ItemEvent e) {
    Object src = e.getItemSelectable();
    if (src == cb1) {
        if (e.getStateChange() == ItemEvent.SELECTED)
            System.out.println("Checkbox 1 selected.");
        else System.out.println("Checkbox 1 unselected.");
    } else if (src == cb2) {
        ...
    } else if (src == cb3) {
        ...
    }
}</programlisting>

          <para><ulink url="../audio/Swing7.wav"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/uiswing/components/button.html">Radio
        Buttons</ulink></title>

        <para>Radio buttons are similar to checkboxes with the difference that
        you can group them to ensure that only one checkbox is selected at a
        time. In Swing, each <classname>JRadioButton</classname> is added to a
        <classname>ButtonGroup</classname> so the group behaves as a set of
        radio buttons.</para>

        <figure>
          <title>Radiobutton</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="80px" contentwidth="120px"
                         fileref="img/GUI45.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <section>
          <title>Code Example</title>

          <programlisting>rb1 = new JRadioButton("RadioButton 1");

rb2 = new JRadioButton("RadioButton 2");
rb2.setSelected(true);

rb3 = new JRadioButton("RadioButton 3");

// Group the radio buttons
ButtonGroup grp = new ButtonGroup();
grp.add(rb1);
grp.add(rb2);
grp.add(rb3);

// Register a listener for the radio buttons
rb1.addActionListener(this);
rb2.addActionListener(this);
rb3.addActionListener(this);

...

public void actionPerformed(ActionEvent e) {
    Object src = e.getSource();
    if (src == rb1) {
        System.out.println("RadioButton 1 selected!");
    } else if (src == rb2) {
        ...
    } else if (src == rb3) {
        ...
    }
}</programlisting>
        </section>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/uiswing/components/combobox.html">Combo
        Boxes</ulink></title>

        <para>The <classname>JComboBox</classname> class provides a menu-like
        list of choices, accessed by a distinctive button. The user presses
        the button to bring up a "menu", and then chooses one of the
        items.</para>

        <figure>
          <title>Combo box</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="117px" contentwidth="177px"
                         fileref="img/GUI46.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <section>
          <title>Code Example</title>

          <programlisting>String[] str = { "Bird", "Cat", "Dog", "Rabbit", "Pig" };

// Create the combo box, select item at index 4
// Indices start at 0, so 4 specifies the pig

JComboBox cb = new JComboBox(str);
cb.setSelectedIndex(4);
cb.addActionListener(this);

...

public void actionPerformed(ActionEvent e) {
    JComboBox cb = (JComboBox) e.getSource();
    System.out.println("User chose " + ((String) cb.getSelectedItem()));
}</programlisting>

          <para><ulink url="../audio/Swing8.wav"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/uiswing/components/list.html">Lists</ulink></title>

        <para>The <classname>JList</classname> class provides an list of
        selectable items. These items can be composed of text, images, or
        both.</para>

        <figure>
          <title>List</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="158px" contentwidth="511px"
                         fileref="img/GUI12.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <section>
          <title>Code Example</title>

          <programlisting>// Build the lists, which allows multiple selections
String[] elements = { "uno", "dos", "tres", "cuatro", "cinco", ... };
spanish = new JList(elements);
spanish.addListSelectionListener(this);
spanish.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

italian = new JList(new DefaultListModel());
italian.addListSelectionListener(this);
italian.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

// Add data using the list model
DefaultListModel model = (DefaultListModel) italian.getModel();
model.addElement("uno");
model.addElement("due");
model.addElement("tre");
model.addElement("quattro");
model.addElement("cinque");

. . .

// Implementing the listener for the selection events
public void valueChanged(ListSelectionEvent e) {
        
    if (e.getValueIsAdjusting()) {
        if (e.getSource() == spanish) {
            int[] indices = spanish.getSelectedIndices();
            Object[] values = spanish.getSelectedValues();
            for (int i = 0; i &lt; indices.length; i++) {
                String item = (String) values[i];
                System.out.println("Select event occurred on item #" +
                       indices[i] + " (\"" + item + "\") in Spanish.");
            }
        } 
        else {            
            int[] indices = italian.getSelectedIndices();
            DefaultListModel model = (DefaultListModel) italian.getModel();
            for (int i = 0; i &lt; indices.length; i++) {
                String item = (String) model.getElementAt(indices[i]);
                System.out.println("Select event occurred on item #" +
                       indices[i] + " (\"" + item + "\") in Italian.");
            }
        }            
    }        
}</programlisting>
        </section>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/uiswing/components/scrollpane.html">Scroll
        Panes</ulink></title>

        <para>A <classname>JScrollPane</classname> manages a single child
        component, displaying as much of the component as space permits. By
        default, a scroll pane's scrollbars are visible only when they're
        needed.</para>

        <figure>
          <title>ScrollPane</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="127px" contentwidth="326px"
                         fileref="img/GUI14.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <section>
          <title>Scrollbar parameters</title>

          <itemizedlist>
            <listitem>
              <para>HORIZONTAL_SCROLLBAR_AS_NEEDED,
              VERTICAL_SCROOLBAR_AS_NEEDED</para>

              <para>The default value. Show each scrollbar only when it's
              needed.</para>
            </listitem>

            <listitem>
              <para>HORIZONTAL_SCROLLBAR_ALWAYS,
              VERTICAL_SCROLLBAR_ALWAYS</para>

              <para>Always show the scrollbars.</para>
            </listitem>

            <listitem>
              <para>HORIZONTAL_SCROLLBAR_NEVER,
              VERTICAL_SCROLLBAR_NEVER</para>

              <para>Never show scrollbars. You might use this option if you
              don't want the user to directly control what part of the child
              component is shown.</para>
            </listitem>
          </itemizedlist>
        </section>

        <section>
          <title>Code Example</title>

          <programlisting>JScrollPane scroll = new JScrollPane(aComponent, JScrollPane.VERTICAL_SCROLLBAR_ALWAYS, 
                                                 JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);</programlisting>

          <para><ulink url="../audio/Swing9.wav"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/uiswing/components/text.html">Text
        Components</ulink></title>

        <para>The <classname>JTextComponent</classname> derived classes
        display selectable text and, optionally, allow the user to edit the
        text. They can also support styled text and password fields.</para>

        <figure>
          <title>JTextComponent hierarchy</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="161px" contentwidth="495px"
                         fileref="img/GUI47.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <section>
          <title>TextField and TextArea</title>

          <para>From <classname>JTextComponent</classname> this classes
          inherit methods that allow them to set and get the current
          selection, enable and disable editing, get the currently selected
          text (or all the text), and set the text.</para>

          <figure>
            <title>JTextField and JTextArea components</title>

            <mediaobject>
              <imageobject>
                <imagedata contentdepth="134px" contentwidth="260px"
                           fileref="img/GUI15.gif" format="GIF" />
              </imageobject>
            </mediaobject>
          </figure>
        </section>

        <section>
          <title>Code Example</title>

          <programlisting>// Where instance variables are defined:
private JTextField textField;
private JTextArea textArea;

public void init() {

    textField = new JTextField(20);
    textField.addActionListener(this);

    textArea = new JTextArea(5, 20);
    textArea.setEditable(false);

    ...// Add the two components to the panel. 
}

public void actionPerformed(ActionEvent evt) {
    String text = textField.getText();
    textArea.append(text + "\n");
    textField.selectAll();
}</programlisting>

          <para><ulink url="../audio/Swing10.wav"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>
    </section>

    <section id="gui_swing_menus">
      <title><ulink
      url="http://java.sun.com/docs/books/tutorial/uiswing/components/menu.html">Swing
      Menus</ulink></title>

      <para>The following applet shows many of the menu features you're likely
      to use.</para>

      <figure>
        <title>Menu</title>

        <mediaobject>
          <imageobject>
            <imagedata contentdepth="151px" contentwidth="500px"
                       fileref="img/GUI13.gif" format="GIF" />
          </imageobject>
        </mediaobject>
      </figure>

      <section>
        <title>Menu Components</title>

        <itemizedlist>
          <listitem>
            <para><emphasis role="bold">JMenuBar</emphasis></para>

            <para>Represents the platform-dependent notion of a group of menus
            attached to a window. <classname>JMenuBar</classname>s cannot be
            bound to <classname>JPanels</classname>.</para>
          </listitem>

          <listitem>
            <para><emphasis role="bold">JPopupmenu</emphasis></para>

            <para>Represents a popup menu.</para>
          </listitem>

          <listitem>
            <para><emphasis role="bold">JSeparator </emphasis></para>

            <para>Implements a divider line to separate groups of menu
            itens.</para>
          </listitem>

          <listitem>
            <para><emphasis role="bold">JMenuItem</emphasis></para>

            <para>Each item in a menu is represented by a
            <classname>JMenuItem</classname> object.</para>
          </listitem>

          <listitem>
            <para><emphasis role="bold">JMenu</emphasis></para>

            <para><classname>JMenu</classname> enables you to create submenus
            by adding one menu to another.</para>
          </listitem>

          <listitem>
            <para><emphasis role="bold">JCheckboxMenuItem</emphasis></para>

            <para>Is a menu item that implements a check box.</para>
          </listitem>

          <listitem>
            <para><emphasis role="bold">JRadioButtonMenuItem</emphasis></para>

            <para>Is a menu item that implements a radio button, in which only
            one item in a group can be selected.</para>
          </listitem>
        </itemizedlist>

        <figure>
          <title>Menu-related classes hierarchy</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="239px" contentwidth="444px"
                         fileref="img/GUI48.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>
      </section>

      <section>
        <title>MenuContainer Interface</title>

        <para>To be able to contain a menu component, an object must adhere to
        the <classname>MenuContainer</classname> interface
        (<classname>JFrame</classname>, <classname>JMenu</classname>, and
        <classname>JMenuBar</classname> classes do)</para>
      </section>

      <section>
        <title>Code Example</title>

        <programlisting>public class MenuWindow extends JFrame 
    implements ActionListener, ItemListener {
    . . .
    public MenuWindow() {
        
        // Build the menu bar.
        mb = new JMenuBar();
        setJMenuBar(mb);
 
        // Build first menu in the menu bar.
        m1 = new JMenu("Menu 1", true);
        mb.add(m1);

        mi1_1 = new JMenuItem("Menu Item 1_1");
        m1.add(mi1_1);
        . . .

        // Build help menu.
        m5 = new JMenu("Menu 5");
        mb.add(m5); //just setting the help menu doesn't work; must add it
        mb.setHelpMenu(m5);

        mi5_1 = new JMenuItem("Menu Item 5_1");
        mi5_1.setMnemonic(KeyEvent.VK_5);
        m5.add(mi5_1);
        . . .

        // Build second menu in the menu bar.
        m2 = new JMenu("Menu 2");
        mb.add(m2);

        mi2_1 = new JCheckboxMenuItem("Menu Item 2_1");
        m2.add(mi2_1);
 
        // Build third menu in the menu bar.
        . . .
        
        // Register as an ActionListener for all menu items.
        m1.addActionListener(this);
        m2.addActionListener(this);
        m3.addActionListener(this);
                . . .
        // Register as ItemListener on checkbox menu item.
        mi2_1.addItemListener(this);
    }
    . . .
    public void actionPerformed(ActionEvent e) {
        output.append("\"" + e.getActionCommand() +
                      "\" action detected in menu labeled \"" +
                      ((JMenuItem)(e.getSource())).getLabel() + "\".\n");
    }

    public void itemStateChanged(ItemEvent e) {
        output.append("Item state change detected on item \"" +
                      e.getItem() + "\" (state is " +
                      ((e.getStateChange() == ItemEvent.SELECTED)? 
                            "selected)." : "deselected).") + "\n");
    }
}</programlisting>
      </section>
    </section>

    <section id="gui_handling_events">
      <title><ulink
      url="http://java.sun.com/docs/books/tutorial/uiswing/events/index.html">Handling
      Events</ulink></title>

      <section>
        <title>Definition</title>

        <para>When the user acts on a <classname>Component</classname> --
        clicking it or pressing the Return key, for example -- an
        <classname>Event</classname> is generated.</para>
      </section>

      <section>
        <title>Processing</title>

        <itemizedlist>
          <listitem>
            <para>Events are generated by event sources.</para>
          </listitem>

          <listitem>
            <para>One or more listeners can register to be notified about
            events of a particular kind from a particular source.</para>
          </listitem>

          <listitem>
            <para>Event handlers can be instances of any class. As long as a
            class implements an event listener interface.</para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title>To implement event handlers</title>

        <orderedlist>
          <listitem>
            <para>Code declaring that the class implements a listener
            interface:</para>

            <programlisting>public class MyClass implements ActionListener {</programlisting>
          </listitem>

          <listitem>
            <para>Code that registers an instance of the event handling class
            as a listener:</para>

            <programlisting>someComponent.addActionListener(instanceOfMyClass);</programlisting>
          </listitem>

          <listitem>
            <para>The implementation of the methods in the listener
            interface:</para>

            <programlisting>public void actionPerformed(ActionEvent e) {
     ...//code that reacts to the action...
}</programlisting>
          </listitem>
        </orderedlist>

        <note>
          <para>The AWT doesn't see every event that occurs. The AWT can see
          only those events that the platform-dependent code lets it
          see.</para>
        </note>
      </section>

      <section>
        <title>Handling Standard AWT Events</title>

        <table>
          <title>AWT Events</title>

          <tgroup cols="3">
            <thead>
              <row>
                <entry align="center">Listener Interface</entry>

                <entry align="center">Adapter Class</entry>

                <entry align="center">Methods</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry><interfacename>ActionListener</interfacename></entry>

                <entry>none</entry>

                <entry><methodname>actionPerformed</methodname></entry>
              </row>

              <row>
                <entry><interfacename>AdjustmentListener</interfacename></entry>

                <entry>none</entry>

                <entry><methodname>adjustmentValueChanged</methodname></entry>
              </row>

              <row>
                <entry><interfacename>ComponentListener</interfacename></entry>

                <entry><classname>ComponentAdapter</classname></entry>

                <entry><methodname>componentHidden componentMoved
                componentResized componentShown</methodname></entry>
              </row>

              <row>
                <entry><interfacename>ContainerListener</interfacename></entry>

                <entry><classname>ContainerAdapter</classname></entry>

                <entry><methodname>componentAdded
                componentRemoved</methodname></entry>
              </row>

              <row>
                <entry><interfacename>FocusListener</interfacename></entry>

                <entry><classname>FocusAdapter</classname></entry>

                <entry><methodname>focusGained focusLost</methodname></entry>
              </row>

              <row>
                <entry><interfacename>ItemListener</interfacename></entry>

                <entry>none</entry>

                <entry><methodname>itemStateChanged</methodname></entry>
              </row>

              <row>
                <entry><interfacename>KeyListener</interfacename></entry>

                <entry><classname>KeyAdapter</classname></entry>

                <entry><methodname>keyPressed keyReleased
                keyTyped</methodname></entry>
              </row>

              <row>
                <entry><interfacename>MouseListener</interfacename></entry>

                <entry><classname>MouseAdapter</classname></entry>

                <entry><methodname>mouseClicked mouseEntered mouseExited
                mousePressed mouseReleased</methodname></entry>
              </row>

              <row>
                <entry><interfacename>MouseMotionListener</interfacename></entry>

                <entry><classname>MouseMotionAdapter</classname></entry>

                <entry><methodname>mouseDragged
                mouseMoved</methodname></entry>
              </row>

              <row>
                <entry><interfacename>TextListener</interfacename></entry>

                <entry>none</entry>

                <entry><methodname>textValueChanged</methodname></entry>
              </row>

              <row>
                <entry><interfacename>WindowListener</interfacename></entry>

                <entry><classname>WindowAdapter</classname></entry>

                <entry><methodname>windowActivated windowClosed windowClosing
                windowDeactivated windowDeiconified windowIconified
                windowOpened</methodname></entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </section>

      <section>
        <title>AWT events are divided in 2 groups</title>

        <section>
          <title>Low-level events</title>

          <para>They represent window-system occurrences or low-level
          input:</para>

          <para>mouse and key events -- both of which result directly from
          user input .</para>
        </section>

        <section>
          <title>Semantic events</title>

          <para>These events are the result of component-specific user
          interaction:</para>

          <para>A button generates an action event when the user clicks
          it.</para>
        </section>
      </section>

      <section>
        <title>Using Adapters to Handle Events</title>

        <para>Most AWT listener interfaces contain more than one
        method.</para>

        <para>For example, the <interfacename>MouseListener</interfacename>
        interface:</para>

        <orderedlist>
          <listitem>
            <para><methodname>mousePressed</methodname></para>
          </listitem>

          <listitem>
            <para><methodname>mouseReleased</methodname></para>
          </listitem>

          <listitem>
            <para><methodname>mouseEntered</methodname></para>
          </listitem>

          <listitem>
            <para><methodname>mouseExited</methodname></para>
          </listitem>

          <listitem>
            <para><methodname>mouseClicked</methodname></para>
          </listitem>
        </orderedlist>

        <para>The AWT provides an adapter class for each listener interface
        with more than one method. For example, the
        <classname>MouseAdapter</classname> class implements the
        <interfacename>MouseListener</interfacename> interface.</para>

        <para>An adapter class implements empty versions of all its
        interface's methods:</para>

        <programlisting>/*
 * An example of extending an adapter class instead of
 * directly implementing a listener interface.
 */
public class MyClass extends MouseAdapter {
    ... 
        someObject.addMouseListener(this);
    ... 
    public void mouseClicked(MouseEvent e) {
        ...//Event handler implementation goes here...
    }
}</programlisting>
      </section>
    </section>

    <section id="gui_layout_manager">
      <title><ulink
      url="http://java.sun.com/docs/books/tutorial/uiswing/layout/index.html">Layout
      Managers</ulink></title>

      <section>
        <title>Definition</title>

        <para>A layout manager is an object that controls the size and the
        position of components in a container. Every
        <classname>Container</classname> object has a
        <classname>LayoutManager</classname> object that controls its
        layout.</para>
      </section>

      <section>
        <title>AWT has 5 Layout Managers classes</title>

        <orderedlist>
          <listitem>
            <para>FlowLayout</para>
          </listitem>

          <listitem>
            <para>GridLayout</para>
          </listitem>

          <listitem>
            <para>BorderLayout</para>
          </listitem>

          <listitem>
            <para>CardLayout</para>
          </listitem>

          <listitem>
            <para>GridBagLayout</para>
          </listitem>
        </orderedlist>
      </section>

      <section>
        <title>General Rules for Using Layout Managers</title>

        <section>
          <title>Default Managers</title>

          <itemizedlist>
            <listitem>
              <para>For <classname>JPanel</classname> objects, the default
              layout manager is an instance of the
              <classname>FlowLayout</classname> class.</para>
            </listitem>

            <listitem>
              <para>For <classname>JFrame</classname> objects, the default
              layout manager is an instance of the
              <classname>BorderLayout</classname> class.</para>
            </listitem>
          </itemizedlist>

          <para>This layout manager is automatically consulted every time the
          <classname>Container</classname> might need to change its
          appearance.</para>
        </section>

        <section>
          <title>How to Create a Layout Manager and Associate It with a
          Container</title>

          <itemizedlist>
            <listitem>
              <para>To use the default layout manager: Don't do anything. The
              constructor for each <classname>Container</classname> creates a
              layout manager instance and initializes the
              <classname>Container</classname> to use it.</para>
            </listitem>

            <listitem>
              <para>To use a non-default layout manager: Create an instance of
              the desired layout manager class and tell the
              <classname>Container</classname> to use it:</para>

              <programlisting>aContainer.setLayout(new CardLayout());</programlisting>
            </listitem>
          </itemizedlist>
        </section>

        <section>
          <title>Methods that result in calls to the Container's layout
          manager</title>

          <orderedlist>
            <listitem>
              <para><methodname>add(), remove(), removeAll()</methodname> -
              They add and remove <classname>Component</classname>s from a
              <classname>Container</classname>; you can call them at any
              time.</para>
            </listitem>

            <listitem>
              <para><methodname>doLayout()</methodname> - Is called as the
              result of any paint request to a
              <classname>Container</classname>. It requests that the
              <classname>Container</classname> place and size itself and the
              <classname>Component</classname>s it contains.</para>
            </listitem>

            <listitem>
              <para><methodname>getPreferredSize(), getMinimumSize(),
              getMaximumSize()</methodname> - They return the
              <classname>Container</classname>'s ideal size, minimum size and
              maximum size, respectively. The values returned are just hints;
              they have no effect unless your program enforces these
              sizes.</para>
            </listitem>
          </orderedlist>
        </section>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/uiswing/layout/border.html">BorderLayout</ulink></title>

        <figure>
          <title>BorderLayout</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="125px" contentwidth="210px"
                         fileref="img/GUI19.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <figure>
          <title>BorderLayout Expanded</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="283px" contentwidth="412px"
                         fileref="img/GUI18.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <section>
          <title>Behavior</title>

          <para>A <classname>BorderLayout</classname> has five areas: north,
          south, east, west, and center.</para>

          <para>If you enlarge the window, you'll see that the center area
          gets as much of the newly available space as possible. The other
          areas expand only as much as necessary to keep all available space
          filled.</para>
        </section>

        <section>
          <title>Code Example</title>

          <programlisting>setLayout(new BorderLayout());
setFont(new Font("Helvetica", Font.PLAIN, 14));
             
add(new JButton("North"), BorderLayout.NORTH);
add(new JButton("South"), BorderLayout.SOUTH);
add(new JButton("East"), BorderLayout.EAST);
add(new JButton("West"), BorderLayout.WEST);
add(new JButton("Center"), BorderLayout.CENTER);</programlisting>

          <note>
            <para>When adding a component to a container that uses
            <classname>BorderLayout</classname>, you must use the two-argument
            version of the <methodname>add()</methodname> method, and the
            second argument must be any of the constants showed in the code
            example. If you use the one-argument version of
            <methodname>add()</methodname>, or if you specify an invalid first
            argument, your component might not be visible.</para>
          </note>

          <para>To add a gap between the components you can use the
          constructor:</para>

          <programlisting>public BorderLayout(int horizontalGap, int verticalGap)</programlisting>
        </section>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/uiswing/layout/card.html">CardLayout</ulink></title>

        <figure>
          <title>CardLayout: Buttons</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="137px" contentwidth="282px"
                         fileref="img/GUI20.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <figure>
          <title>CardLayout: TextField</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="137px" contentwidth="282px"
                         fileref="img/GUI21.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <section>
          <title>Behavior</title>

          <para>The <classname>CardLayout</classname> class manages two or
          more components that share the same display space. Conceptually,
          each component is like a playing card in a stack, where only the top
          card is visible at any time.</para>
        </section>

        <section>
          <title>Code Example</title>

          <programlisting>    private final static String BUTTON_PANEL = "Panel with Buttons";
    private final static String TEXT_PANEL = "Panel with TextField";
    
    private JPanel cards;
    private JComboBox cbox;

    ...

    // Create the panels
    JPanel p1 = new JPanel();
    p1.add(new JButton("Button 1"));
    p1.add(new JButton("Button 2"));
    p1.add(new JButton("Button 3"));
    
    JPanel p2 = new JPanel();
    p2.add(new JTextField("TextField", 20));
    
    // Where the container is initialized
    cards = new JPanel();
    cards.setLayout(new CardLayout());
    cards.add(BUTTON_PANEL, p1);
    cards.add(TEXT_PANEL, p2);
    
    // Create a combobox to choose between the cards
    cbox = new JComboBox();
    cbox.addItem(BUTTON_PANEL);
    cbox.addItem(TEXT_PANEL);
    cbox.addActionListener(this);
    
    // Put the combo box in a panel to get a nicer look
    JPanel panel = new JPanel();
    panel.add(cbox);
    
    // Put it all together
    setLayout(new BorderLayout());
    add(panel, BorderLayout.NORTH);
    add(cards, BorderLayout.CENTER);

    ...

    // The code for the ActionListener implementation
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == cbox) {
            String option = (String) cbox.getSelectedItem();
            CardLayout layout = (CardLayout) cards.getLayout(); 
            layout.show(cards, option);
        }    
    }</programlisting>
        </section>

        <section>
          <title>Methods to chose a component</title>

          <programlisting>public void first(Container parent)
public void next(Container parent)
public void previous(Container parent)
public void last(Container parent)
public void show(Container parent, String name)</programlisting>
        </section>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/uiswing/layout/flow.html">FlowLayout</ulink></title>

        <figure>
          <title>FlowLayout</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="116px" contentwidth="346px"
                         fileref="img/GUI23.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <figure>
          <title>FlowLayout: Expanded</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="87px" contentwidth="417px"
                         fileref="img/GUI22.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <section>
          <title>Behaviour</title>

          <para><classname>FlowLayout</classname> puts components in a row,
          sized at their preferred size. If the horizontal space in the
          container is too small to put all the components in one row,
          <classname>FlowLayout</classname> uses multiple rows.</para>
        </section>

        <section>
          <title>Code Example</title>

          <programlisting>setLayout(new FlowLayout());
setFont(new Font("Helvetica", Font.PLAIN, 14));
             
add(new JButton("Button 1"));
add(new JButton("2"));
add(new JButton("Button 3"));
add(new JButton("Long-Named Button 4"));
add(new JButton("Button 5"));</programlisting>
        </section>

        <section>
          <title>FlowLayout constructors</title>

          <programlisting>public FlowLayout()
public FlowLayout(int alignment)
public FlowLayout(int alignment, int horizontalGap, int verticalGap)</programlisting>

          <para>Alignment argument must have the value:</para>

          <programlisting>FlowLayout.LEFT, FlowLayout.CENTER, or FlowLayout.RIGHT</programlisting>
        </section>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/uiswing/layout/grid.html">GridLayout</ulink></title>

        <figure>
          <title>GridLayout</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="125px" contentwidth="312px"
                         fileref="img/GUI24.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <figure>
          <title>GridLayout: Expanded</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="196px" contentwidth="381px"
                         fileref="img/GUI25.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <section>
          <title>Behaviour</title>

          <para><classname>GridLayout</classname> places components in a grid
          of cells. Each component takes all the available space within its
          cell, and each cell has exactly the same size. If the
          <classname>GridLayout</classname> window is resized, the
          <classname>GridLayout</classname> changes the cell size so that the
          cells are as large as possible.</para>
        </section>

        <section>
          <title>Code Example</title>

          <programlisting>// Construct a GridLayout with 2 columns and an unspecified number of rows
setLayout(new GridLayout(0, 2));
setFont(new Font("Helvetica", Font.PLAIN, 14));
             
add(new JButton("Button 1"));
add(new JButton("2"));
add(new JButton("Button 3"));
add(new JButton("Long-Named Button 4"));
add(new JButton("Button 5"));</programlisting>
        </section>

        <section>
          <title>GridLayout constructors</title>

          <programlisting>public GridLayout(int rows, int columns)
public GridLayout(int rows, int columns, int horizontalGap, int verticalGap)</programlisting>
        </section>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/uiswing/layout/gridbag.html">GridBagLayout</ulink></title>

        <figure>
          <title>GridBagLayout</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="173px" contentwidth="260px"
                         fileref="img/GUI26.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <figure>
          <title>GridBagLayout: Expanded</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="214px" contentwidth="318px"
                         fileref="img/GUI27.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <section>
          <title>Behaviour</title>

          <para><classname>GridBagLayout</classname> places components in a
          grid of rows and columns, allowing specified components to span
          multiple rows or columns. Not all rows or columns have to have the
          same height or width.</para>
        </section>

        <section>
          <title>Specifying Constraints</title>

          <para><classname>GridBagLayout</classname> specifies the size and
          position characteristics of its components by specifying constraints
          for each component:</para>

          <programlisting>GridBagLayout gridbag = new GridBagLayout();
GridBagConstraints constraints = new GridBagConstraints();
setLayout(gridbag);

// For each component to be added to this container:

// Create the component
JButton button = new JButton("Button");

// Set instance variables in the GridBagConstraints instance
constraints.fill = GridBagConstraints.BOTH;
constraints.gridheight = 2;
constraints.weighty = 1.0;

// Add the component with the constraints
add(button, constraints);</programlisting>

          <para><classname>GridBagConstraints</classname> instance
          variables:</para>

          <programlisting>gridx, gridy, gridwidth, gridheight, fill, ipadx, ipady,
insets, anchor, weightx, weighty.</programlisting>
        </section>

        <section>
          <title>Code Example</title>

          <programlisting>    // Set the layout and create the constraints object
    setLayout(new GridBagLayout());
    GridBagConstraints c = new GridBagConstraints();
    
    // Define the common constraints
    c.fill = GridBagConstraints.BOTH;
    c.weightx = 1.0;
    c.weighty = 1.0;
                    
    // Create the components
    JButton b1 = new JButton("Button1"); // Row 0, Col 0
    add(b1, c);
    
    JButton b2 = <classname>new JButton("Button2"); // Row 0, Col 1
    c.gridx = 1;  
    add(b2, c);
    
    JButton b3 = new JButton("Button3"); // Row 0, Col 2 
    c.gridx = 2;        
    add(b3, c);
    
    JButton b4 = new JButton("Button4"); // Row 0, Col 3
    c.gridx = 3;          
    add(b4, c);
    
    JButton b5 = new JButton("Button5"); // Row 1, Col 0, Width 4 
    c.gridy = 1;
    c.gridx = 0;
    c.gridwidth = 4;
    add(b5, c);
    
    JButton b6 = new JButton("Button6"); // Row 2, Col 0, Width 3
    c.gridy = 2;
    c.gridx = 0;
    c.gridwidth = 3;        
    add(b6, c);
    
    JButton b7 = new JButton("Button7"); // Row 2, Col 3, Width 1
    c.gridx = 3;
    c.gridwidth = 1;
    add(b7, c);
    
    JButton b8 = new JButton("Button8"); // Row 3, Col 0, Height 2
    c.ipady = 20; // Make the component taller
    c.gridy = 3;
    c.gridx = 0;
    c.gridheight = 2;
    add(b8, c);
    
    JButton b9 = new JButton("Button9"); // Row 3, Col 1, Height 1
    c.ipady = 0; // Reset the default value
    c.gridy = 3;
    c.gridx = 1;
    c.gridwidth = 3;
    c.gridheight = 1;
    add(b9, c);
    
    JButton b10 = new JButton("Button10"); // Row 4, Col 1
    c.ipady = 40; // Make the component taller
    c.gridy = 4; 
    add(b10, c);</classname></programlisting>
        </section>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/uiswing/layout/custom.html">Custom
        Layout Manager</ulink></title>

        <figure>
          <title>Custom Layout</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="193px" contentwidth="207px"
                         fileref="img/GUI28.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <figure>
          <title>Custom Layout: Expanded</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="225px" contentwidth="399px"
                         fileref="img/GUI29.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <section>
          <title>To create a new Layout Manager</title>

          <para>A layout manager has just to implement the
          <classname>LayoutManager</classname> Interface.</para>
        </section>

        <section>
          <title>The LayoutManager interface</title>

          <itemizedlist>
            <listitem>
              <programlisting>public void addLayoutComponent(String name, Component comp)</programlisting>

              <para>Called only by the <classname>Container</classname>
              <methodname>add(name, component)</methodname> method. Layout
              managers that don't require that their components have names
              generally do nothing in this method.</para>
            </listitem>

            <listitem>
              <programlisting>public void removeLayoutComponent(Component comp) </programlisting>

              <para>Called by the <classname>Container</classname>
              <methodname>remove()</methodname> and
              <methodname>removeAll()</methodname> methods. Layout managers
              that don't require that their components have names generally do
              nothing in this method, since they can query the container for
              its components using the <classname>Container</classname>
              <methodname>getComponents()</methodname> method.</para>
            </listitem>

            <listitem>
              <programlisting>public Dimension preferredLayoutSize(Container parent)</programlisting>

              <para>Called by the <classname>Container</classname>
              <methodname>getPreferredSize()</methodname> method. This method
              should calculate the ideal size of the parent, assuming that the
              components it contains will be at or above their preferred
              sizes.</para>
            </listitem>

            <listitem>
              <programlisting>public Dimension minimumLayoutSize(Container parent)</programlisting>

              <para>Called by the <classname>Container</classname>
              <methodname>minimumSize()</methodname> method. This method
              should calculate the minimum size of the parent, assuming that
              the components it contains will be at or above their minimum
              sizes.</para>
            </listitem>

            <listitem>
              <programlisting>public void layoutContainer(Container parent)</programlisting>

              <para>Called when the container is first displayed, and every
              time its size changes. A layout manager's
              <methodname>layoutContainer()</methodname> method doesn't
              actually draw Components. It simply invokes each Component's
              <methodname>resize(), move(), and reshape()</methodname> methods
              to set the Component's size and position.</para>
            </listitem>
          </itemizedlist>
        </section>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/uiswing/layout/none.html">No
        Layout Manager (Absolute Positioning)</ulink></title>

        <figure>
          <title>No Layout Manager</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="130px" contentwidth="260px"
                         fileref="img/GUI30.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <figure>
          <title>No Layout Manager: Expanded</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="195px" contentwidth="330px"
                         fileref="img/GUI31.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <section>
          <title>If possible use a Layout Manager</title>

          <para>Layout managers make it easy to resize a container and adjust
          to platform-dependent component appearance and to different font
          sizes. They also can be reused easily by other containers and other
          programs.</para>
        </section>

        <section>
          <title>Absolute Positioning Code Example</title>

          <programlisting>public class NoneWindow extends Frame {
    private boolean laidOut = false;
    private JButton b1, b2, b3;

    public NoneWindow() {
        super();
        setLayout(null);

        b1 = new JButton("one");
        b2 = new JButton("two");
        b3 = new JButton("three");

        add(b1);
        add(b2);
        add(b3);
    }

    public void paint(Graphics g) {
        if (!laidOut) {
            Insets insets = insets();
            b1.reshape(50 + insets.left, 5 + insets.top, 50, 20);
            b2.reshape(70 + insets.left, 35 + insets.top, 50, 20);
            b3.reshape(130 + insets.left, 15 + insets.top, 50, 30);
            laidOut = true;
        }
    }
 
    . . .
}</programlisting>
        </section>
      </section>
    </section>

    <section id="gui_awt_graphics">
      <title>AWT Graphics</title>

      <section>
        <title>Graphics Object</title>

        <section>
          <title>Definition</title>

          <para><classname>Graphics</classname> objects are the key to all
          drawing. They support the two basic kinds of drawing: primitive
          graphics (such as lines, rectangles, and text) and images. They also
          provide a drawing context by maintaining state such as the current
          drawing area and the current drawing color.</para>
        </section>

        <section>
          <title>The Coordinate System</title>

          <figure>
            <title>Coordinate System</title>

            <mediaobject>
              <imageobject>
                <imagedata contentdepth="193px" contentwidth="357px"
                           fileref="img/GUI32.gif" format="GIF" />
              </imageobject>
            </mediaobject>
          </figure>

          <note>
            <para>Each <classname>Component</classname> has its own integer
            coordinate system, ranging from (0, 0) to (width - 1, height -
            1).</para>
          </note>
        </section>

        <section>
          <title>Drawing Shapes</title>

          <para>The <classname>Graphics</classname> class defines methods for
          drawing the following kinds of shapes:</para>

          <itemizedlist>
            <listitem>
              <para><emphasis role="bold">Lines:</emphasis>
              <methodname>drawLine()</methodname>, which draws a line in the
              <classname>Graphics</classname> object's current color, which is
              initialized to the <classname>Component</classname>'s foreground
              color.</para>
            </listitem>

            <listitem>
              <para><emphasis role="bold">Rectangles:</emphasis>
              <methodname>drawRect(), fillRect(), and clearRect()</methodname>
              -- where <methodname>fillRect()</methodname> fills a rectangle
              with the <classname>Graphics</classname> object's current color,
              and <methodname>clearRect()</methodname> fills a rectangle with
              the <classname>Component</classname>'s background color.</para>
            </listitem>

            <listitem>
              <para><emphasis role="bold">Raised or lowered
              rectangles:</emphasis><methodname> draw3DRect() and
              fill3DRect().</methodname></para>
            </listitem>

            <listitem>
              <para><emphasis role="bold">Round-edged
              rectangles:</emphasis><methodname> drawRoundRect() and
              fillRoundRect().</methodname></para>
            </listitem>

            <listitem>
              <para><emphasis role="bold">Ovals:</emphasis><methodname>
              drawOval() and fillOval().</methodname></para>
            </listitem>

            <listitem>
              <para><emphasis role="bold">Arcs:</emphasis><methodname>
              drawArc() and fillArc().</methodname></para>
            </listitem>

            <listitem>
              <para><emphasis role="bold">Polygons:</emphasis><methodname>
              drawPolygon() and fillPolygon().</methodname></para>
            </listitem>
          </itemizedlist>

          <para><ulink url="../audio/Gui29.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>

        <section>
          <title>A Shape Sampler</title>

          <figure>
            <title>Shape Sampler</title>

            <mediaobject>
              <imageobject>
                <imagedata contentdepth="93px" contentwidth="543px"
                           fileref="img/GUI33.gif" format="GIF" />
              </imageobject>
            </mediaobject>
          </figure>

          <para><emphasis role="bold">Code:</emphasis></para>

          <programlisting>Color bg = getBackground();
Color fg = getForeground();
. . .
// drawLine()
g.drawLine(x, y + rectHeight, x + rectWidth, y); // x1, y1, x2, y2
. . .
// drawRect()
g.drawRect(x, y, rectWidth, rectHeight); // x, y, width, height
. . .
// draw3DRect() 
g.setColor(bg);
g.draw3DRect(x, y, rectWidth, rectHeight, true);
g.setColor(fg);
. . .
// drawArc() 
g.drawArc(x, y, rectWidth, rectHeight, 90, 135); // x, y, w, h
. . .
// drawPolygon() 
Polygon polygon = new Polygon();
polygon.addPoint(x, y);
polygon.addPoint(x+rectWidth, y+rectHeight);
polygon.addPoint(x, y+rectHeight);
polygon.addPoint(x+rectWidth, y);
//polygon.addPoint(x, y); //don't complete; fill will, draw won't
g.drawPolygon(polygon); 
. . .
// fillRect() 
g.fillRect(x, y, rectWidth, rectHeight); // x, y, width, height
. . .
// fill3DRect() 
g.setColor(bg);
g.fill3DRect(x, y, rectWidth, rectHeight, true);
g.setColor(fg);
. . .
// fillArc() 
g.fillArc(x, y, rectWidth, rectHeight, 90, 135); // x, y, w, h
. . .
// fillPolygon() 
Polygon filledPolygon = new Polygon();
filledPolygon.addPoint(x, y);
filledPolygon.addPoint(x+rectWidth, y+rectHeight);
filledPolygon.addPoint(x, y+rectHeight);
filledPolygon.addPoint(x+rectWidth, y);
//filledPolygon.addPoint(x, y);
g.fillPolygon(filledPolygon); </programlisting>

          <para><ulink url="../audio/Gui30.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>

        <section>
          <title>DrawingText</title>

          <figure>
            <title>Drawing Text</title>

            <mediaobject>
              <imageobject>
                <imagedata contentdepth="218px" contentwidth="491px"
                           fileref="img/GUI34.gif" format="GIF" />
              </imageobject>
            </mediaobject>
          </figure>

          <section>
            <title>Graphics Methods for drawing text</title>

            <programlisting>public void drawString(String data, int x, int y);
public void drawChars(char data[], int offset, int length, int x, int y);
public void drawBytes(byte data[], int offset, int length, int x, int y);</programlisting>

            <note>
              <para>For the text drawing methods, <emphasis>x</emphasis> and
              <emphasis>y</emphasis> are integers that specify the position of
              the lower left corner of the text. To be precise, the
              <emphasis>y</emphasis> coordinate specifies the baseline of the
              text.</para>
            </note>
          </section>

          <section>
            <title>FontMetrics objects are used to get information about a
            font</title>

            <programlisting>boolean textFits = false;
Font font = g.getFont();
FontMetrics fontMetrics = g.getFontMetrics();
while (!textFits) {
    if ((fontMetrics.getHeight() &lt;= maxCharHeight) &amp;&amp;
        (fontMetrics.stringWidth("drawRoundRect()") &lt;= gridWidth)) {
        textFits = true;
    } else {
        g.setFont(font = new Font(font.getName(), font.getStyle(),
                                  font.getSize() - 1));
        fontMetrics = g.getFontMetrics();
    }
}</programlisting>

            <para>Methods that return information about a font's vertical
            size:</para>

            <programlisting>getAscent(), getMaxAscent(), getDescent(), getMaxDescent(), getHeight(), getLeading()</programlisting>

            <para><ulink url="../audio/Gui31.asf"><inlinegraphic
            fileref="img/asf.gif" format="GIF" />Audio in
            Portuguese</ulink></para>
          </section>
        </section>
      </section>
    </section>

    <section id="gui_images">
      <title>Images</title>

      <section>
        <title>Loading Images</title>

        <para>The <classname>Applet</classname> class uses two
        <methodname>getImage()</methodname> methods to load images:</para>

        <itemizedlist>
          <listitem>
            <para><methodname>public Image getImage(URL
            url)</methodname></para>
          </listitem>

          <listitem>
            <para><methodname>public Image getImage(URL url, String
            name)</methodname></para>
          </listitem>
        </itemizedlist>

        <para>The <classname>Toolkit</classname> class declares two more
        <methodname>getImage()</methodname> methods to load images:</para>

        <itemizedlist>
          <listitem>
            <para><methodname>public abstract Image getImage(URL
            url)</methodname></para>
          </listitem>

          <listitem>
            <para><methodname>public abstract Image getImage(String
            filename)</methodname></para>
          </listitem>
        </itemizedlist>

        <programlisting>Toolkit toolkit = Toolkit.getDefaultToolkit();
Image image1 = toolkit.getImage("imageFile.gif");
Image image2 = toolkit.getImage(new URL("http://java.sun.com/graphics.gif"));</programlisting>

        <section>
          <title>Creating Images with MemoryImageSource</title>

          <para>With the help of an image producer such as the
          <classname>MemoryImageSource</classname> class, you can construct
          images from scratch:</para>

          <programlisting>int w = 100;
int h = 100;
int[] pix = new int[w * h];
int index = 0;
for (int y = 0; y &lt; h; y++) {
    int red = (y * 255) / (h - 1);
    for (int x = 0; x &lt; w; x++) {
          int blue = (x * 255) / (w - 1);
          pix[index++] = (255 &lt;&lt; 24) | (red &lt;&lt; 16) | blue;
    }
}
Image img = createImage(new MemoryImageSource(w, h, pix, 0, w));</programlisting>
        </section>
      </section>

      <section>
        <title>Displaying Images</title>

        <itemizedlist>
          <listitem>
            <para>Normal size in the upper left corner of the
            <classname>Component</classname> area (0, 0):</para>

            <para><methodname>g.drawImage(image, 0, 0,
            this);</methodname></para>
          </listitem>

          <listitem>
            <para>Scaled to be 300 pixels wide and 62 pixels tall, starting at
            the coordinates (90, 0):</para>

            <para><methodname>g.drawImage(myImage, 90, 0, 300, 62,
            this);</methodname></para>
          </listitem>
        </itemizedlist>

        <note>
          <para>The <methodname>drawImage()</methodname> method returns after
          displaying the image data that has been loaded, so far.</para>
        </note>

        <para><ulink url="../audio/Gui32.asf"><inlinegraphic
        fileref="img/asf.gif" format="GIF" />Audio in
        Portuguese</ulink></para>
      </section>

      <section>
        <title>Image Filters</title>

        <figure>
          <title>Image Filters</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="77px" contentwidth="479px"
                         fileref="img/GUI35.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <itemizedlist>
          <listitem>
            <para>An image producer: It produces raw data for
            <classname>Image</classname> objects and implements the
            <interfacename>ImageProducer</interfacename> interface.</para>
          </listitem>

          <listitem>
            <para>An image consumer: It is an object interested in data
            produced by image producers and implements the
            <interfacename>ImageConsumer</interfacename> interface.</para>
          </listitem>

          <listitem>
            <para>An image consumer: It is an object interested in data
            produced by image producers and implements the
            <interfacename>ImageConsumer</interfacename> interface.</para>
          </listitem>
        </itemizedlist>

        <section>
          <title>Using an Image Filter</title>

          <para>Code for a rotation filter:</para>

          <programlisting>ImageFilter filter = new RotateFilter(angle);
ImageProducer producer = new FilteredImageSource(sourceImage.getSource(), filter);
resultImage = createImage(producer);
repaint();</programlisting>
        </section>

        <section>
          <title>Writing an Image Filter</title>

          <para>Creating an <classname>ImageFilter</classname>
          subclass:</para>

          <para>Image filters implement the
          <interfacename>ImageConsumer</interfacename> interface.</para>

          <programlisting>void setDimensions(int width, int height);
void setProperties(Hashtable props);
void setColorModel(ColorModel model);
void setHints(int hintflags);
void setPixels(int x, int y, int w, int h,
               ColorModel model, byte pixels[],
               int off, int scansize);
void setPixels(int x, int y, int w, int h,
               ColorModel model, int pixels[],
               int off, int scansize);
void imageComplete(int status);</programlisting>

          <note>
            <para>The <classname>ImageFilter</classname> class implements all
            the above methods so that they forward the method data to the
            filter's consumer.</para>
          </note>

          <para><ulink url="../audio/Gui33.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>

      <section>
        <title>The <methodname>setPixels()</methodname>method</title>

        <figure>
          <title>setPixels() Method</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="454px" contentwidth="472px"
                         fileref="img/GUI36.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <itemizedlist>
          <listitem>
            <para><emphasis role="bold">x, y</emphasis></para>

            <para>Specify the location within the image at which this
            rectangle begins.</para>
          </listitem>

          <listitem>
            <para><emphasis role="bold">w, h</emphasis></para>

            <para>Specify the width and height, in pixels, of this
            rectangle.</para>
          </listitem>

          <listitem>
            <para><emphasis role="bold">model</emphasis></para>

            <para>Specifies the color model used by the data in the pixels
            array.</para>
          </listitem>

          <listitem>
            <para><emphasis role="bold">pixels[]</emphasis></para>

            <para>Specifies an array of pixels.</para>
          </listitem>

          <listitem>
            <para><emphasis role="bold">offset</emphasis></para>

            <para>Specifies the index of the first pixel in the
            rectangle.</para>
          </listitem>

          <listitem>
            <para><emphasis role="bold">scansize</emphasis></para>

            <para>Specifies the width of each row in the pixels array.</para>
          </listitem>
        </itemizedlist>

        <para><ulink url="../audio/Gui34.asf"><inlinegraphic
        fileref="img/asf.gif" format="GIF" />Audio in
        Portuguese</ulink></para>
      </section>
    </section>
  </chapter>

  <chapter id="distributed_programming">
    <title>Distributed Programming</title>

    <section id="distributed_programming_the_client_server_model">
      <title><ulink url="/dilvan/thesis.phd/servers.html#HEADING1-1">The
      Client/Server Model</ulink></title>

      <section>
        <title>Distributed System</title>

        <para>A distributed computer system contains software programs and
        data resources dispersed across independent computers connected
        through a communication network.</para>
      </section>

      <section>
        <title>Advantages</title>

        <itemizedlist>
          <listitem>
            <para>It allows users of individual, networked computers to share
            data and processing power, often over long distances.</para>
          </listitem>

          <listitem>
            <para>Distribution can also enhance availability, reliability and
            performance.</para>
          </listitem>
        </itemizedlist>

        <figure>
          <title>Heterogeneous network</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="473px" contentwidth="675px"
                         fileref="img/Servers1.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <section>
          <title>Coordination Models</title>

          <para>A coordination model establishes logical roles and associated
          behaviours (for applications that assume such roles) for executing
          distributed interactions.</para>

          <para><ulink url="../audio/Servers1.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>

      <section>
        <title>The client</title>

        <para>Requests an operation or service that some other application,
        the server, provides.</para>
      </section>

      <section>
        <title>The server</title>

        <para>Receives a client request, performs the requested service and
        returns to the client any results.</para>
      </section>

      <section>
        <title>Advantages</title>

        <itemizedlist>
          <listitem>
            <para>It offers simplicity in closely matching the flow of data
            with the control flow.</para>
          </listitem>

          <listitem>
            <para>It promotes modular, flexible, and extensive system
            designs.</para>
          </listitem>

          <listitem>
            <para>Data resources and computing services can be organized,
            integrated and used as a service.</para>
          </listitem>

          <listitem>
            <para>Widely used in distributed systems.</para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title>Communication</title>

        <itemizedlist>
          <listitem>
            <para>Servers communicate over a network.</para>
          </listitem>

          <listitem>
            <para>In Unix and Windows machines the network uses: TCP/IP &amp;
            UDP.</para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/networking/overview/networking.html">Networking
        Basics</ulink></title>

        <para>TCP and UDP protocols:</para>

        <figure>
          <title>Network Stack</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="198px" contentwidth="172px"
                         fileref="img/Servers2.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <para><ulink url="../audio/Servers2.asf"><inlinegraphic
        fileref="img/asf.gif" format="GIF" />Audio in
        Portuguese</ulink></para>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/networking/overview/networking.html">TCP</ulink></title>

        <section>
          <title>Definition</title>

          <para>TCP is a connection-based protocol that provides a reliable
          flow of data between two computers.</para>
        </section>

        <section>
          <title>Example</title>

          <para>HTTP</para>

          <para>ftp</para>

          <para>Telnet</para>
        </section>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/networking/overview/networking.html">UDP</ulink></title>

        <section>
          <title>Definition</title>

          <para>UDP is a protocol that sends independent packets of data,
          called datagrams from one computer to another with no guarantees
          about arrival.</para>
        </section>

        <section>
          <title>Example</title>

          <para>ping</para>
        </section>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/networking/overview/networking.html">Ports</ulink></title>

        <section>
          <title>Definition</title>

          <para>The TCP and UDP protocols use ports to map incoming data to a
          particular process running on a computer.</para>

          <itemizedlist>
            <listitem>
              <para>Computers are identified by a 32-bit IP address.</para>

              <para>IP uses to deliver data to the right computer on the
              network.</para>
            </listitem>

            <listitem>
              <para>Ports are identified by a 16-bit number.</para>

              <para>TCP and UDP use to deliver the data to the right
              application.</para>
            </listitem>
          </itemizedlist>

          <figure>
            <title>Ports</title>

            <mediaobject>
              <imageobject>
                <imagedata contentdepth="264px" contentwidth="465px"
                           fileref="img/Servers3.gif" format="GIF" />
              </imageobject>
            </mediaobject>
          </figure>

          <para><ulink url="../audio/Servers3.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>

        <section>
          <title><ulink
          url="http://java.sun.com/docs/books/tutorial/networking/overview/networking.html">Port
          Numbers</ulink></title>

          <para>Range: from 0 to 65535</para>

          <para>Reserved: 0 - 1023 are restricted--they are reserved for use
          by services such as HTTP and ftp and other system services.</para>

          <figure>
            <title>Port Numbers</title>

            <mediaobject>
              <imageobject>
                <imagedata contentdepth="283px" contentwidth="436px"
                           fileref="img/Servers4.gif" format="GIF" />
              </imageobject>
            </mediaobject>
          </figure>
        </section>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/networking/sockets/index.html">Sockets</ulink></title>

        <itemizedlist>
          <listitem>
            <para>Are the basic components of interprocess
            communication.</para>
          </listitem>

          <listitem>
            <para>Provide access to the network transport protocols</para>
          </listitem>

          <listitem>
            <para>Are an endpoint of communication to which a name can be
            bound.</para>
          </listitem>
        </itemizedlist>

        <section>
          <title>Stream Socket</title>

          <para>A stream socket provides bidirectional, reliable, sequential,
          and unduplicated flow of data with no record boundaries. It uses
          TCP/IP protocol.</para>
        </section>

        <section>
          <title>Datagram Socket</title>

          <para>A datagram socket provides bidirectional flow of data, the
          data is divided in packages, the receiver can receive them in a
          different order from the sending sequence and may receive duplicated
          messages. It uses UDP protocol.</para>

          <para><ulink url="../audio/Servers4.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>
    </section>

    <section id="distributed_programming_urls">
      <title><ulink
      url="http://java.sun.com/docs/books/tutorial/networking/urls/index.html">URLs</ulink></title>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/networking/urls/definition.html">What
        Is a URL</ulink>?</title>

        <section>
          <title>Definition</title>

          <para>URL is an acronym that stands for Uniform Resource Locator and
          is a reference (an address) to a resource on the Internet.</para>
        </section>

        <section>
          <title>Components</title>

          <itemizedlist>
            <listitem>
              <para>Protocol identifier</para>

              <itemizedlist>
                <listitem>
                  <para>HTTP -
                  http://www.unicamp.br:80/lecture.html#TITLE</para>
                </listitem>

                <listitem>
                  <para>FTP - ftp://ftp.fee.unicamp.br/linux/Read.me</para>
                </listitem>

                <listitem>
                  <para>JDBC -
                  jdbc:msql://lcaee.fee.unicamp.br:4333/group1</para>
                </listitem>
              </itemizedlist>
            </listitem>

            <listitem>
              <para>Resource Name</para>

              <itemizedlist>
                <listitem>
                  <para>www.unicamp.br:80/lecture.html#TITLE</para>
                </listitem>

                <listitem>
                  <para>ftp.fee.unicamp.br/linux/Read.me</para>
                </listitem>

                <listitem>
                  <para>msql://lcaee.fee.unicamp.br:4333/group1</para>
                </listitem>
              </itemizedlist>
            </listitem>
          </itemizedlist>
        </section>

        <section>
          <title>Resource name format (protocol dependent):</title>

          <section>
            <title>host name</title>

            <para>www.unicamp.br</para>

            <para>the name of the machine the resource lives on.</para>
          </section>

          <section>
            <title>filename</title>

            <para>/lecture.html</para>

            <para>the pathname to the file on the machine.</para>
          </section>

          <section>
            <title>port number</title>

            <para>:80</para>

            <para>the port number to connect to (this is typically
            optional).</para>
          </section>

          <section>
            <title>reference</title>

            <para>#TITLE</para>

            <para>a reference to a named anchor within a resource.</para>

            <para><ulink url="../audio/Servers5.asf"><inlinegraphic
            fileref="img/asf.gif" format="GIF" />Audio in
            Portuguese</ulink></para>
          </section>
        </section>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/networking/urls/creatingUrls.html">Creating
        a URL</ulink></title>

        <para>Simplest way:</para>

        <programlisting>http://www.gamelan.com/
URL gamelan = new URL("http://www.gamelan.com/");</programlisting>

        <para>Creating a URL Relative to Another:</para>

        <programlisting>URL gamelan = new URL("http://www.gamelan.com/");
URL gamelanNetwork = new URL(gamelan, "Gamelan.network.html");
URL gamelanNetworkBottom = new URL(gamelanNetwork, "#BOTTOM");</programlisting>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/networking/urls/urlInfo.html">Parsing
        a URL</ulink></title>

        <para>getProtocol() - Returns the protocol identifier component of the
        URL;</para>

        <para>getHost()- Returns the host name component of the URL.;</para>

        <para>getPort() - Returns the port number component of the URL;</para>

        <para>getFile() - Returns the filename component of the URL;</para>

        <para>getRef() - Returns the reference component of the URL.</para>

        <note>
          <para>Remember that not all URL addresses contain these
          components.</para>
        </note>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/networking/urls/readingURL.html">Reading
        Directly from a URL</ulink></title>

        <programlisting>class OpenStreamTest {
     public static void main(String[] args) {
        try {
           URL yahoo = new URL("http://www.yahoo.com/");
           DataInputStream dis = new DataInputStream(yahoo.openStream());
           String inputLine;

           while ((inputLine = dis.readLine()) != null) {
              System.out.println(inputLine);
           }
           dis.close();
        } catch (Exception me) {
           System.out.println("Exception: " + me);
        }
     }
}</programlisting>

        <para><ulink url="../audio/Servers6.asf"><inlinegraphic
        fileref="img/asf.gif" format="GIF" />Audio in
        Portuguese</ulink></para>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/networking/urls/connecting.html">Connecting
        to a URL</ulink></title>

        <note>
          <para>Note: URLConnection is an HTTP-centric class--many of its
          methods are useful only when working with HTTP URLs.</para>
        </note>

        <programlisting>try {
     URL yahoo = new URL("http://www.yahoo.com/");
     yahoo.openConnection();
  } catch (MalformedURLException e) { // new URL() failed
     . . .
  } catch (IOException e) { // openConnection() failed
     . . .
}</programlisting>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/networking/urls/readingWriting.html">Reading
        from and Writing to a URLConnection</ulink></title>

        <section>
          <title>Reading from a URLConnection</title>

          <programlisting>import java.net.*;
import java.io.*;

class ConnectionTest {
    public static void main(String[] args) {
        try {
            URL yahoo = new URL("http://www.yahoo.com/");
            URLConnection yahooConnection = yahoo.openConnection();
            DataInputStream dis = new DataInputStream(yahooConnection.getInputStream());
            String inputLine;

            while ((inputLine = dis.readLine()) != null) {
                System.out.println(inputLine);
            }
            dis.close();
        } catch (MalformedURLException me) {
            System.out.println("MalformedURLException: " + me);
        } catch (IOException ioe) {
            System.out.println("IOException: " + ioe);
        }
    }
}</programlisting>

          <para><ulink url="../audio/Servers7.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>

      <section>
        <title>Writing to a URLConnection (cgi-bin script)</title>

        <orderedlist>
          <listitem>
            <para>Create a URL.</para>
          </listitem>

          <listitem>
            <para>Open a connection to the URL.</para>
          </listitem>

          <listitem>
            <para>Get an output stream from the connection. This output stream
            is connected to the standard input stream of the cgi-bin script on
            the server.</para>
          </listitem>

          <listitem>
            <para>Write to the output stream.</para>
          </listitem>

          <listitem>
            <para>Close the output stream.</para>
          </listitem>
        </orderedlist>

        <section>
          <title>Program</title>

          <programlisting>import java.io.*;
import java.net.*;

public class ReverseTest {
    public static void main(String[] args) {
        try {
            if (args.length != 1) {
                System.err.println("Usage:  java ReverseTest string_to_reverse");
                System.exit(1);
            }
            String stringToReverse = URLEncoder.encode(args[0]);

            URL url = new URL("http://java.sun.com/cgi-bin/backwards");
            URLConnection connection = url.openConnection();

            PrintStream outStream = new PrintStream(connection.getOutputStream());
            outStream.println("string=" + stringToReverse);
            outStream.close();

            DataInputStream inStream = new DataInputStream(connection.getInputStream());
            String inputLine;

            while ((inputLine = inStream.readLine()) != null) {
                System.out.println(inputLine);
            }
            inStream.close();
        } catch (MalformedURLException me) {
            System.err.println("MalformedURLException: " + me);
        } catch (IOException ioe) {
            System.err.println("IOException: " + ioe);
        }
    }
}</programlisting>
        </section>

        <section>
          <title>Output</title>

          <programlisting>Reverse Me
 reversed is:
eM esreveR</programlisting>

          <para><ulink url="../audio/Servers8.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>
    </section>

    <section id="distributed_programming_sockets_and_streams">
      <title>Sockets and Streams</title>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/networking/sockets/readingWriting.html">Stream
        Sockets</ulink></title>

        <section>
          <title><ulink
          url="http://java.sun.com/docs/books/tutorial/networking/sockets/definition.html">What
          is a Socket</ulink>?</title>

          <para>Definition: A socket is one end-point of a two-way
          communication link between two programs running on the
          network.</para>

          <para>Types:</para>

          <itemizedlist>
            <listitem>
              <para>Stream socket: class Socket.</para>
            </listitem>

            <listitem>
              <para>Stream socket (To listen): class ServerSocket.</para>
            </listitem>

            <listitem>
              <para>Datagram socket: class DatagramSocket.</para>
            </listitem>
          </itemizedlist>
        </section>

        <section>
          <title><ulink
          url="http://java.sun.com/docs/books/tutorial/networking/sockets/readingWriting.html">Reading
          from and Writing to a Stream Socket</ulink></title>

          <para>Example:</para>

          <programlisting>public class EchoTest {
   public static void main(String[] args) {
        Socket echoSocket = null;
        DataOutputStream os = null;
        DataInputStream is = null;
        DataInputStream stdIn = new DataInputStream(System.in);

        try {
              echoSocket = new Socket("taranis", 7);
              os = new DataOutputStream(echoSocket.getOutputStream());
              is = new DataInputStream(echoSocket.getInputStream());
        } catch (UnknownHostException e) { ... }
        catch (IOException e) { ... }

        if (echoSocket != null &amp;&amp; os != null &amp;&amp; is != null) {
           try {
                String userInput;

                while ((userInput = stdIn.readLine()) != null) {
                     os.writeBytes(userInput);
                     os.writeByte('\n');
                     System.out.println("echo: " + is.readLine());
                }
                os.close();
                is.close();
                echoSocket.close();
           } catch (IOException e) { ... } 
        }
   }
}</programlisting>

          <para><ulink url="../audio/Servers9.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>

        <section>
          <title><ulink
          url="http://java.sun.com/docs/books/tutorial/networking/sockets/clientServer.html">Writing
          the Server Side of a Stream Socket</ulink></title>

          <para>Listening and Communicating:</para>

          <itemizedlist>
            <listitem>
              <para>Request channel: Server do the listening.</para>
            </listitem>

            <listitem>
              <para>Communication channel: Created for each connection.</para>
            </listitem>
          </itemizedlist>

          <figure>
            <title>Listening and Communicating</title>

            <mediaobject>
              <imageobject>
                <imagedata contentdepth="125px" contentwidth="483px"
                           fileref="img/Servers5.gif" format="GIF" />
              </imageobject>
            </mediaobject>
          </figure>

          <para>Knock Knock Server:</para>

          <programlisting>Server: Knock! Knock!
Client: Who's there?
Server: Turnip
Client: Turnip who?
Server: Turnip the heat, it's cold in here! Want another? (y/n)</programlisting>

          <para>Classes:</para>

          <itemizedlist>
            <listitem>
              <para>KnockKnockServer: Implements the server</para>
            </listitem>

            <listitem>
              <para>KKState: Implements the application. It keeps track of the
              current joke, the current state and serves up the various text
              pieces of the joke depending on the current state.</para>
            </listitem>

            <listitem>
              <para>KnockKnockClient: Implements the client.</para>
            </listitem>
          </itemizedlist>

          <para><ulink url="../audio/Servers10.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>

          <para><ulink
          url="http://java.sun.com/docs/books/tutorial/networking/sockets/clientServer.html">The
          KnockKnockServer Class</ulink>:</para>

          <itemizedlist>
            <listitem>
              <para>Creates a ServerSocket to listen:</para>

              <programlisting>try {
    serverSocket = new ServerSocket(4444);
} catch (IOException e) { ... }</programlisting>
            </listitem>

            <listitem>
              <para>Waits until a clients connects:</para>

              <programlisting>Socket clientSocket = null;
try {
    clientSocket = serverSocket.accept();
} catch (IOException e) { ... }</programlisting>
            </listitem>

            <listitem>
              <para>Open an input and output stream to the socket:</para>

              <programlisting>DataInputStream is = new DataInputStream(
                 new BufferedInputStream(clientSocket.getInputStream()));
PrintStream os = new PrintStream(
             new BufferedOutputStream(clientSocket.getOutputStream(), 1024), false);
String inputLine, outputLine;
KKState kks = new KKState();


</programlisting>
            </listitem>

            <listitem>
              <para>Read from and write to the socket</para>

              <programlisting>outputLine = kks.processInput(null);
os.println(outputLine);
os.flush();

while ((inputLine = is.readLine()) != null) {
    outputLine = kks.processInput(inputLine);
    os.println(outputLine);
    os.flush();
    if (outputLine.equals("Bye."))
        break;
}</programlisting>
            </listitem>

            <listitem>
              <para>Close all the input and output streams:</para>

              <programlisting>os.close();
is.close();
clientSocket.close();
serverSocket.close();</programlisting>
            </listitem>
          </itemizedlist>

          <para><ulink url="../audio/Servers11.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>

          <para><ulink
          url="http://java.sun.com/docs/books/tutorial/networking/sockets/clientServer.html">The
          Knock Knock Client</ulink>:</para>

          <para>Differences from EchoTest:</para>

          <programlisting>kkSocket = new Socket("taranis", 4444);
            . . .
while ((fromServer = is.readLine()) != null) {
    System.out.println("Server: " + fromServer);
    if (fromServer.equals("Bye."))
        break;
    while ((c = System.in.read()) != '\n') {
        buf.append((char)c);
    }
    System.out.println("Client: " + buf);
    os.println(buf.toString());
    os.flush();
    buf.setLength(0);
}</programlisting>
        </section>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/networking/sockets/clientServer.html">Supporting
        Multiple Clients</ulink></title>

        <itemizedlist>
          <listitem>
            <para>Requests treated by one execution thread.</para>
          </listitem>

          <listitem>
            <para>Individual communication treated by:</para>

            <itemizedlist>
              <listitem>
                <para>Another process</para>
              </listitem>

              <listitem>
                <para>Another thread.</para>
              </listitem>
            </itemizedlist>
          </listitem>
        </itemizedlist>

        <figure>
          <title>Threads in Servers</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="336px" contentwidth="584px"
                         fileref="img/Servers6.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <para><ulink url="../audio/Servers12.asf"><inlinegraphic
        fileref="img/asf.gif" format="GIF" />Audio in
        Portuguese</ulink></para>
      </section>
    </section>

    <section id="distrtibuted_programming_datagrams">
      <title><ulink
      url="http://java.sun.com/docs/books/tutorial/networking/datagrams/index.html">Datagrams</ulink></title>

      <para>The UDP protocol provides a mode of network communication whereby
      applications send packets of data, called datagrams to one
      another:</para>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/networking/datagrams/definition.html">What
        Is a Datagram</ulink>?</title>

        <section>
          <title>Definition</title>

          <para>A datagram is an independent, self-contained message sent over
          the network whose arrival, arrival time, and content are not
          guaranteed.</para>
        </section>

        <section>
          <title>Java classes</title>

          <itemizedlist>
            <listitem>
              <para>DatagramPacket class;</para>
            </listitem>

            <listitem>
              <para>DatagramSocket class.</para>
            </listitem>
          </itemizedlist>
        </section>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/networking/datagrams/clientServer.html">Writing
        a Datagram Client and Server</ulink></title>

        <section>
          <title>The Quote server</title>

          <para>It waits for Datagram requests for quotes ans servers them in
          Datagram packets. Three classes implement the application:</para>

          <itemizedlist>
            <listitem>
              <para>QuoteServer</para>
            </listitem>

            <listitem>
              <para>QuoteServerThread.</para>
            </listitem>

            <listitem>
              <para>QuoteClient.</para>
            </listitem>
          </itemizedlist>
        </section>

        <section>
          <title>The QuoteServer Class</title>

          <para>Just calls the server thread:</para>

          <programlisting>class QuoteServer {
    public static void main(String[] args) {
        new QuoteServerThread().start();
    }
}</programlisting>

          <para><ulink url="../audio/Servers13.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>

        <section>
          <title>The QuoteServerThread Class</title>

          <para>The QuoteServerThread constructor:</para>

          <programlisting>QuoteServerThread() {
    super("QuoteServer");
    try {
        socket = new DatagramSocket();
        System.out.println("QuoteServer listening on port: " + socket.getLocalPort());
    } catch (java.net.SocketException e) {
        System.err.println("Could not create datagram socket.");
    }
    this.openInputFile();
}</programlisting>

          <para>The run() method's infinite loop:</para>

          <itemizedlist>
            <listitem>
              <para>Section that receives requests:</para>

              <programlisting>packet = new DatagramPacket(buf, 256);
socket.receive(packet);
address = packet.getAddress();
port = packet.getPort();</programlisting>
            </listitem>

            <listitem>
              <para>Section that construct the responses:</para>

              <programlisting>if (qfs == null)
    dString = new Date().toString();
else
    dString = getNextQuote();
dString.getBytes(0, dString.length(), buf, 0);
packet = new DatagramPacket(buf, buf.length, address, port);
socket.send(packet);</programlisting>
            </listitem>
          </itemizedlist>

          <para><ulink url="../audio/Servers14.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>

        <section>
          <title>The QuoteClient Class</title>

          <itemizedlist>
            <listitem>
              <para>The main() method for the client application:</para>

              <programlisting>int port;
InetAddress address;
DatagramSocket socket = null;
DatagramPacket packet;
byte[] sendBuf = new byte[256];

if (args.length != 2) {
     System.out.println("Usage: java DatagramClient &lt;hostname&gt; &lt;port#&gt;");
     return;
}</programlisting>
            </listitem>

            <listitem>
              <para>The client program sends a request to the server:</para>

              <programlisting>address = InetAddress.getByName(args[0]);
port = Integer.parseInt(args[1]);
packet = new DatagramPacket(sendBuf, 256, address, port);
socket.send(packet);
System.out.println("Client sent request packet.");</programlisting>
            </listitem>

            <listitem>
              <para>The client gets a response from the server:</para>

              <programlisting>packet = new DatagramPacket(sendBuf, 256);
socket.receive(packet);
String received = new String(packet.getData(), 0);
System.out.println("Client received packet: " + received);</programlisting>
            </listitem>
          </itemizedlist>
        </section>

        <section>
          <title>Run the Client</title>

          <programlisting>Quote of the Moment: Life is wonderful. Without it we'd all be dead.</programlisting>

          <para><ulink url="../audio/Servers15.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>
    </section>
  </chapter>

  <chapter id="applets">
    <title>Applets</title>

    <section id="applets_overview">
      <title><ulink
      url="http://java.sun.com/docs/books/tutorial/applet/overview/index.html">Overview</ulink></title>

      <section>
        <title>Definition</title>

        <para>An applet is a graphic Java program made to run as part of other
        programs, usually a Browser. It should extend the class Applet.</para>
      </section>

      <section>
        <title>Graphic Classes Hierarchy</title>

        <figure>
          <title>Graphic Classes</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="189px" contentwidth="555px"
                         fileref="img/Applets1.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <para>Applets extend the Panel Class.</para>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/applet/overview/appletMethods.html">The
        Applet class main methods</ulink></title>

        <programlisting>public class Simple extends Applet {
    . . .
    public void init() { . . . }
    public void start() { . . . }
    public void stop() { . . . }
    public void destroy() { . . . }
    . . .
}</programlisting>

        <itemizedlist>
          <listitem>
            <para>init()</para>

            <para>To initialize the applet each time it's loaded (or
            reloaded).</para>
          </listitem>

          <listitem>
            <para>start()</para>

            <para>To start the applet's execution.</para>
          </listitem>

          <listitem>
            <para>stop()</para>

            <para>To stop the applet's execution.</para>
          </listitem>

          <listitem>
            <para>destroy()</para>

            <para>To perform a final cleanup in preparation for
            unloading.</para>
          </listitem>
        </itemizedlist>

        <para><ulink url="../audio/Applet1.asf"><inlinegraphic
        fileref="img/asf.gif" format="GIF" />Audio in
        Portuguese</ulink></para>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/applet/overview/componentMethods.html">Methods
        for Drawing and Event Handling</ulink></title>

        <section>
          <title>For Drawing</title>

          <itemizedlist>
            <listitem>
              <para>paint()</para>

              <para>The basic display method. Many applets implement the
              paint() method to draw the applet's representation within a
              browser page.</para>
            </listitem>

            <listitem>
              <para>update()</para>

              <para>A method you can use along with paint() to improve drawing
              performance.</para>
            </listitem>
          </itemizedlist>
        </section>

        <section>
          <title>Event Handling</title>

          <para>The Component class defines several methods (such as action()
          and mouseDown()) for handling particular types of events, and then
          one catch-all method, handleEvent().</para>
        </section>

        <section>
          <title>GUI components</title>

          <itemizedlist>
            <listitem>
              <para>Buttons (java.awt.Button)</para>
            </listitem>

            <listitem>
              <para>Checkboxes (java.awt.Checkbox)</para>
            </listitem>

            <listitem>
              <para>Single-line text fields (java.awt.TextField)</para>
            </listitem>

            <listitem>
              <para>Larger text display and editing areas
              (java.awt.TextArea)</para>
            </listitem>

            <listitem>
              <para>Labels (java.awt.Label)</para>
            </listitem>

            <listitem>
              <para>Lists (java.awt.List)</para>
            </listitem>

            <listitem>
              <para>Pop-up lists of choices (java.awt.Choice)</para>
            </listitem>

            <listitem>
              <para>Sliders and scrollbars (java.awt.Scrollbar)</para>
            </listitem>

            <listitem>
              <para>Drawing areas (java.awt.Canvas)</para>
            </listitem>

            <listitem>
              <para>Menus (java.awt.Menu, java.awt.MenuItem,
              java.awt.CheckboxMenuItem)</para>
            </listitem>

            <listitem>
              <para>Containers (java.awt.Panel, java.awt.Window and its
              subclasses)</para>
            </listitem>
          </itemizedlist>
        </section>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/applet/overview/security.html">What
        applets can not do</ulink></title>

        <itemizedlist>
          <listitem>
            <para>An applet can't load libraries or define native
            methods.</para>
          </listitem>

          <listitem>
            <para>It can't ordinarily read or write files on the host that's
            executing it.</para>
          </listitem>

          <listitem>
            <para>It can't make network connections except to the host that it
            came from.</para>
          </listitem>

          <listitem>
            <para>It can't start any program on the host that's executing
            it.</para>
          </listitem>

          <listitem>
            <para>It can't read certain system properties. Windows that an
            applet brings up look different than windows that an application
            brings up.</para>
          </listitem>
        </itemizedlist>

        <para><ulink url="../audio/Applet2.asf"><inlinegraphic
        fileref="img/asf.gif" format="GIF" />Audio in
        Portuguese</ulink></para>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/applet/overview/security.html">What
        applets can do</ulink></title>

        <itemizedlist>
          <listitem>
            <para>Applets can make network connections to the host they came
            from.</para>
          </listitem>

          <listitem>
            <para>Applets running within a Web browser can easily cause HTML
            documents to be displayed.</para>
          </listitem>

          <listitem>
            <para>Applets can invoke public methods of other applets on the
            same page.</para>
          </listitem>

          <listitem>
            <para>Applets that are loaded from the local file system have none
            of the restrictions that applets loaded over the network
            do.</para>
          </listitem>

          <listitem>
            <para>Although most applets stop running once you leave their
            page, they don't have to.</para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/applet/overview/test.html">Adding
        an Applet to an HTML Page</ulink></title>

        <section>
          <title>The Simplest Possible &lt;APPLET&gt; Tag</title>

          <programlisting>&lt;APPLET CODE=AppletSubclass.class WIDTH=anInt HEIGHT=anInt&gt;
&lt;/APPLET&gt;</programlisting>
        </section>

        <section>
          <title>Specifying the Applet Directory with CODEBASE</title>

          <programlisting>&lt;APPLET CODE=AppletSubclass.class CODEBASE=aURL
        WIDTH=anInt HEIGHT=anInt&gt;
&lt;/APPLET&gt;
&lt;applet code=Simple.class codebase=example/ width=500 height=20&gt;
&lt;/applet&gt;
</programlisting>
        </section>

        <section>
          <title>Specifying Parameters with the &lt;PARAM&gt; Tag</title>

          <programlisting>&lt;APPLET CODE=AppletSubclass.class WIDTH=anInt HEIGHT=anInt&gt;
&lt;PARAM NAME=parameter1Name VALUE=aValue&gt;
&lt;PARAM NAME=parameter2Name VALUE=anotherValue&gt;
&lt;/APPLET&gt;

&lt;applet code=AppletButton.class codebase=example width=350 height=60&gt;
&lt;param name=windowType value=BorderWindow&gt;
&lt;param name=windowText value="BorderLayout"&gt;
&lt;param name=buttonText value="Click here to see a BorderLayout in action"&gt;
. . .
&lt;/applet&gt;</programlisting>
        </section>

        <section>
          <title>Specifying Text to be Displayed by Java-Deficient
          Browsers</title>

          <programlisting>&lt;applet code=AppletButton.class codebase=example width=350 height=60&gt;
&lt;param name=windowType value=BorderWindow&gt;
&lt;param name=windowText value="BorderLayout"&gt;
Your browser can't run 1.0 Java applets,
so here's a picture of the window the program brings up:&lt;/em&gt;
&lt;/applet&gt;</programlisting>

          <para><ulink url="../audio/Applet3.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>
    </section>

    <section id="applets_creating_an_interface">
      <title><ulink
      url="http://java.sun.com/docs/books/tutorial/applet/practical/ui.html">Creating
      an Interface</ulink></title>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/applet/practical/gui.html">Creating
        a GUI</ulink></title>

        <section>
          <title>An Applet extends the graphic class Panel</title>

          <para>It can contain other Components, just as any Panel can. As
          Panels (and thus Components), Applets participate in the AWT drawing
          and event hierarchy.</para>

          <figure>
            <title>Quote Applet</title>

            <mediaobject>
              <imageobject>
                <imagedata contentdepth="102px" contentwidth="502px"
                           fileref="img/Applets2.gif" format="GIF" />
              </imageobject>
            </mediaobject>
          </figure>

          <figure>
            <title>Window Applet</title>

            <mediaobject>
              <imageobject>
                <imagedata contentdepth="35px" contentwidth="466px"
                           fileref="img/Applets3.gif" format="GIF" />
              </imageobject>
            </mediaobject>
          </figure>
        </section>

        <section>
          <title><ulink
          url="http://java.sun.com/docs/books/tutorial/applet/appletsonly/sound.html">Playing
          sounds methods</ulink></title>

          <para>Applet methods:</para>

          <itemizedlist>
            <listitem>
              <para>play(URL), play(URL, String)</para>

              <para>Play the AudioClip corresponding to the specified
              URL.</para>
            </listitem>

            <listitem>
              <para>getAudioClip(URL), getAudioClip(URL, String)</para>

              <para>Return an object that implements the AudioClip
              interface.</para>
            </listitem>
          </itemizedlist>

          <para>The AudioClip interface:</para>

          <itemizedlist>
            <listitem>
              <para>loop()</para>

              <para>Starts playing the clip repeatedly.</para>
            </listitem>

            <listitem>
              <para>play()</para>

              <para>Plays the clip once.</para>
            </listitem>

            <listitem>
              <para>stop()</para>

              <para>Stops the clip. Works with both looping and one-time
              sounds.</para>
            </listitem>
          </itemizedlist>

          <para><ulink url="../audio/Applet4.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/applet/appletsonly/param.html">Applet
        Parameters</ulink></title>

        <section>
          <title>Code to support parameters</title>

          <programlisting>public String getParameter(String name)
. . .
String windowWidthString = getParameter("WINDOWWIDTH");
if (windowWidthString != null) {
    try {
         requestedWidth = Integer.parseInt(windowWidthString);
    } catch (NumberFormatException e) {
         //Use default width.
    }
}</programlisting>
        </section>

        <section>
          <title>Giving information about parameters</title>

          <programlisting>public String[][] getParameterInfo() {
       String[][] info = {
          // Parameter Name     Kind of Value   Description
          {"imagesource",     "URL",          "a directory"},
          {"startup",         "URL",          "displayed at startup"},
          {"background",      "URL",          "displayed as background"},
          {"startimage",      "int",          "start index"},
          {"endimage",        "int",          "end index"},
          {"namepattern",     "URL",          "used to generate indexed names"},
          {"pause",           "int",          "milliseconds"},
          {"pauses",          "ints",         "milliseconds"},
          {"repeat",          "boolean",      "repeat or not"},
          {"positions",       "coordinates",  "path"},
          {"soundsource",     "URL",          "audio directory"},
          {"soundtrack",      "URL",          "background music"},
          {"sounds",          "URLs",         "audio samples"},
       };
       return info;
}</programlisting>

          <para><ulink url="../audio/Applet5.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/applet/practical/properties.html">Reading
        System Properties</ulink></title>

        <para>Command to Read System Properties:</para>

        <programlisting>String s = System.getProperty("os.name");</programlisting>

        <para>System Properties that Applets Can Read:</para>

        <table>
          <title>Available System Properties</title>

          <tgroup cols="2">
            <colspec align="center" />

            <thead>
              <row>
                <entry align="center">Key</entry>

                <entry align="center">Meaning</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>"file.separator"</entry>

                <entry>File separator (e.g., "/")</entry>
              </row>

              <row>
                <entry>"java.class.version"</entry>

                <entry>Java class version number</entry>
              </row>

              <row>
                <entry>"java.vendor"</entry>

                <entry>Java vendor-specific string</entry>
              </row>

              <row>
                <entry>"java.vendor.url"</entry>

                <entry>Java vendor URL</entry>
              </row>

              <row>
                <entry>"java.version"</entry>

                <entry>Java version number</entry>
              </row>

              <row>
                <entry>"line.separator"</entry>

                <entry>Line separator</entry>
              </row>

              <row>
                <entry>"os.arch"</entry>

                <entry>Operating system architecture</entry>
              </row>

              <row>
                <entry>"os.name"</entry>

                <entry>Operating system name</entry>
              </row>

              <row>
                <entry>"path.separator"</entry>

                <entry>Path separator (e.g., ":")</entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <para>Forbidden System Properties:</para>

        <table>
          <title>Forbidden System Properties</title>

          <tgroup cols="2">
            <colspec align="center" />

            <thead>
              <row>
                <entry align="center">Key</entry>

                <entry align="center">Meaning</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>"java.class.path"</entry>

                <entry>Java classpath</entry>
              </row>

              <row>
                <entry>"java.home"</entry>

                <entry>Java installation directory</entry>
              </row>

              <row>
                <entry>"user.dir"</entry>

                <entry>User's current working directory</entry>
              </row>

              <row>
                <entry>"user.home"</entry>

                <entry>User home directory</entry>
              </row>

              <row>
                <entry>"user.name"</entry>

                <entry>User account name</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/applet/appletsonly/showStatus.html">Displaying
        Short Strings</ulink></title>

        <para>Print in the browser status line:</para>

        <programlisting>showStatus("MyApplet: Loading image file " + file);</programlisting>

        <para><ulink url="../audio/Applet6.asf"><inlinegraphic
        fileref="img/asf.gif" format="GIF" />Audio in
        Portuguese</ulink></para>
      </section>
    </section>

    <section id="applets_communication_with_other_programs">
      <title><ulink
      url="http://java.sun.com/docs/books/tutorial/applet/appletsonly/index.html">Communication
      with Other Programs</ulink></title>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/applet/appletsonly/iac.html">Sending
        Messages to Other Applets on the Same Page</ulink></title>

        <para>Define an applet name:</para>

        <programlisting>&lt;applet codebase=example/ code=Sender.class width=450 height=200
name="buddy"&gt;
. . .
&lt;/applet&gt;

&lt;applet codebase=example/ code=Receiver.class width=450 height=35&gt;
&lt;param name="name" value="old pal"&gt;
. . .
&lt;/applet&gt;</programlisting>

        <para>Get the applet by its name:</para>

        <programlisting>receiver = getAppletContext().getApplet("&lt;applet name&gt;");</programlisting>

        <para>Finding All the Applets on a Page:</para>

        <programlisting>Enumeration e = getAppletContext().getApplets();</programlisting>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/applet/appletsonly/browser.html">Communicating
        with the Browser</ulink></title>

        <para>An applet can ask the browser to show HTML documents:</para>

        <programlisting>public void showDocument(java.net.URL url)
public void showDocument(java.net.URL url, String targetWindow)</programlisting>

        <para>Target windows:</para>

        <itemizedlist>
          <listitem>
            <para>"_blank"</para>

            <para>Display the document in a new, nameless window.</para>
          </listitem>

          <listitem>
            <para>"windowName"</para>

            <para>Display the document in a window named windowName. This
            window is created if necessary.</para>
          </listitem>

          <listitem>
            <para>"_self"</para>

            <para>Display the document in the window and frame that contain
            the applet.</para>
          </listitem>

          <listitem>
            <para>"_parent"</para>

            <para>Display the document in the applet's window but in the
            parent frame of the applet.</para>
          </listitem>

          <listitem>
            <para>"_top"</para>

            <para>Display the document in the applet's window but in the
            top-level frame.</para>
          </listitem>
        </itemizedlist>

        <para><ulink url="../audio/Applet7.asf"><inlinegraphic
        fileref="img/asf.gif" format="GIF" />Audio in
        Portuguese</ulink></para>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/applet/practical/server.html">Working
        with a Server-Side Application</ulink></title>

        <para>Applets can use networking features just as any Java program
        can, with the restriction that all communication must be with the host
        that delivered the applet to its current host.</para>

        <para>To find from what host an applet came from:</para>

        <programlisting>URL hostURL = getCodeBase();             // Gets the host URL
String host = getCodeBase().getHost();  // Gets the host name
</programlisting>

        <para>Using a Server to Work Around Security Restrictions:</para>

        <figure>
          <title>Applet Viewer Security Restrictions</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="423px" contentwidth="573px"
                         fileref="img/Applets4.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <figure>
          <title>Applet Viewers Window</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="291px" contentwidth="569px"
                         fileref="img/Applets5.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <para><ulink url="../audio/Applet8.asf"><inlinegraphic
        fileref="img/asf.gif" format="GIF" />Audio in
        Portuguese</ulink></para>
      </section>
    </section>

    <section id="applets_capabilities_and_restrictions">
      <title><ulink
      url="http://java.sun.com/docs/books/tutorial/applet/practical/security.html">Capabilities
      and Restrictions</ulink></title>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/essential/system/securityIntro.html">Security
        Restrictions</ulink></title>

        <para>Applets are restricted by the Security Manager of the browser
        that is running them.</para>

        <section>
          <title>Common security restrictions:</title>

          <itemizedlist>
            <listitem>
              <para>Applets can't load libraries or define native
              methods.</para>
            </listitem>

            <listitem>
              <para>An applet can't ordinarily read or write files on the host
              that's executing it.</para>
            </listitem>

            <listitem>
              <para>An applet can't make network connections except to the
              host that it came from.</para>
            </listitem>

            <listitem>
              <para>An applet can't start any program on the host that's
              executing it.</para>
            </listitem>

            <listitem>
              <para>An applet can't read every system property.</para>
            </listitem>

            <listitem>
              <para>Windows that an applet brings up look different than
              windows that an application brings up:</para>

              <figure>
                <title>Applet Look</title>

                <mediaobject>
                  <imageobject>
                    <imagedata contentdepth="153px" contentwidth="500px"
                               fileref="img/Applets6.gif" format="GIF" />
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
          </itemizedlist>
        </section>
      </section>

      <section>
        <title><ulink
        url="http://java.sun.com/docs/books/tutorial/applet/practical/security.html">Applets
        Capabilities</ulink></title>

        <section>
          <title>Capabilities that Applications Don't Have</title>

          <itemizedlist>
            <listitem>
              <para>Applets can play sounds.</para>
            </listitem>

            <listitem>
              <para>Applets running within a Web browser can easily cause HTML
              documents to be displayed.</para>
            </listitem>

            <listitem>
              <para>Applets can invoke public methods of other applets on the
              same page.</para>
            </listitem>
          </itemizedlist>
        </section>

        <section>
          <title>More Applet Capabilities</title>

          <itemizedlist>
            <listitem>
              <para>Applets that are loaded from the local file system have
              none of the restrictions that applets loaded over the network
              do.</para>
            </listitem>

            <listitem>
              <para>Although most applets stop running once you leave their
              page, they don't have to.</para>
            </listitem>
          </itemizedlist>

          <para><ulink url="../audio/Applet9.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>
    </section>
  </chapter>

  <chapter id="case_study_junit">
    <title>Case Study: JUnit</title>

    <section id="case_study_junit_overview">
      <title>Overview</title>

      <para>JUnit was developed by Kent Beck and Erich Gamma. Beck is an
      exponent of patterns and Extreme Programming (XP); Gamma is one of the
      authors of the celebrated design patterns book.</para>

      <para>You can download the source code and documentation for JUnit from
      <ulink url="http://www.junit.org">http://www.junit.org</ulink>.</para>

      <para>JUnit has several packages:</para>

      <itemizedlist>
        <listitem>
          <para>framework for the basic framework,</para>
        </listitem>

        <listitem>
          <para>runner for some abstract classes for running tests,</para>
        </listitem>

        <listitem>
          <para>textui and swingui for user interfaces,</para>
        </listitem>

        <listitem>
          <para>extensions for some useful additions to the framework.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section id="case_study_junit_the_example_problem">
      <title>The Example Problem</title>

      <para>Every programmer knows they should write tests for their code. Few
      do. The universal response to "Why not?" is "I'm in too much of a
      hurry." This quickly becomes a vicious cycle:</para>

      <itemizedlist>
        <listitem>
          <para>The more pressure you feel, the fewer tests you write.</para>
        </listitem>

        <listitem>
          <para>The fewer tests you write, the less productive you are and the
          less stable your code becomes.</para>
        </listitem>

        <listitem>
          <para>The less productive and accurate you are, the more pressure
          you feel.</para>
        </listitem>
      </itemizedlist>

      <para>The program we will write solves the problem of representing
      arithmetic with multiple currencies. You cannot just convert one
      currency into another for doing arithmetic since there is no single
      conversion rate - you may need to compare the value of a portfolio at
      yesterday's rate and today's rate.</para>

      <para>Let's start simple and define a class Money to represent a value
      in a single currency.</para>

      <programlisting>class Money {
    private int fAmount;
    private String fCurrency;
    public Money(int amount, String currency) {
        fAmount= amount;
        fCurrency= currency;
    }

    public int amount() {
        return fAmount;
    }

    public String currency() {
        return fCurrency;
    }
}</programlisting>

      <para>When you add two Moneys of the same currency, the resulting Money
      has as its amount the sum of the other two amounts:</para>

      <programlisting>public Money add(Money m) {
    return new Money(amount()+m.amount(), currency());
}</programlisting>

      <para>Now, instead of just coding on, we want to get immediate feedback
      and practice "code a little, test a little, code a little, test a
      little".</para>

      <para>JUnit defines how to structure your test cases and provides the
      tools to run them:</para>

      <orderedlist>
        <listitem>
          <para>You implement a test in a subclass of
          <command>TestCase</command>. To test our Money implementation we
          therefore define <command>MoneyTest</command> as a subclass of
          <command>TestCase</command>.</para>
        </listitem>

        <listitem>
          <para>Classes are contained in packages and we have to decide where
          to put <command>MoneyTest</command>. Our current practice is to put
          <command>MoneyTest</command> in the same package as the classes
          under test. In this way a test case has access to the package
          private methods.</para>
        </listitem>

        <listitem>
          <para>We add a test method <command>testSimpleAdd</command>, that
          will exercise the simple version of <command>Money.add()</command>
          above. A JUnit test method is an ordinary method without any
          parameters:</para>

          <programlisting>public class MoneyTest extends TestCase {
    //â¦
    public void testSimpleAdd() {
        Money m12CHF= new Money(12, "CHF");  // (1)
        Money m14CHF= new Money(14, "CHF");        
        Money expected= new Money(26, "CHF");
        Money result= m12CHF.add(m14CHF);    // (2)
        Assert.assertTrue(expected.equals(result));     // (3)
    }
}</programlisting>
        </listitem>
      </orderedlist>

      <para>The <command>testSimpleAdd()</command> test case consists
      of:</para>

      <orderedlist>
        <listitem>
          <para>Code which creates the objects we will interact with during
          the test. This testing context is commonly referred to as a test's
          fixture. All we need for the <command>testSimpleAdd</command> test
          are some <command>Money</command> objects.</para>
        </listitem>

        <listitem>
          <para>Code which exercises the objects in the fixture.</para>
        </listitem>

        <listitem>
          <para>Code which verifies the result.</para>
        </listitem>
      </orderedlist>

      <para>Before we can verify the result we need a way to test that two
      Money objects are equal. We override the method
      <command>equals</command>. Before we implement <command>equals</command>
      let's a write a test for equals in <command>MoneyTest</command>.</para>

      <programlisting>public void testEquals() {
    Money m12CHF= new Money(12, "CHF");
    Money m14CHF= new Money(14, "CHF");

    Assert.assertTrue(!m12CHF.equals(null));
    Assert.assertEquals(m12CHF, m12CHF);
    Assert.assertEquals(m12CHF, new Money(12, "CHF")); // (1)
    Assert.assertTrue(!m12CHF.equals(m14CHF));
}</programlisting>

      <para>The <command>equals</command> method in Object returns true when
      both objects are the same: Two Monies are considered equal if they have
      the same currency and value. To test this property we have added a test
      (1) to verify that Monies are equal when they have the same value but
      are not the same object.</para>

      <para>Next let's write the equals method in Money:</para>

      <programlisting>public boolean equals(Object anObject) {
    if (anObject instanceof Money) {
        Money aMoney= (Money)anObject;
        return aMoney.currency().equals(currency())
            &amp;&amp; amount() == aMoney.amount();
    }
    return false;
}</programlisting>

      <para>As an aside, <emphasis>it is a recommended practice to also
      override the method hashCode whenever you override method
      equals</emphasis>.</para>

      <para><emphasis role="bold">assertTrue:</emphasis> With an
      <command>equals</command> method in hand we can verify the outcome of
      <command>testSimpleAdd</command>. In JUnit you do so by a calling
      <command>Assert.assertTrue</command>, which triggers a failure that is
      recorded by JUnit when the argument isn't true.</para>

      <para><emphasis role="bold">assertEquals:</emphasis> Since assertions
      for equality are very common, there is also an
      <command>Assert.assertEquals</command> convenience method. In addition
      to testing for equality with equals, it reports the printed value of the
      two objects in the case they differ.</para>

      <para>Now that we have implemented two test cases we notice some code
      duplication for setting-up the tests. With JUnit you can initialize test
      variables by overriding the <command>setUp</command> method.</para>

      <para>The symmetric operation to <command>setUp</command> is
      <command>tearDown</command> which you can override to clean up the test
      at the end.</para>

      <programlisting>public class MoneyTest extends TestCase {
    private Money f12CHF;
    private Money f14CHF;   

    protected void setUp() {
        f12CHF= new Money(12, "CHF");
        f14CHF= new Money(14, "CHF");
    }

    public void testEquals() {
        Assert.assertTrue(!f12CHF.equals(null));
        Assert.assertEquals(f12CHF, f12CHF);
        Assert.assertEquals(f12CHF, new Money(12, "CHF"));
        Assert.assertTrue(!f12CHF.equals(f14CHF));
    }

    public void testSimpleAdd() {
        Money expected= new Money(26, "CHF");
        Money result= f12CHF.add(f14CHF);
        Assert.assertTrue(expected.equals(result));
    }
}</programlisting>
    </section>

    <section id="case_study_junit_making_a_test_suite">
      <title>Making a Test Suite</title>

      <para>Two additional steps are needed to run the two test cases:</para>

      <orderedlist>
        <listitem>
          <para>define how to run an individual test case,</para>
        </listitem>

        <listitem>
          <para>define how to run a test suite.</para>
        </listitem>
      </orderedlist>

      <para>JUnit supports two ways of running single tests:</para>

      <itemizedlist>
        <listitem>
          <para>static</para>
        </listitem>

        <listitem>
          <para>dynamic</para>
        </listitem>
      </itemizedlist>

      <para><emphasis role="bold">Static way:</emphasis> you override the
      <command>runTest</command> method inherited from
      <command>TestCase</command> and call the desired test case. A convenient
      way to do this is with an anonymous inner class. Note that each test
      must be given a name, so you can identify it if it fails.</para>

      <programlisting>TestCase test= new MoneyTest("simple add") {
    public void runTest() {
        testSimpleAdd();
    }
};</programlisting>

      <para><emphasis role="bold">Dynamic way:</emphasis> it uses reflection
      to implement <command>runTest</command>. It assumes the name of the test
      is the name of the test case method to invoke. It dynamically finds and
      invokes the test method. To invoke the <command>testSimpleAdd</command>
      test we therefore construct a <command>MoneyTest</command> as shown
      below:</para>

      <programlisting>TestCase test= new MoneyTest("testSimpleAdd");</programlisting>

      <para>The dynamic way is more compact to write but it is less static
      type safe. An error in the name of the test case goes unnoticed until
      you run it and get a <command>NoSuchMethodException</command>.</para>

      <para>As the last step to getting both test cases to run together, we
      have to define a test suite:</para>

      <para>In JUnit this requires the definition of a static method called
      <command>suite</command>.</para>

      <itemizedlist>
        <listitem>
          <para>The suite method is like a main method that is specialized to
          run tests.</para>
        </listitem>

        <listitem>
          <para>Inside suite you add the tests to be run to a
          <command>TestSuite</command> object and return it.</para>
        </listitem>

        <listitem>
          <para>A <command>TestSuite</command> can run a collection of
          tests.</para>
        </listitem>
      </itemizedlist>

      <para><command>TestSuite</command> and <command>TestCase</command> both
      implement an interface called <command>Test</command> which defines the
      methods to run a test. This enables the creation of test suites by
      composing arbitrary <command>TestCases</command> and
      <command>TestSuites</command>. The code below illustrates the creation
      of a test suite with the <emphasis>dynamic</emphasis> way to run a
      test.</para>

      <programlisting>public static Test suite() {
    TestSuite suite= new TestSuite();
    suite.addTest(new MoneyTest("testEquals"));
    suite.addTest(new MoneyTest("testSimpleAdd"));
    return suite;
}</programlisting>

      <para>or</para>

      <programlisting>public static Test suite() {
    return new TestSuite(MoneyTest.class);
}</programlisting>

      <para>Here is the corresponding code using the <emphasis>static
      way</emphasis>.</para>

      <programlisting>public static Test suite() {
    TestSuite suite= new TestSuite();
    suite.addTest(
        new MoneyTest("money equals") {
            protected void runTest() { testEquals(); }
        }
    );
    
    suite.addTest(
        new MoneyTest("simple add") {
            protected void runTest() { testSimpleAdd(); }
        }
    );
    return suite;
}</programlisting>
    </section>

    <section id="case_study_junit_running_the_tests">
      <title>Running the tests</title>

      <para>JUnit comes with a graphical interface to run tests.</para>

      <itemizedlist>
        <listitem>
          <para>Type the name of your test class in the field at the top of
          the window.</para>
        </listitem>

        <listitem>
          <para>While the test is run JUnit shows its progress with a progress
          bar below the input field.</para>
        </listitem>

        <listitem>
          <para>The bar is initially green but turns into red as soon as there
          is an unsuccessful test.</para>
        </listitem>

        <listitem>
          <para>Failed tests are shown in a list at the bottom:</para>

          <figure>
            <title>Running a Test Suite</title>

            <mediaobject>
              <imageobject>
                <imagedata contentdepth="310px" contentwidth="406px"
                           fileref="img/junit.gif" format="GIF" />
              </imageobject>
            </mediaobject>
          </figure>
        </listitem>
      </itemizedlist>
    </section>

    <section id="case_study_junit_adding_new_code">
      <title>Adding New Code</title>

      <para>After having verified that the simple currency case works we move
      on to multiple currencies.</para>

      <para>The problem of mixed currency arithmetic is that there isn't a
      single exchange rate. To avoid this problem we introduce a
      <command>MoneyBag</command> which defers exchange rate conversions. For
      example:</para>

      <orderedlist>
        <listitem>
          <para>Adding 12 Swiss Francs to 14 US Dollars is represented as a
          bag containing the two Monies: 12 CHF and 14 USD.</para>
        </listitem>

        <listitem>
          <para>Adding another 10 Swiss francs gives a bag with 22 CHF and 14
          USD.</para>
        </listitem>

        <listitem>
          <para>We can later evaluate a MoneyBag with different exchange
          rates.</para>
        </listitem>
      </orderedlist>

      <para>A MoneyBag is represented as a list of Monies and provides
      different constructors to create a MoneyBag:</para>

      <programlisting>class MoneyBag {
    private Vector fMonies= new Vector();

    MoneyBag(Money m1, Money m2) {
        appendMoney(m1);
        appendMoney(m2);
    }

    MoneyBag(Money bag[]) {
        for (int i= 0; i &lt; bag.length; i++)
            appendMoney(bag[i]);
    }
}</programlisting>

      <para>The method <command>appendMoney</command> is an internal helper
      method that adds a <command>Money</command> to the list of Moneys and
      takes care of consolidating Monies with the same currency.
      <command>MoneyBag</command> also needs an <command>equals</command>
      method together with a corresponding test. We skip the implementation of
      <command>equals</command> and only show the
      <command>testBagEquals</command> method. In a first step we extend the
      fixture to include two <command>MoneyBags</command>.</para>

      <programlisting>protected void setUp() {
    f12CHF= new Money(12, "CHF");
    f14CHF= new Money(14, "CHF");
    f7USD=  new Money( 7, "USD");
    f21USD= new Money(21, "USD");
    fMB1= new MoneyBag(f12CHF, f7USD);
    fMB2= new MoneyBag(f14CHF, f21USD);
}</programlisting>

      <para>With this fixture the <command>testBagEquals</command> test case
      becomes:</para>

      <programlisting>public void testBagEquals() {
    Assert.assertTrue(!fMB1.equals(null));
    Assert.assertEquals(fMB1, fMB1);
    Assert.assertTrue(!fMB1.equals(f12CHF));
    Assert.assertTrue(!f12CHF.equals(fMB1));
    Assert.assertTrue(!fMB1.equals(fMB2));
}</programlisting>

      <para>Following "code a little, test a little" we run our extended test
      with JUnit and verify that we are still doing fine. With
      <command>MoneyBag</command> in hand, we can now fix the add method in
      <command>Money</command>.</para>

      <programlisting>public Money add(Money m) {
    if (m.currency().equals(currency()) )
        return new Money(amount()+m.amount(), currency());
    return new MoneyBag(this, m);
}</programlisting>

      <para>As defined above this method will not compile since it expects a
      <command>Money</command> and not a <command>MoneyBag</command> as its
      return value. With the introduction of <command>MoneyBag</command> there
      are now two representations for <command>Moneys</command> which we would
      like to hide from the client code. To do so we introduce an interface
      <command>IMoney</command> that both representations implement. Here is
      the <command>IMoney</command> interface:</para>

      <programlisting>interface IMoney {
    public abstract IMoney add(IMoney aMoney);
    //â¦
}</programlisting>

      <para>To fully hide the different representations from the client we
      have to support arithmetic between all combinations of Moneys with
      MoneyBags. Before we code on, we therefore define a couple more test
      cases. The expected <command>MoneyBag</command> results use the
      convenience constructor shown above, initializing a
      <command>MoneyBag</command> from an array.</para>

      <programlisting>public void testMixedSimpleAdd() { 
    // [12 CHF] + [7 USD] == {[12 CHF][7 USD]} 
    Money bag[]= { f12CHF, f7USD }; 
    MoneyBag expected= new MoneyBag(bag); 
    Assert.assertEquals(expected, f12CHF.add(f7USD)); 
}</programlisting>

      <para>The other tests follow the same pattern:</para>

      <itemizedlist>
        <listitem>
          <para><command>testBagSimpleAdd</command> - to add a
          <command>MoneyBag</command> to a simple
          <command>Money</command></para>
        </listitem>

        <listitem>
          <para><command>testSimpleBagAdd</command> - to add a simple
          <command>Money</command> to a <command>MoneyBag</command></para>
        </listitem>

        <listitem>
          <para><command>testBagBagAdd</command> - to add two
          <command>MoneyBags</command></para>
        </listitem>
      </itemizedlist>

      <para>Next, we extend our test suite accordingly:</para>

      <programlisting>public static Test suite() {
    TestSuite suite= new TestSuite();
    suite.addTest(new MoneyTest("testMoneyEquals"));
    suite.addTest(new MoneyTest("testBagEquals"));
    suite.addTest(new MoneyTest("testSimpleAdd"));
    suite.addTest(new MoneyTest("testMixedSimpleAdd"));
    suite.addTest(new MoneyTest("testBagSimpleAdd"));
    suite.addTest(new MoneyTest("testSimpleBagAdd"));
    suite.addTest(new MoneyTest("testBagBagAdd"));
    return suite;
}</programlisting>

      <para>Having defined the test cases we can start to implement them. The
      implementation challenge here is dealing with all the different
      combinations of <command>Money</command> with
      <command>MoneyBag</command> until we solve the problem.</para>
    </section>

    <section id="case_study_junit_testing_practice">
      <title>Testing Practice</title>

      <para>Martin Fowler makes this easy for you. He says, "Whenever you are
      tempted to type something into a print statement or a debugger
      expression, write it as a test instead."</para>

      <para>Here are a couple of the times that you will receive a reasonable
      return on your testing investment:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis role="bold">During Development-</emphasis> When you
          need to add new functionality to the system, write the tests first.
          Then, you will be done developing when the test runs.</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">During Debugging-</emphasis> When
          someone discovers a defect in your code, first write a test that
          will succeed if the code is working. Then debug until the test
          succeeds.</para>
        </listitem>
      </itemizedlist>

      <para>One word of caution about your tests: <emphasis>Once you get them
      running, make sure they stay running</emphasis>.</para>

      <para>Ideally, you would run every test in your suite every time you
      change a method.</para>

      <para>Practically, your suite will soon grow too large to run all the
      time. But make sure you run every test at least once a day: overnight,
      during lunch, during one of those long meetingsâ¦</para>
    </section>

    <section id="case_study_junit_lecture_notes">
      <title>Lecture Notes</title>

      <para>Being <ulink
      url="http://junit.sourceforge.net/doc/testinfected/testing.htm">Test
      Infected</ulink>:</para>

      <itemizedlist>
        <listitem>
          <para>Part of being test infected is not being able to go home if
          your tests aren't 100%.</para>
        </listitem>

        <listitem>
          <para>We have been amazed at how much more fun programming is and
          how much more aggressive we are willing to be and how much less
          stress we feel when we are <emphasis>supported</emphasis> by
          tests.</para>
        </listitem>

        <listitem>
          <para>You will be surprised at how much ground you can cover in a
          couple of hours if you aren't worrying every second about what you
          might be breaking.</para>
        </listitem>

        <listitem>
          <para>The next time someone asks you for help debugging, get them to
          talk about the problem in terms of a fixture and expected results.
          Then say, "I'd like to write down what you just told me in a form we
          can use." Have them watch while you write one little test. Run it.
          Fix it. Write another. Pretty soon they will be writing their
          own.</para>
        </listitem>
      </itemizedlist>

      <para>Links to:</para>

      <itemizedlist>
        <listitem>
          <para><ulink
          url="http://junit.sourceforge.net/doc/testinfected/testing.htm">Test
          Infected</ulink>.</para>
        </listitem>

        <listitem>
          <para><ulink url="../pdf/lecture-17.pdf">Lecture
          Notes</ulink>.</para>
        </listitem>

        <listitem>
          <para><ulink url="http://web.mit.edu/"><inlinegraphic
          contentdepth="21px" contentwidth="38px" fileref="img/mit_logo.gif"
          format="GIF" /></ulink></para>
        </listitem>
      </itemizedlist>
    </section>
  </chapter>

  <chapter id="decoupling">
    <title>Decoupling</title>

    <section id="decoupling_why_decompose">
      <title>Why Decompose</title>

      <section>
        <title>Why Decompose?</title>

        <para>If a program has N parts, and each has a probability of
        correctness of c -- that is, there is a chance of 1-c that the
        developer gets it wrong -- then the probability that the whole program
        will work is c to the power of N.</para>

        <para>But doesn't this suggest that we shouldn't break a program? No,
        it just states that one can not make a program totally bug
        free!</para>

        <para>Advantages:</para>

        <orderedlist>
          <listitem>
            <para>Division of Labor.</para>
          </listitem>

          <listitem>
            <para>Reuse.</para>
          </listitem>

          <listitem>
            <para>Modular Analysis.</para>
          </listitem>

          <listitem>
            <para>Localized Change.</para>
          </listitem>
        </orderedlist>
      </section>

      <section>
        <title>Top Down Design</title>

        <para>In the 1970âs, there was a popular approach to software
        development called Top-down Design. The idea s simply to apply the
        following step recursively:</para>

        <itemizedlist>
          <listitem>
            <para>if the part you need to builds already available (for
            example, as a machine instruction), then youâre done;</para>
          </listitem>

          <listitem>
            <para>Otherwise, split it into subparts, develop them, and combine
            them together.</para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title>Audio</title>

        <para><ulink url="../audio/Decoupling1.wav"><inlinegraphic
        fileref="img/asf.gif" format="GIF" />Audio in
        Portuguese</ulink></para>
      </section>
    </section>

    <section id="decoupling_dependence_relationships">
      <title>Dependence Relationships</title>

      <section>
        <title>Uses Diagram</title>

        <para>The most basic notion relationship between parts is the
        <emphasis role="bold">uses relationship</emphasis>.</para>

        <para><emphasis>A uses B when the behaviour of A depends on the
        behaviour of B</emphasis></para>

        <figure>
          <title>Uses Diagram of a Web browser.</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="398px" contentwidth="705px"
                         fileref="img/decoupling1.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>
      </section>

      <section>
        <title>Shapes of the Uses Diagram</title>

        <orderedlist>
          <listitem>
            <para><emphasis role="bold">Trees:</emphasis> In general the uses
            diagram are not trees, but part of them can form trees.</para>
          </listitem>

          <listitem>
            <para><emphasis role="bold">Layers</emphasis></para>

            <figure>
              <title>Layered diagram for the Protocol module.</title>

              <mediaobject>
                <imageobject>
                  <imagedata contentdepth="462px" contentwidth="701px"
                             fileref="img/decoupling2.gif" format="GIF" />
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>

          <listitem>
            <para><emphasis role="bold">Cycles</emphasis></para>

            <figure>
              <title>Display showing a cycle relationship with Main.</title>

              <mediaobject>
                <imageobject>
                  <imagedata contentdepth="400px" contentwidth="389px"
                             fileref="img/decoupling3.gif" format="GIF" />
                </imageobject>
              </mediaobject>
            </figure>

            <para>What can be done with uses diagrams:</para>

            <itemizedlist>
              <listitem>
                <para>Reasoning.</para>
              </listitem>

              <listitem>
                <para>Reuse.</para>
              </listitem>

              <listitem>
                <para>Construction Order.</para>
              </listitem>
            </itemizedlist>
          </listitem>
        </orderedlist>
      </section>

      <section>
        <title>Audio</title>

        <para><ulink url="../audio/Decoupling2.wav"><inlinegraphic
        fileref="img/asf.gif" format="GIF" />Audio in
        Portuguese</ulink></para>
      </section>
    </section>

    <section id="decoupling_dependences_specifications">
      <title>Dependences &amp; Specifications</title>

      <section>
        <title>Dependences &amp; Specifications</title>

        <para>The fundamental relationship that underlies uses is transitive:
        <emphasis>if A is affected by B and B is affected by C, then A is
        affected by C</emphasis>. It would be much better if reasoning about
        A, for example, required looking at only at the parts it refers
        to.</para>

        <para><emphasis role="bold">The solution:</emphasis> to have instead a
        notion of dependence that stops after one step.</para>

        <para>To make this possible, it will be necessary to have a complete
        description for every part that A depends characterizing its
        behaviour. The description cannot itself depend on other parts.</para>

        <para>This description is called a <emphasis
        role="bold">specification</emphasis>.</para>

        <para>Before A would depend on B, now with a specification part S, we
        can say that A depends on S and B meets S.</para>

        <figure>
          <title>Specifications S and T.</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="384px" contentwidth="365px"
                         fileref="img/decoupling4.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <para>Advantages:</para>

        <itemizedlist>
          <listitem>
            <para>Weakened Assumptions.</para>
          </listitem>

          <listitem>
            <para>Evaluating Changes.</para>
          </listitem>

          <listitem>
            <para>Communication.</para>
          </listitem>

          <listitem>
            <para>Multiple Implementations.</para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title>Audio</title>

        <para><ulink url="../audio/Decoupling3.wav"><inlinegraphic
        fileref="img/asf.gif" format="GIF" />Audio in
        Portuguese</ulink></para>
      </section>
    </section>

    <section id="decoupling_techniques_for_decoupling">
      <title>Techniques for Decoupling</title>

      <para>A dependence is a liability: <emphasis>it expands the scope of
      what needs to be considered.</emphasis></para>

      <para>The most effective way to reduce coupling is:</para>

      <orderedlist>
        <listitem>
          <para>To design the parts so that they are simple and well
          defined.</para>
        </listitem>

        <listitem>
          <para>Bring together aspects of the system that belong together and
          separate aspects that donât.</para>
        </listitem>
      </orderedlist>

      <para>There are also some tactics that can be applied when you already
      have a candidate decomposition: they involve introducing new parts and
      altering specifications.</para>

      <para>For now, weâll just mention some briefly to give you an idea of
      whatâs possible:</para>

      <itemizedlist>
        <listitem>
          <para>Facade</para>

          <para>The facade pattern involves interposing a new implementation
          part between two sets of parts. The new part s a kind of gatekeeper:
          every use by a part in the set S of a part in the set B which was
          previously direct now goes through it.</para>

          <para>Example: introduce a facade that sits between the layers,
          collects together all the networking that the protocol layer needs
          (and no more),and presents them to the protocol layer with a
          higher-level interface.</para>
        </listitem>

        <listitem>
          <para>Hide Representation</para>

          <para>A specification can avoid mentioning how data is
          represented.</para>

          <para>This kind of specification weakening is known as âdata
          abstractionâ.</para>

          <para>By eliminating the dependence of the using part A on the
          representation of data in the used part B, it makes it easier to
          understand the role that B plays in A. It makes it possible to
          change the representation of data in B without any change to A at
          all.</para>
        </listitem>

        <listitem>
          <para>Polymorphism</para>

          <para>A program part C that provides container objects has a
          dependence on the program part E that provides the elements of the
          container.</para>

          <para>To reduce the coupling between C and E, we can make C
          polymorphic.</para>

          <para>The word âpolymorphicâ means âmany shapedâ, and refers to the
          fact that C is written without any mention of special properties of
          E, so that containers of many shapes can be produced according to
          which E the part C uses.</para>
        </listitem>

        <listitem>
          <para>Callbacks</para>

          <para>In the browser, a GUI part might depend on the Main part
          because it calls a procedure in Main when, for example, a button is
          pressed.</para>

          <para>This coupling is bad.</para>

          <para>Instead, the Main part might pass the GUI part at runtime a
          reference to one of its procedures. When this procedure is called by
          the GUI part, it has the same effect it would have had if the
          procedure had been named in the text of the GUI part.</para>

          <para>But since the association is only made at runtime, there is no
          dependence of GUI on Main.</para>

          <para>There will be a dependence of GUI on a specification
          (Listener, say) that the passed procedure must satisfy.</para>

          <figure>
            <title>Callback by a Listener Class.</title>

            <mediaobject>
              <imageobject>
                <imagedata contentdepth="376px" contentwidth="374px"
                           fileref="img/decoupling5.gif" format="GIF" />
              </imageobject>
            </mediaobject>
          </figure>
        </listitem>
      </itemizedlist>

      <section>
        <title>Audio</title>

        <para><ulink url="../audio/Decoupling4.wav"><inlinegraphic
        fileref="img/asf.gif" format="GIF" />Audio in
        Portuguese</ulink></para>
      </section>
    </section>

    <section id="decoupling_coupling_due_to_share_constraints">
      <title>Coupling Due to Shared Constraints</title>

      <para>Two parts may have no explicit dependence between them, but they
      may nevertheless be coupled because they are required to satisfy a
      constraint together.</para>

      <para>For example: two class Read, which reads files, and Write, which
      writes files. If the files read by Read are the same files written by
      Write, there will be a constraint that the two parts agree on the file
      format.</para>

      <para>To avoid this kind of coupling, you have to try to localize
      functionality associated with any constraint in a single part.</para>

      <section>
        <title>Audio</title>

        <para><ulink url="../audio/Decoupling5.wav"><inlinegraphic
        fileref="img/asf.gif" format="GIF" />Audio in
        Portuguese</ulink></para>
      </section>
    </section>

    <section id="decoupling_lecture_notes">
      <title>Lecture Notes</title>

      <para>Links to:</para>

      <itemizedlist>
        <listitem>
          <para><ulink url="../pdf/lecture-02.pdf">Lecture
          Notes</ulink>.</para>
        </listitem>

        <listitem>
          <para><ulink url="http://web.mit.edu/"><inlinegraphic
          contentdepth="21px" contentwidth="38px" fileref="img/mit_logo.gif"
          format="GIF" /></ulink></para>
        </listitem>
      </itemizedlist>
    </section>
  </chapter>

  <chapter id="decoupling_in_java">
    <title>Decoupling in Java</title>

    <section id="decoupling_in_java_java_name_space">
      <title>Java Name Space</title>

      <para>Javaâs naming system supports a hierarchical structure.</para>

      <para>In the context of the system, the subcomponents will have names
      that are qualified by the components they belong. Ex <emphasis
      role="bold">dj.browser.Protocol</emphasis></para>

      <para>A Java program is organized into packages. Each class or interface
      has its own file. Packages are mirrored in the directory structure. Just
      like directories, packages can be nested arbitrarily deeply. To organize
      your code into packages:</para>

      <itemizedlist>
        <listitem>
          <para>Indicate at the top of each file which package its class or
          interface belongs to.</para>
        </listitem>

        <listitem>
          <para>Organize the files physically into a directory structure to
          match the package structure.</para>
        </listitem>
      </itemizedlist>

      <para>The class <emphasis role="bold">dnj.browser.Protocol</emphasis>
      would be in a file called <command>Protocol.java</command> in the
      directory <command>dnj/browser</command>.</para>

      <para>We can show this structure in a dependence diagram:</para>

      <figure>
        <title><emphasis>Package Dependence Diagram.</emphasis></title>

        <mediaobject>
          <imageobject>
            <imagedata contentdepth="264px" contentwidth="671px"
                       fileref="img/decouplingJava1.gif" format="GIF" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>Packages are shown as contours enclosing them. Itâs convenient
      sometimes to hide the exact dependences between parts in different
      packages and just show a dependence arc at the package level.</para>
    </section>

    <section id="decoupling_in_java_access_control">
      <title>Access Control</title>

      <para>Javaâs access control mechanisms allow you to control
      dependences.</para>

      <para>In the text of a class, you can indicate which other classes can
      have dependences on it, and to some extent you can control the nature of
      the dependences.</para>

      <para>A class declared as public can be referred to by any other class;
      otherwise, it can be referred to only by classes in the same package. So
      by dropping th s modifier, we can prevent dependences on the class from
      any class outside the package.</para>

      <para>Members of a class (fields and methods) may be:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis role="bold">Public:</emphasis> can be accessed from
          anywhere.</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">Private:</emphasis> can be accessed only
          from within the class in which the field or method is
          declared.</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">Protected:</emphasis> can be accessed
          within the package, or from outside the package by a subclass of the
          class in which the members declared.</para>
        </listitem>

        <listitem>
          <para><emphasis>Package:</emphasis> can be accessed within the
          package (it is the default).</para>
        </listitem>
      </itemizedlist>

      <para>Modifiers on members of B allow us to control the nature of
      dependence by changing which members belong to Bâs specification.</para>
    </section>

    <section id="decoupling_in_java_safe_languages">
      <title>Safe Languages</title>

      <para><emphasis>A key property of a program s that one part should only
      depend on another if it names it</emphasis>. This seems obvious, but in
      fact it âs a property that only holds for programs written in so-called
      <emphasis role="bold">safe languages</emphasis>.</para>

      <para>In an unsafe language, the text in one part can affect the
      behaviour of another without any names being shared. This leads to
      insidious bugs that are very hard to track down,and which can have
      disastrous and unpredictable effects.</para>

      <para>Hereâs how it happens:</para>

      <para>Consider a program written in C in where an array is updated
      beyond its bounds. The result may be to overwrite an arbitrary piece of
      memory. It can affect the value of a data structure with a name that is
      declared in a different module.</para>

      <para>Safe languages rule this out by combining several techniques,
      like:</para>

      <itemizedlist>
        <listitem>
          <para>Dynamic checking of array bounds.</para>
        </listitem>

        <listitem>
          <para>Automatic memory management ensures that memory is not
          reclaimed and then mistakenly reused.</para>
        </listitem>
      </itemizedlist>

      <para>Safe languages have been around since 1960: Algol-60, Pascal,
      Modula, LISP, Ada, and now Java.</para>

      <para>Java benefited from a lot of early hype about applets,and now that
      itâs widely used, many companies have taken the plunge and are
      recognizing the benefits of using a safe language.</para>
    </section>

    <section id="decoupling_in_java_interfaces">
      <title>Interfaces</title>

      <para>In languages with subtyping, something interesting is possible:
      Suppose class A mentions only the class B. This does not mean that it
      can only call methods on objects created by class B. Objects created by
      a subclass C of B are regarded as also having the type B.</para>

      <para>Subclassing actually conflates two distinct issues:</para>

      <orderedlist>
        <listitem>
          <para>Objects of class C are to be regarded as having types
          compatible with B.</para>
        </listitem>

        <listitem>
          <para>Code of class C can reuse code from B (inheritance).</para>
        </listitem>
      </orderedlist>

      <para>Java provides a notion of interfaces which give more flexibility
      in subtyping than subclasses.</para>

      <para><emphasis>A Java interface is a pure specification
      part</emphasis>. It contains no executable code, and is used only to aid
      decoupling.</para>

      <para>Hereâs how it works:</para>

      <orderedlist>
        <listitem>
          <para>Instead of having a class A depend on a class B, we introduce
          an interface I.</para>
        </listitem>

        <listitem>
          <para>A now mentions I instead of B ,and B is required to meet the
          specification of I.</para>
        </listitem>

        <listitem>
          <para>Of course the Java compiler doesn't deal with behavioural
          specifications: it just checks that the types of the methods of B
          are compatible with the types declared in I.</para>
        </listitem>

        <listitem>
          <para>At runtime, whenever A expects an object of type I, an object
          of type B is acceptable.</para>
        </listitem>
      </orderedlist>

      <para>For example: The interface List is implemented by the classes:
      LinkedList, ArrayList and Vector. So long as the code refers only to the
      interface, it will work with any of these implementation classes.</para>

      <para>Several classes may implement the same interface,and a class may
      implement several interface.</para>

      <para>In contrast,a class may only subclass at most one other class.
      Because of this, some people use the term âmultiple specification
      inheritanceâ to describe the interface feature of Java, in contrast to
      true multiple inheritance in which can reuse code from multiple
      superclasses.</para>

      <para>Interfaces bring primarily two benefits:</para>

      <itemizedlist>
        <listitem>
          <para>They let you express pure specification parts in code, so you
          can ensure that the use of a class B by a class A involves only a
          dependence of A on a specification S, and not on other details of
          B.</para>
        </listitem>
      </itemizedlist>

      <itemizedlist>
        <listitem>
          <para>Interfaces let you provide several implementation parts that
          meet a single specification, with the selection being made at
          compile time or at runtime.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section id="decoupling_in_java_lecture_notes">
      <title>Lecture Notes</title>

      <para>Links to:</para>

      <itemizedlist>
        <listitem>
          <para><ulink url="../pdf/lecture-03.pdf">Lecture
          Notes</ulink>.</para>
        </listitem>

        <listitem>
          <para><ulink url="http://ocw.mit.edu/6/6.170/f01/index.html">MIT
          OpenCourseware</ulink>.</para>
        </listitem>

        <listitem>
          <para><ulink url="http://web.mit.edu/"><inlinegraphic
          contentdepth="21px" contentwidth="38px" fileref="img/mit_logo.gif"
          format="GIF" /></ulink></para>
        </listitem>
      </itemizedlist>
    </section>
  </chapter>

  <chapter id="object_contract">
    <title>Object Contract</title>

    <section id="object_contract_equality_properties">
      <title>Equality Properties</title>

      <para>Every class extends Object, and therefore inherits all of its
      methods. Two of these are particularly important and consequential in
      all programs, the method for testing equality:</para>

      <programlisting>public boolean equals (Object o)</programlisting>

      <para>and the method for generating a hash code:</para>

      <programlisting>public int hashCode ()</programlisting>

      <para>Equality Properties:</para>

      <orderedlist>
        <listitem>
          <para><emphasis role="bold">Reflexivity</emphasis> - means that an
          object always equals itself.</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">Symmetry</emphasis> - means that when a
          equals b ,b equals -a.</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">Transitivity</emphasis> - means that
          when a equals b and b equals c, a also equals c.</para>
        </listitem>
      </orderedlist>

      <para>Consider a simple class that implements a two-dimensional
      point:</para>

      <programlisting>    public class Point {
        private final int x;
        private final int y;
        public Point (int x,int y){
            this.x =x;this.y =y;
        }
        public boolean equals (Object o){
            if (!(o instanceof Point))
                return false;
            Point p =(Point)o;
            return p.x ==x &amp;&amp;p.y ==y;
        }
        â¦
    }</programlisting>

      <para>Now suppose we add the notion of a colour:</para>

      <programlisting>    public class ColourPoint extends Point {
        private Colour colour;
        public ColourPoint (int x,int y,Colour colour){
            super (x,y);
            this.colour =colour;
        }
        â¦
    }</programlisting>

      <para>What should the equals method of ColourPoint look like? We could
      just inherit equals from Point, but then two ColourPoints will be deemed
      equal even if they have different colours. We could override it like
      this:</para>

      <programlisting>    public boolean equals (Object o){
        if (!(o instanceof ColourPoint))
            return false;
        ColourPoint cp =(ColourPoint)o;
        return super.equals (o)&amp;&amp;cp.colour.equals(colour);
    }</programlisting>

      <para>This seemingly inoffensive method actually violates the
      requirement of symmetry. To see why, consider a point and a colour
      point:</para>

      <programlisting>    Point p =new Point (1,2);
    ColourPoint cp =new ColourPoint (1,2,Colour.RED);</programlisting>

      <para>Now <command>p.equals(cp)</command> will return true, but
      <command>cp.equals(p)</command> will return false! The problem is that
      these two expressions use different equals methods: the first uses the
      method from Point, which ignores colour, and the second uses the method
      from ColourPoint.</para>

      <para>It turns out that there is <emphasis>no solution</emphasis> to
      this problem: itâs a fundamental problem of inheritance. You canât write
      a good equals method for ColourPoint if it inherits from Point .</para>

      <para>However, if you implement ColourPoint using Point in its
      representation, so that a ColourPoint is no longer treated as a Point,
      the problem goes away. See Blochâs book for details.</para>
    </section>

    <section id="object_contract_hashing">
      <title>Hashing</title>

      <para>If two objects a and b are equals, <command>a.equals(b)</command>
      is true, they should have return the same hash code.</para>

      <para>The standard way to construct a e reasonable hash code that still
      satisfies the contract is:</para>

      <orderedlist>
        <listitem>
          <para>to compute a hash code for each component of the object that
          is used in the determination of equality (usually by calling the
          hashCode method of each component).</para>
        </listitem>

        <listitem>
          <para>to combine them throwing in a few arithmetic
          operations.</para>
        </listitem>
      </orderedlist>

      <para>Look at Blochâs book for details.</para>

      <para><emphasis role="bold">Note:</emphasis> if you donât override
      <command>hashCode</command> at all, youâll get the one from
      <command>Object</command>, which is based on the address of the object
      (like the default equals). If you have overridden
      <command>equals</command>, this will mean that you will have almost
      certainly violated the contract. So as a general rule:</para>

      <para><emphasis>Always override hashCode when you override
      equals.</emphasis></para>
    </section>

    <section id="object_contract_clone">
      <title>Clone</title>

      <para>People divide object copy in:</para>

      <itemizedlist>
        <listitem>
          <para>A <emphasis role="bold">shallow copy</emphasis> of an object s
          made by creating a new object whose fields point to the same objects
          as the old object.</para>
        </listitem>

        <listitem>
          <para>A <emphasis role="bold">deep copy</emphasis> is made by
          creating a new object also for the objects pointed to by the fields,
          and perhaps for the objects they point to, and so on.</para>
        </listitem>
      </itemizedlist>

      <para>You may assume that you should use the clone method of Object,
      along with the Cloneable interface.</para>

      <para>Unfortunately the design of this part of Java is not quite right,
      and it is very difficult to use it well.</para>

      <para>So it is recommend that you implement your own method to clone.
      See Blochâs book for an insightful discussion of the problem.</para>
    </section>

    <section id="object_contract_lecture_notes">
      <title>Lecture Notes</title>

      <para>Links to:</para>

      <itemizedlist>
        <listitem>
          <para><ulink url="../pdf/lecture-09.pdf">Lecture
          Notes</ulink>.</para>
        </listitem>

        <listitem>
          <para><ulink url="http://ocw.mit.edu/6/6.170/f01/index.html">MIT
          OpenCourseware</ulink>.</para>
        </listitem>

        <listitem>
          <para><ulink url="http://web.mit.edu/"><inlinegraphic
          fileref="img/mit_logo.gif" /></ulink></para>
        </listitem>
      </itemizedlist>
    </section>
  </chapter>

  <chapter id="specification">
    <title>Specification</title>

    <section id="specification_introduction">
      <title>Introduction</title>

      <para>Itâs impossible to delegate responsibility for implementing a
      method without a specification.</para>

      <para>The specification acts as a contract:</para>

      <itemizedlist>
        <listitem>
          <para>the implementor is responsible for meeting the
          contract.</para>
        </listitem>

        <listitem>
          <para>a client that uses the method can rely on the contract.</para>
        </listitem>
      </itemizedlist>

      <para>Many of the nastiest bugs in programs arise because of
      misunderstandings about behavior at interfaces.</para>

      <itemizedlist>
        <listitem>
          <para>Specifications are good for the client of a method because
          they spare her the task of reading code.</para>
        </listitem>

        <listitem>
          <para>Specifications are good for the implementor of a method
          because they give her freedom to change the implementation without
          telling clients.</para>
        </listitem>
      </itemizedlist>

      <para>Until now, we were concerned only with <emphasis>whether a
      dependence existed</emphasis>. Here, we are investigating the question
      of <emphasis>what form the dependence</emphasis> should take.</para>

      <para>By exposing only the specification of a procedure, its clients are
      less dependent on it, and therefore less likely to need changing when
      the procedure changes.</para>
    </section>

    <section id="specification_behavioral_equivalence">
      <title>Behavioral Equivalence</title>

      <para>Consider these two methods. Are they the same or different?</para>

      <programlisting>    static int findA (int [] a, int val) {
        for (int i = 0; i &lt; a.length; i++) {
            if (a[i] == val) return i;
        }
        return a.length;
    }

    static int findB (int [] a, int val) {
        for (int i = a.length -1 ; i &gt; 0; i--) {
            if (a[i] == val) return i;
        }
        return -1;
    }</programlisting>

      <para>Not only do these methods have different code; they actually have
      different behavior:</para>

      <itemizedlist>
        <listitem>
          <para>when <emphasis role="bold">val</emphasis> is missing, findA
          returns the length and findB returns -1;</para>
        </listitem>

        <listitem>
          <para>when <emphasis role="bold">val</emphasis> appears twice, findA
          returns the lower index and findB returns the higher.</para>
        </listitem>
      </itemizedlist>

      <para>But when val occurs at exactly one index of the array, the two
      methods behave the same.</para>

      <para>To make it possible to substitute one implementation for another,
      we need a specification:</para>

      <programlisting>    requires: val occurs only once in a
    effects: returns result such that a[result] = val</programlisting>
    </section>

    <section id="specification_specification_structure">
      <title>Specification Structure</title>

      <para>A specification of a method consists of several clauses:</para>

      <itemizedlist>
        <listitem>
          <para>a precondition, indicated by the keyword
          <emphasis>requires</emphasis>;</para>
        </listitem>

        <listitem>
          <para>a postcondition, indicated by the keyword
          <emphasis>effects</emphasis>;</para>
        </listitem>

        <listitem>
          <para>a frame condition, indicated by the keyword
          <emphasis>modifies</emphasis>.</para>
        </listitem>
      </itemizedlist>

      <para>The <emphasis role="bold">precondition</emphasis> is an obligation
      on the client (i.e., the caller of the method). Itâs a condition over
      the state in which the method is invoked.</para>

      <para>If the precondition does not hold, the implementation of the
      method is free to do anything.</para>

      <para>The <emphasis role="bold">postcondition</emphasis> is an
      obligation on the implementor of the method. If the precondition holds
      for the invoking state, the method is obliged to obey the postcondition
      by returning appropriate values, throwing specified exceptions,
      etc.</para>

      <para>The <emphasis role="bold">frame</emphasis> condition identifies
      which objects may be modified. If we say modifies x, this means that the
      object x, which is presumed to be mutable, may be modified, but no other
      object may be.</para>

      <para>Omitted clauses:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis role="bold">precondition:</emphasis> That means that
          every invoking state satisfies it, so there is no obligation on the
          caller. In this case, the method is said to be total</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">postcondition:</emphasis> It is never
          omitted.</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">frame:</emphasis> The default is
          modifies nothing. In other words, the method makes no changes to any
          object.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section id="specification_declarative_specification">
      <title>Declarative Specification</title>

      <para>Roughly speaking, there are two kinds of specifications:</para>

      <orderedlist>
        <listitem>
          <para><emphasis role="bold">Operational specifications</emphasis>
          give a series of steps that the method performs; pseudocode
          descriptions are operational.</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">Declarative specifications</emphasis>
          donât give details of intermediate steps. Instead, they just give
          properties of the final outcome, and how itâs related to the initial
          state.</para>
        </listitem>
      </orderedlist>

      <para>Almost always, declarative specifications are preferable.</para>

      <para><emphasis role="bold">Examples:</emphasis></para>

      <orderedlist>
        <listitem>
          <para>The class StringBuffer provides objects that are like String
          objects but mutable. The reverse method <command>reverses</command>
          a string. Hereâs how itâs specified in the Java API:</para>

          <programlisting>    public StringBuffer reverse()
    // modifies: this
    // effects: Let n be the length of the old character sequence, the one contained in the string buffer
    // just prior to execution of the reverse method. Then the character at index k in the new
    // character sequence is equal to the character at index n-k-1 in the old character sequence.</programlisting>

          <para>Note that the postcondition gives no hint of how the reversing
          is done.</para>
        </listitem>

        <listitem>
          <para>Another example, this time from String. The
          <command>startsWith</command> method tests whether a string starts
          with a particular substring.</para>

          <programlisting>    public boolean startsWith(String prefix)
    // Tests if this string starts with the specified prefix.
    // effects:
    // if (prefix = null) throws NullPointerException
    // else returns true if exists a sequence s such that (prefix.seq ^ s = this.seq)</programlisting>
        </listitem>

        <listitem>
          <para>The final example shows how a declarative specification can
          express what is often called non-determinism.</para>

          <para>y not giving enough details to allow the client to infer the
          behavior in all cases, the specification makes implementation
          easier.</para>

          <para>There is a class <command>BigInteger</command> in the package
          <command>java.math</command> whose objects are integers of unlimited
          size. The class has a method similar to this:</para>

          <programlisting>    public boolean maybePrime ()
    // effects: if this BigInteger is composite, returns false</programlisting>

          <para>If this method returns false, the client knows the integer is
          not prime. But if it returns true, the integer may be prime or
          composite. So long as the method returns false a reasonable
          proportion of the time, itâs useful.</para>
        </listitem>
      </orderedlist>
    </section>

    <section id="specification_exceptions_and_preconditions">
      <title>Exceptions and Preconditions</title>

      <para>An obvious design issue is whether to use a precondition, and if
      so, whether it should be checked.</para>

      <itemizedlist>
        <listitem>
          <para>a precondition does not require that checking be
          performed.</para>
        </listitem>

        <listitem>
          <para>On the contrary, the most common use of preconditions is to
          demand a property precisely because it would be hard or expensive to
          check.</para>
        </listitem>
      </itemizedlist>

      <para>A non-trivial precondition renders the method partial. This
      inconveniences clients, because they have to ensure that they donât call
      the method in a bad state.</para>

      <para>So users of methods donât like preconditions, and for this reason
      the <emphasis>methods of a library will usually be
      total</emphasis>.</para>

      <para>But sometimes though, a precondition allows you to write
      <emphasis>more efficient</emphasis> code and saves trouble.</para>

      <para>The decision of whether to use a precondition is an engineering
      judgment. The key factors are:</para>

      <itemizedlist>
        <listitem>
          <para>the cost of the check (in writing and executing code)</para>
        </listitem>

        <listitem>
          <para>the scope of the method: if itâs only called locally in a
          class, the precondition can be discharged by carefully checking all
          the sites that call the method.</para>
        </listitem>
      </itemizedlist>

      <para>Sometimes, itâs not feasible to check a condition without making a
      method unacceptably slow, and a precondition is often necessary in this
      case.</para>

      <para><emphasis role="bold">Example:</emphasis> In the Java standard
      library, for example, the binary search methods of the Arrays class
      require that the array given be sorted. To check that the array is
      sorted would defeat the entire purpose of the binary search: to obtain a
      result in logarithmic and not linear time.</para>

      <para>Even if you decide to use a precondition, it may be possible to
      insert useful checks that may detect that the precondition was
      violated.</para>

      <para><emphasis role="bold">Example:</emphasis> For example, in
      balancing the binary tree, you might check when you visit a node that
      its children are appropriately ordered.</para>

      <para>If a precondition is found to be violated, you should throw an
      unchecked <emphasis>exception</emphasis>, since the client will not be
      expected to handle it. The throwing of the exception will not be
      mentioned in the specification, although it can appear in implementation
      notes below it.</para>
    </section>

    <section id="specification_shorthands">
      <title>Shorthands</title>

      <para>There are some convenient shorthands that make it easier to write
      specifications.</para>

      <para>When a method does not modify anything, we specify the return
      value in a returns clause. If an exception is thrown, the condition and
      the exception are given in a throws clause. For example, instead
      of:</para>

      <programlisting>    public boolean startsWith(String prefix)
    // effects:
    // if (prefix = null) throws NullPointerException
    // else returns true if exists a sequence s such that (prefix.seq ^ s = this.seq)</programlisting>

      <para>write</para>

      <programlisting>    public boolean startsWith(String prefix)
    // throws: NullPointerException if (prefix = null)
    // returns: true if exists a sequence s such that (prefix.seq ^ s = this.seq)</programlisting>

      <para>The use of these shorthands implies that no modifications
      occur.</para>
    </section>

    <section id="specification_judging_specifications">
      <title>Judging Specifications</title>

      <para>Suppose you want to substitute one method for another. How do you
      compare the specifications?</para>

      <para>A specification A is at least as strong as a specification B
      if</para>

      <itemizedlist>
        <listitem>
          <para>Aâs precondition is no stronger than Bâs</para>
        </listitem>

        <listitem>
          <para>Aâs postcondition is no weaker than Bâs, for the states that
          satisfy Bâs precondition.</para>
        </listitem>
      </itemizedlist>

      <para>For example, the method maybePrime can be replaced in any context
      by a method isPrime that returns true if and only if the integer is
      prime.</para>

      <para>There are no infallible rules to write specifications, but there
      are some useful guidelines:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis role="bold">The specification should be
          coherent:</emphasis> it shouldn't have lots of different cases.
          Deeply nested if- statements are a sign of trouble, as are boolean
          flags presented as arguments.</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">The results of a call should be
          informative:</emphasis> Javaâs HashMap class has a put method that
          takes a key and a value and returns a previous value if that key was
          already mapped, or null otherwise. HashMaps allow null references to
          be stored, so a null result is hard to interpret.</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">The specification should be strong
          enough:</emphasis> Thereâs no point throwing a checked exception for
          a bad argument but allowing arbitrary mutations, because a client
          wonât be able to determine what mutations have actually been
          made.</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">The specification should be weak
          enough:</emphasis> A method that takes a URL and returns a network
          connection clearly cannot promise always to succeed.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section id="specification_lecture_notes">
      <title>Lecture Notes</title>

      <para>Links to:</para>

      <itemizedlist>
        <listitem>
          <para><ulink url="../pdf/lecture-04.pdf">Lecture
          Notes.</ulink></para>
        </listitem>

        <listitem>
          <para><ulink url="http://ocw.mit.edu/6/6.170/f01/index.html">MIT
          OpenCourseware</ulink>.</para>
        </listitem>

        <listitem>
          <para><ulink url="http://web.mit.edu/"><inlinegraphic
          contentdepth="21px" contentwidth="38px" fileref="img/mit_logo.gif"
          format="GIF" /></ulink></para>
        </listitem>
      </itemizedlist>
    </section>
  </chapter>

  <chapter id="dynamic_analysis">
    <title>Dynamic Analysis</title>

    <section id="dynamic_analysis_defensive_programming">
      <title>Defensive Programming</title>

      <para>The best way to ensure the quality of the software you build is to
      design it carefully from the start.</para>

      <para><emphasis>dynamic techniques</emphasis>: those that involve
      executing the program and observing its behaviour.</para>

      <para><emphasis>static techniques</emphasis>: those that you use to
      ensure quality before you execute (by evaluating the design and by
      analyzing the code).</para>

      <para><emphasis role="bold">Defensive programming</emphasis> is an
      approach to increasing the reliability of a program by inserting
      redundant checks.</para>

      <para><emphasis>Hereâs how it works</emphasis>: When youâre writing some
      code, you figure out conditions that you expect to hold at certain
      points in the code â invariants, in other words. Then, rather than just
      assuming that these invariants hold, you test them explicitly.</para>

      <section>
        <title>Guidelines</title>

        <para>When should you write runtime assertions? As you write the code,
        not later.</para>

        <para>Runtime assertions are not free.</para>

        <para>Good programmers will typically use assertions in these
        ways:</para>

        <itemizedlist>
          <listitem>
            <para>At the start of a procedure,</para>
          </listitem>

          <listitem>
            <para>At the end of a complicated procedure,</para>
          </listitem>

          <listitem>
            <para>When an operation is about to be performed that has some
            external effect.</para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title>Catching Common Exceptions</title>

        <para>(JVM) â already includes runtime assertions for several
        important classes of error:</para>

        <itemizedlist>
          <listitem>
            <para>Calling a method on a null object reference;</para>
          </listitem>

          <listitem>
            <para>Accessing an array out of bounds;</para>
          </listitem>

          <listitem>
            <para>Performing an invalid downcast.</para>
          </listitem>
        </itemizedlist>

        <para>It is good practice to catch all these exceptions!</para>
      </section>

      <section>
        <title>Responding to Failure</title>

        <para>You might feel tempted to try and fix the problem on the fly.
        This is almost always the wrong thing to do. It makes the code more
        complicated, and usually introduces even more bugs.</para>

        <para>On the other hand, it often makes sense to execute some special
        actions irrespective of the exact cause of failure:</para>

        <itemizedlist>
          <listitem>
            <para>You might log the failure to a file,</para>
          </listitem>
        </itemizedlist>

        <itemizedlist>
          <listitem>
            <para>and/or notify the user on the screen,</para>
          </listitem>
        </itemizedlist>

        <itemizedlist>
          <listitem>
            <para>In a safety critical system, deciding what actions are to be
            performed on failure is tricky and very important.</para>
          </listitem>
        </itemizedlist>

        <para>Sometimes, itâs best not to abort execution at all.</para>
      </section>
    </section>

    <section id="dynamic_analysis_testing">
      <title>Testing</title>

      <para>Testing is much more effective, and much less painful, if you
      approach it systematically.</para>

      <para>What properties you want to test for:</para>

      <itemizedlist>
        <listitem>
          <para>what modules you want to test, and what order youâll test them
          in;</para>
        </listitem>

        <listitem>
          <para>how youâll generate test cases;</para>
        </listitem>

        <listitem>
          <para>how youâll check the results;</para>
        </listitem>

        <listitem>
          <para>when youâll know that youâre done.</para>
        </listitem>
      </itemizedlist>

      <para>Deciding what properties to test for will require knowledge of the
      problem domain,</para>

      <para>Choosing modules is more straightforward.</para>

      <para>Checking results can be hard.</para>

      <section id="dynamic_analysis_regression_tests">
        <title>Regression Tests</title>

        <para>Itâs a bad idea to do ad hoc testing that canât be
        repeated.</para>

        <para><emphasis role="bold">Regression Tests</emphasis>: a suite of
        tests that can be reexecuted from a file.</para>

        <para><emphasis role="bold">Test first
        programming</emphasis>:encourages construction of regression tests
        even before any application code is written. It is an important part
        of the new development doctrine called <emphasis role="bold">extreme
        programming</emphasis>. JUnit, the testing framework that you've been
        using, was designed for this.</para>
      </section>
    </section>

    <section id="dynamic_analysis_criteria">
      <title>Criteria</title>

      <para>Suppose we have a program <command>P</command> that is supposed to
      meet a specification <command>S</command>. For simplicity
      <command>P</command> is a function from inputs to outputs, and
      <command>S</command> is a function that takes an input and an output and
      returns a boolean. Our aim in testing is to find a test case
      <command>t</command> such that:</para>

      <programlisting>S (t, P(t))</programlisting>

      <para>is <command>false</command>: that is, <command>P</command>
      produces a result for the input t that is not permitted by
      <command>S</command>. We will call <command>t</command> a failing test
      case.</para>

      <para>A test suite <command>T</command> is a set of test cases. When is
      a suite âgood enoughâ? We can apply an evaluation criterion:</para>

      <itemizedlist>
        <listitem>
          <para>A criterion that involves only the program is called a
          <emphasis role="bold">program-based criterion</emphasis>. People
          also use terms like âwhiteboxâ, âclearboxâ, âglassboxâ, or
          âstructuralâ testing to describe testing that uses this
          criteria.</para>
        </listitem>

        <listitem>
          <para>A criterion that involves only the specification is called a
          <emphasis role="bold">specification-based criterion</emphasis>. The
          terms âblackboxâ testing is used in association with it, to suggest
          that the tests are judged without being able to see inside the
          program. You might also hear the term âfunctionalâ testing.</para>
        </listitem>
      </itemizedlist>

      <para>Most criteria donât involve both the program and the
      specification.</para>
    </section>

    <section id="dynamic_analysis_subdomains">
      <title>Subdomains</title>

      <para>The input space is divided into regions usually called <emphasis
      role="bold">subdomains</emphasis>, each containing a set of inputs. The
      subdomains together exhaust the input space â that is, every input is in
      at least one subdomain. The criterion used here is that there be at
      least one test case from each subdomain.</para>

      <para>The intuition behind subdomains is two-fold:</para>

      <orderedlist>
        <listitem>
          <para>Itâs an easy way (at least conceptually) to determine if a
          test suite is good enough.</para>
        </listitem>

        <listitem>
          <para>We hope that by requiring a case from each subdomain, we will
          drive testing into regions of the input space most likely to find
          bugs</para>
        </listitem>
      </orderedlist>

      <para>In the best case, a subdomain is <emphasis>revealing</emphasis>:
      This means that every test case in it either causes the program to fail
      or to succeed.</para>

      <para>In practice, itâs very hard to get <emphasis>revealing</emphasis>
      subdomains. But by careful choice of subdomains itâs possible to have at
      least some subdomains whose error rate â the proportion of inputs that
      lead to bad outputs â is much higher than the average error rate for the
      input space as a whole.</para>
    </section>

    <section id="dynamic_analysis_subdomain_criteria">
      <title>Subdomain Criteria</title>

      <para>The standard and most widely used criterion for <emphasis
      role="bold">program-based</emphasis> testing is:</para>

      <para><emphasis role="bold">Statement coverage</emphasis>:
      <emphasis>that every statement in the program must be executed at least
      once</emphasis>.</para>

      <para>There are more burdensome criteria than statement coverage:</para>

      <para><emphasis role="bold">Decision coverage</emphasis>:
      <emphasis>requires that every edge in the control flow graph of the
      program be executed â roughly that every branch in the program be
      executed both ways</emphasis>.</para>

      <para>Consider applying these criteria to a procedure that returns the
      minimum of two numbers:</para>

      <programlisting>static int minimum (int a, int b) {
   if (a â¤b)
      return a;
   else
      return b;
}</programlisting>

      <para>For this code, <emphasis role="bold">statement coverage</emphasis>
      will require inputs with <command>a</command> less than
      <command>b</command> and vice versa. However, for the code:</para>

      <programlisting>static int minimum (int a, int b) {
   int result = b; 
   if (b â¤a)
      result = b;
   return result;
}</programlisting>

      <para>a single test case with <command>b</command> less than
      <command>a</command> will produce statement coverage, and the bug will
      be missed.</para>

      <para><emphasis role="bold">Decision coverage</emphasis> would require a
      case in which the <command>if-branch</command> is not executed, thus
      exposing the bug.</para>

      <para>Another example of program-based subdomain criterion is the
      <emphasis role="bold">boundary testing</emphasis>: <emphasis>This
      requires that the boundary cases for every conditional be
      evaluated</emphasis>.</para>

      <para>For example, if your program tests<command> x &lt; n</command>,
      you would require test cases that produce <command>x = n</command>,
      <command>x=n-1</command>, and <command>x=n+1</command>.</para>

      <section>
        <title>Specification-based Subdomains</title>

        <para><emphasis role="bold">Specification-based criteria
        </emphasis>are also usually cast in terms of subdomains.</para>

        <para>However, because specifications are usually informal â that is,
        not written in any precise notation â the criteria tend to be much
        vaguer.</para>

        <para>The most common approach is to define subdomains according to
        the structure of the specification and the values of the underlying
        data types. For example:</para>

        <blockquote>
          <para>The subdomains for a method that inserts an element into a set
          might include:</para>

          <itemizedlist>
            <listitem>
              <para>the set is empty.</para>
            </listitem>

            <listitem>
              <para>the set is non-empty and the element is not in the
              set.</para>
            </listitem>

            <listitem>
              <para>the set is non-empty and the element is in the set.</para>
            </listitem>
          </itemizedlist>
        </blockquote>

        <para>Moreover, in practice, testers make use of their knowledge of
        the kinds of errors that often arise in code. For example:</para>

        <blockquote>
          <para>If youâre testing a procedure that finds an element in an
          array, you would likely put the element at the start, in the middle
          and at the end, simply because these are likely to be handled
          differently in the code.</para>
        </blockquote>
      </section>
    </section>

    <section id="dynamic_analysis_feasibility">
      <title>Feasibility</title>

      <para>Full coverage is rarely possible. In fact, even achieving 100%
      <emphasis role="bold">statement coverage</emphasis> is usually
      impossible.</para>

      <para>A criterion is said to be <emphasis>feasible</emphasis> if it is
      possible to satisfy it. In practice, criteria are not usually
      feasible.</para>

      <para>Despite these problems, the idea of coverage is a very important
      one in practice. If there are significant parts of your program that
      have never been executed, <emphasis>you should not have much confidence
      in their correctness!</emphasis></para>

      <section>
        <title>Practical Guidance</title>

        <para>It should be clear why neither
        <emphasis>program-based</emphasis> nor
        <emphasis>specification-based</emphasis> criteria are alone good
        enough.</para>

        <itemizedlist>
          <listitem>
            <para>If you only look at the program, youâll miss errors of
            omission.</para>
          </listitem>

          <listitem>
            <para>If you only look at the specification, youâll miss errors
            that arise from implementation concerns.</para>
          </listitem>
        </itemizedlist>

        <para>Experience suggests that the best way to develop a good test
        suite is to use <emphasis>specification-based</emphasis> criteria to
        guide the development of the suite, and
        <emphasis>program-based</emphasis> criteria to evaluate it:</para>

        <orderedlist>
          <listitem>
            <para>You examine the specification, and define input
            subdomains.</para>
          </listitem>

          <listitem>
            <para>Based on these, you write test cases.</para>
          </listitem>

          <listitem>
            <para>You execute the test cases, and measure the code
            coverage.</para>
          </listitem>

          <listitem>
            <para>If the coverage is inadequate, you add new test
            cases.</para>
          </listitem>
        </orderedlist>

        <para>Runtime assertions, especially representation invariant checks,
        will dramatically amplify the power of your testing. Youâll find more
        bugs with fewer cases, and youâll track them down more easily.</para>
      </section>
    </section>

    <section id="dynamic_analysis_lecture_notes">
      <title>Lecture Notes</title>

      <para>Links to:</para>

      <itemizedlist>
        <listitem>
          <para><ulink url="../pdf/lecture-10.pdf">Lecture Notes1</ulink> and
          <ulink url="../pdf/lecture-11.pdf">Lecture Notes2</ulink>.</para>
        </listitem>

        <listitem>
          <para><ulink url="http://ocw.mit.edu/6/6.170/f01/index.html">MIT
          OpenCourseware</ulink>.</para>
        </listitem>

        <listitem>
          <para><ulink url="http://web.mit.edu/"><inlinegraphic
          contentdepth="21px" contentwidth="38px" fileref="img/mit_logo.gif"
          format="GIF" /></ulink></para>
        </listitem>
      </itemizedlist>
    </section>
  </chapter>

  <chapter id="udf">
    <title>UDF</title>

    <section id="udf_unit_development_folder">
      <title>Unit Development Folder</title>

      <itemizedlist>
        <listitem>
          <para>UDF</para>

          <para><emphasis role="bold">Definition:</emphasis></para>

          <para>It is a specific form of development notebook which has proven
          useful and effective in collecting and orginizing software products
          as they are produced.</para>

          <para><emphasis role="bold">Purposes:</emphasis></para>

          <orderedlist>
            <listitem>
              <para>Provide an ordely and consistent approach in the
              development of each of the units of a program or project.</para>
            </listitem>

            <listitem>
              <para>Provide an uniform and visible collection point for all
              unit documentation and code.</para>
            </listitem>

            <listitem>
              <para>Aid individual discipline in the establishment and
              attainment of scheduled unit-level milestones.</para>
            </listitem>

            <listitem>
              <para>Provide low-level management visibility and control over
              the development process.</para>
            </listitem>

            <listitem>
              <para>Management can easily access the status of the
              unit.</para>
            </listitem>

            <listitem>
              <para>Much of the unit's deliverable documentation can be
              constructed from the UDF, when development is nearing
              completion.</para>
            </listitem>

            <listitem>
              <para>Most of the information necessary for post-delivery
              maintenance will be assembled in one place.</para>
            </listitem>
          </orderedlist>

          <para><emphasis role="bold">Main Points:</emphasis></para>

          <itemizedlist>
            <listitem>
              <para>The UDF is established in skeletal form prior to the start
              of design.</para>
            </listitem>

            <listitem>
              <para>The UDF becomes the primary tool for monitoring progress
              during software development and testing activities.</para>
            </listitem>

            <listitem>
              <para>All UDFs are controlled by a Project Engineer, who assigns
              a UDF Custodian for each UDF.</para>
            </listitem>

            <listitem>
              <para>The UDF can be audited at periodic intervals during the
              development process.</para>
            </listitem>

            <listitem>
              <para>The UDF Custodians are responsible for assuring that their
              UDFs are properly prepared and maintained.</para>
            </listitem>
          </itemizedlist>
        </listitem>
      </itemizedlist>
    </section>

    <section id="udf_unit_development_folder_guide">
      <title>Unit Development Folder Guide</title>

      <itemizedlist>
        <listitem>
          <para><emphasis role="bold">Overview</emphasis></para>

          <para>The purpose of this guide is to define and require a standard
          format for writing Unit Development Folders (UDF. There are several
          purposes which are served by Unit Development Folders:</para>

          <orderedlist>
            <listitem>
              <para>Provide an ordely and consistent approach in the
              development of each of the units of a program or project.</para>
            </listitem>

            <listitem>
              <para>Provide an uniform and visible collection point for all
              unit documentation and code.</para>
            </listitem>

            <listitem>
              <para>Aid individual discipline in the establishment and
              attainment of scheduled unit-level milestones.</para>
            </listitem>

            <listitem>
              <para>Provide low-level management visibility and control over
              the development process.</para>
            </listitem>

            <listitem>
              <para>Management can easily access the status of the unit</para>
            </listitem>

            <listitem>
              <para>Much of the unit's deliverable documentation can be
              constructed from the UDF, when development is nearing
              completion.</para>
            </listitem>

            <listitem>
              <para>Most of the information necessary for post-delivery
              maintenance will be assembled in one place.</para>
            </listitem>
          </orderedlist>

          <para>The UDF is established in skeletal form prior to the start of
          design and becomes the primary tool for monitoring progress during
          software development and testing activities. All UDFs are controlled
          by a Project Engineer, who assigns a UDF Custodian (responsible
          designer) for each UDF. The UDF will be audited at periodic
          intervals during the development process by the responsible Project
          Engineer to assure that the required format of the UDF is maintained
          and to allow complete assessment of unit status to be made.</para>

          <para>The UDF will be maintained in a binder with tabbed sections.
          Each UDF will be externally identified by a unique name, descriptive
          of the unit contained therein. Each UDF contains directly or
          provides a reference to the current documentation for each of its
          required items.</para>

          <para>The UDF Custodians are responsible for assuring that their
          UDFs are properly prepared and maintained. The Project Engineers are
          charged with assuring that the UDFs are structured uniformly to
          provide clarity and ease of inspection. The Project Engineer is also
          responsible for performing audits of the UDFs to verify adherence to
          the standards and requirements established by this guide.</para>
        </listitem>
      </itemizedlist>

      <itemizedlist>
        <listitem>
          <para><emphasis role="bold">UDF Organization and
          Content</emphasis></para>

          <para>The organization and contents of a UDF can be adapted to
          reflect local conditions or individual projects requirements. The
          important considerations in the structuring of a UDF are:</para>

          <orderedlist>
            <listitem>
              <para>The number of subdivisions is not so large as to be
              confusing or unmanageable.</para>
            </listitem>

            <listitem>
              <para>Each of the sections contributes to the management and
              visibility of the development process.</para>
            </listitem>

            <listitem>
              <para>The content and format of each section are afequately and
              unambiguosly defined.</para>
            </listitem>

            <listitem>
              <para>The subdivisions are suficiently flexible to be applicable
              to a variety of software types.</para>
            </listitem>

            <listitem>
              <para>The individual sections are chronologically ordered as
              nearly as possible.</para>
            </listitem>
          </orderedlist>

          <para>The development of the UDF is geared to proceed logically and
          sequentially, and each section should be as complete as possible
          before proceeding to the next section. This is not always possible,
          and software development is usually an interative rather than
          sequencial process. These situations only serve to reinforce the
          need for an ordered process that can be understood and tracked even
          under adverse conditions.</para>

          <para>A UDF should contain the following sections:</para>

          <itemizedlist>
            <listitem>
              <para><emphasis role="bold">Introduction</emphasis></para>

              <para>This section contains a UDF cover sheet (figure 1) for the
              unit and identifies the status of the components of the UDF. The
              cover sheet delineates, for each of the sections, the start and
              completion dates, responsible originators, and reviewer
              sign-offs and dates.</para>

              <para>Following the cover sheet is a description of the unit,
              system overview, and how the unit fits into the system. A top
              level structure diagram of the units components will be
              provided. Also provide naming conventions used, plus any unique
              system capabilities required by the unit.</para>

              <para>Following this description, a unit schedule will be
              included. This schedule will show the state of all the unit's
              components. Each component will be listed along with start date,
              percent complete, and completion date for each of the following
              functions: Design, Code, and Test.</para>

              <para>Following each cover sheet, a UDF Change Log should be
              included to document all UDF changes subsequent to the time when
              the unit is put into a controlled test or maintenance
              environment.</para>
            </listitem>

            <listitem>
              <para><emphasis role="bold">Requirements</emphasis></para>

              <para>This section will contain as separately tabbed subsections
              program requirements specification documentation and the program
              operating environment. The program requirements specification
              subsection will contain a copy of any current requirements
              documentation applicable to the unit. The program operating
              environment subsection will contain the hardware and operating
              system configurations required for the operation of the
              unit.</para>
            </listitem>

            <listitem>
              <para><emphasis role="bold">External
              Interfaces</emphasis></para>

              <para>This section contains a detailed data description for all
              external interfaces either required or generated by this
              unit.</para>
            </listitem>

            <listitem>
              <para><emphasis role="bold">Design Description</emphasis></para>

              <para>This section will contain as subsections the design
              description for each unit component. Each subsection will
              contain the component functional description, the interfaces,
              the data organization (data dictionary, data flows), control
              flows, state diagrams, and PDL describing the process flow.
              Throughout the development and maintenance process, each Design
              subsection represents the current working version of the design,
              and therefore will be maintained and annotated as changes occur
              to the initial design. The information presented here should
              reflect the component's header.</para>

              <para>If you are doing development in an object oriented
              language (such as Java), add the Class Diagrams (UML) of your
              program as pictures. If you used other UML diagrams, add them
              also.</para>
            </listitem>

            <listitem>
              <para><emphasis role="bold">Code</emphasis></para>

              <para>As the unit components are modified, this section contains
              the listing for unit component.</para>

              <para>Do not forget to document the specification of every
              method (or procedure) of your program, a specification of a
              method (or procedure) consists of several clauses:</para>

              <itemizedlist>
                <listitem>
                  <para>a precondition, indicated by the keyword
                  requires;</para>
                </listitem>

                <listitem>
                  <para>a postcondition, indicated by the keyword
                  effects;</para>
                </listitem>

                <listitem>
                  <para>a frame condition, indicated by the keyword
                  modifies.</para>
                </listitem>
              </itemizedlist>

              <para>Remember: not all clauses have to be present in all
              specifications; in Java, use the javadoc utility to generate
              documentation.</para>
            </listitem>

            <listitem>
              <para><emphasis role="bold">Unit Test Plan</emphasis></para>

              <para>This section contains a test plan for the unit and
              identifies the individual tests described. A description of each
              test case will be included. Whenever possible use a xUnit test
              framework. In Java, use the jUnit test framework.</para>
            </listitem>

            <listitem>
              <para><emphasis role="bold">Test Results</emphasis></para>

              <para>This section contains a compilation of all current
              successful test case results and analyses necessary to
              demonstrate that the unit has been tested as described in the
              test plan. Test output should be identified by test case numbers
              and results should be annotated to facilitate reviews of this
              results by other qualified individuals.</para>
            </listitem>

            <listitem>
              <para><emphasis role="bold">Build Procedures</emphasis></para>

              <para>This section will include a list of all the names of all
              the appropriate files (e.g., source and object) as well as their
              locations for system development, modification, and maintenance.
              This section will also include the detailed steps sufficient to
              supply an operator with the procedures necessary to produce the
              executable software.</para>
            </listitem>

            <listitem>
              <para><emphasis role="bold">Problems Reports</emphasis></para>

              <para>This section contains status logs and copies of all Design
              Problems Reports, Design Analysis Reports and Discrepancy
              Reports (as required) which document all design and code
              problems and changes experienced by the unit. This ensures a
              clear and documented traceability for all problems and changes
              incurred.</para>
            </listitem>

            <listitem>
              <para><emphasis role="bold">Notes</emphasis></para>

              <para>This section may be composed of any item pertaining to the
              unit that the UDF Custodian wishes to include.</para>
            </listitem>

            <listitem>
              <para><emphasis role="bold">Audits/Reviews</emphasis></para>

              <para>This section will contain copies of all audit/reviews
              reports applicable to the UDF. This includes PDL and Code
              walkthroughs and UDF audits. Include all notes pertaining to
              those audits and reviews.</para>
            </listitem>
          </itemizedlist>
        </listitem>
      </itemizedlist>

      <itemizedlist>
        <listitem>
          <para><emphasis role="bold">UDF Maintenance</emphasis></para>

          <para>After code development and initial baselining, the design
          responsibility is unchanged. All changes made to the UDF will be as
          described in section 2, UDF Organization and Contents, of this
          guide.</para>
        </listitem>
      </itemizedlist>

      <itemizedlist>
        <listitem>
          <para><emphasis role="bold">Summary</emphasis></para>

          <para>The UDF concept has evolved into a pratical, efective and
          valuable tool not only for the management of software development
          but also for imposing a structured approach on the total software
          development process. The structure and content of the UDF are
          designed to create a set of milestones at the unit leval, each of
          which can be easily observed and reviewed.</para>

          <para>PROGRAM NAME:
          __________________________________________________</para>

          <para>UNIT NAME:______________________________
          CUSTODIAN:______________</para>

          <para>ROUTINES
          INCLUDED:______________________________________________</para>

          <table>
            <title>UDF Cover Page</title>

            <tgroup cols="6">
              <tbody>
                <row>
                  <entry><emphasis role="bold">Section No.</emphasis></entry>

                  <entry><emphasis role="bold">Description</emphasis></entry>

                  <entry><emphasis role="bold">Due Date</emphasis></entry>

                  <entry><emphasis role="bold">Date
                  Completed</emphasis></entry>

                  <entry><emphasis role="bold">Originator</emphasis></entry>

                  <entry><emphasis
                  role="bold">Reviewer/Date</emphasis></entry>
                </row>

                <row>
                  <entry>1</entry>

                  <entry>Requirements</entry>

                  <entry>.</entry>

                  <entry>.</entry>

                  <entry>.</entry>

                  <entry>.</entry>
                </row>

                <row>
                  <entry>2</entry>

                  <entry>External Interfaces</entry>

                  <entry>.</entry>

                  <entry>.</entry>

                  <entry>.</entry>

                  <entry>.</entry>
                </row>

                <row>
                  <entry>3</entry>

                  <entry>Design Description</entry>

                  <entry>.</entry>

                  <entry>.</entry>

                  <entry>.</entry>

                  <entry>.</entry>
                </row>

                <row>
                  <entry>4</entry>

                  <entry>Unit Code</entry>

                  <entry>.</entry>

                  <entry>.</entry>

                  <entry>.</entry>

                  <entry>.</entry>
                </row>

                <row>
                  <entry>5</entry>

                  <entry>Unit Test Plan</entry>

                  <entry>.</entry>

                  <entry>.</entry>

                  <entry>.</entry>

                  <entry>.</entry>
                </row>

                <row>
                  <entry>6</entry>

                  <entry>Test Results</entry>

                  <entry>.</entry>

                  <entry>.</entry>

                  <entry>.</entry>

                  <entry>.</entry>
                </row>

                <row>
                  <entry>7</entry>

                  <entry>Build Procedures</entry>

                  <entry>.</entry>

                  <entry>.</entry>

                  <entry>.</entry>

                  <entry>.</entry>
                </row>

                <row>
                  <entry>8</entry>

                  <entry>Problems Reports</entry>

                  <entry></entry>

                  <entry></entry>

                  <entry></entry>

                  <entry>.</entry>
                </row>

                <row>
                  <entry>9</entry>

                  <entry>Notes</entry>

                  <entry></entry>

                  <entry></entry>

                  <entry></entry>

                  <entry></entry>
                </row>

                <row>
                  <entry>10</entry>

                  <entry>Reviewers</entry>

                  <entry></entry>

                  <entry></entry>

                  <entry></entry>

                  <entry></entry>
                </row>
              </tbody>
            </tgroup>
          </table>
        </listitem>
      </itemizedlist>
    </section>
  </chapter>

  <chapter id="exercises">
    <title>Exercises</title>

    <section id="exercises_exercises_1">
      <title>Basic Exercises 1</title>

      <para><orderedlist>
          <listitem>
            <para>Um âsigned data typeâ possui um nÃºmero de valores
            disponÃ­veis ânÃ£o-zeroâ positivos e negativos
            diferentes.<orderedlist continuation="restarts"
                inheritnum="inherit">
                <listitem>
                  <para>Verdadeiro</para>
                </listitem>

                <listitem>
                  <para>Falso</para>
                </listitem>
              </orderedlist></para>
          </listitem>

          <listitem>
            <para>Escolha o identificador vÃ¡lido:<orderedlist
                continuation="restarts" inheritnum="inherit">
                <listitem>
                  <para>Big01LongStringWithMeaninglessName</para>
                </listitem>

                <listitem>
                  <para>$int</para>
                </listitem>

                <listitem>
                  <para>bytes</para>
                </listitem>

                <listitem>
                  <para>$1</para>
                </listitem>

                <listitem>
                  <para>finalist</para>
                </listitem>
              </orderedlist></para>
          </listitem>

          <listitem>
            <para>Quais das seguintes representaÃ§Ãµes sÃ£o vÃ¡lidas para a
            entrada do mÃ©todo main() de uma aplicaÃ§Ã£o?<orderedlist
                continuation="restarts" inheritnum="inherit">
                <listitem>
                  <para>public static void main()</para>
                </listitem>

                <listitem>
                  <para>public static void main(String arg[])</para>
                </listitem>

                <listitem>
                  <para>public void main(String [] arg)</para>
                </listitem>

                <listitem>
                  <para>public static void main(String[] args)</para>
                </listitem>

                <listitem>
                  <para>public static int main(String [] arg)</para>
                </listitem>
              </orderedlist></para>
          </listitem>

          <listitem>
            <para>Se todos os trÃªs elementos (import, declaraÃ§Ã£o de package
            and classes) ocorrerem em um arquivo fonte, eles devem aparecer em
            que ordem?<orderedlist continuation="restarts"
                inheritnum="inherit">
                <listitem>
                  <para>Imports, declaraÃ§Ã£o de package, classes</para>
                </listitem>

                <listitem>
                  <para>Classes, imports, declaraÃ§Ã£o de package</para>
                </listitem>

                <listitem>
                  <para>DeclaraÃ§Ã£o de Package deve aparecer primeiro; a ordem
                  para imports e definiÃ§Ã£o de class nÃ£o Ã© significativa</para>
                </listitem>

                <listitem>
                  <para>DeclaraÃ§Ã£o de package, imports, classes.</para>
                </listitem>

                <listitem>
                  <para>Imports devem aparecer antes; a ordem para declaraÃ§Ã£o
                  de package e definiÃ§Ã£o de class nÃ£o Ã© significante</para>
                </listitem>
              </orderedlist></para>
          </listitem>

          <listitem>
            <para>Considere a seguinte linha de cÃ³digo:</para>

            <programlisting>     int  x[] = new int [25];</programlisting>

            <para>ApÃ³s a execuÃ§Ã£o, qual(is) afirmaÃ§Ã£o(Ãµes) Ã©(sÃ£o)
            verdadeiras?<orderedlist continuation="restarts"
                inheritnum="inherit">
                <listitem>
                  <para>x[24] Ã© 0</para>
                </listitem>

                <listitem>
                  <para>x[24] Ã© indefinido</para>
                </listitem>

                <listitem>
                  <para>x[25] Ã© 0</para>
                </listitem>

                <listitem>
                  <para>x[0] Ã© nulo</para>
                </listitem>

                <listitem>
                  <para>x.length Ã© 25</para>
                </listitem>
              </orderedlist></para>
          </listitem>

          <listitem>
            <para>Considere a seguinte aplicaÃ§Ã£o:</para>

            <programlisting>1.    class Q6  {
2.        public static void main(String args[])  { 
3.            Holder h = new Holder(); 
4.            h.held = 100; 
5.            h.bump(h);
6.            System.out.println(h.held); 
7.        } 
8.    }
9.        
10.   class Holder { 
11.       public int held;
12.       public void bump(Holder theHolder) { theHolder.held++; } 
13.   }</programlisting>

            <para>Qual valor Ã© impresso na linha 6?<orderedlist
                continuation="restarts" inheritnum="inherit">
                <listitem>
                  <para>0</para>
                </listitem>

                <listitem>
                  <para>1</para>
                </listitem>

                <listitem>
                  <para>100</para>
                </listitem>

                <listitem>
                  <para>101</para>
                </listitem>
              </orderedlist></para>
          </listitem>

          <listitem>
            <para>Considere a seguinte aplicaÃ§Ã£o:</para>

            <programlisting>1.    class Q7  { 
2.        public static void main(String args[ ]) { 
3.            double d = 12.3; 
4.            Decrementer dec = new Decrementer(); 
5.            dec.decrement(d); 
6.            System.out.println(d); 
7.        } 
8.    } 
9.        
10.   class Decrementer { 
11.       public void decrement(double decMe)  { decMe = decMe â 1.0; } 
12.   } </programlisting>

            <para>Qual valor Ã© impresso na linha 6?<orderedlist
                continuation="restarts" inheritnum="inherit">
                <listitem>
                  <para>0.0</para>
                </listitem>

                <listitem>
                  <para>-1.0</para>
                </listitem>

                <listitem>
                  <para>12.3</para>
                </listitem>

                <listitem>
                  <para>11.3</para>
                </listitem>
              </orderedlist></para>
          </listitem>

          <listitem>
            <para>Como se forÃ§a a âgarbage collectionâ de um
            objeto?<orderedlist continuation="restarts" inheritnum="inherit">
                <listitem>
                  <para>Garbage collection nÃ£o pode ser forced</para>
                </listitem>

                <listitem>
                  <para>Call System.gc()</para>
                </listitem>

                <listitem>
                  <para>Call System.gc(), passando na referÃªncia para o objeto
                  a ser âgarbage-collectedâ</para>
                </listitem>

                <listitem>
                  <para>Call Runtime.gc()</para>
                </listitem>

                <listitem>
                  <para>Setar todas referencias para o objeto para novos
                  valores (Ex: null)</para>
                </listitem>
              </orderedlist></para>
          </listitem>

          <listitem>
            <para>Qual a faixa de valores que pode ser designada para uma
            variÃ¡vel do tipo short?<orderedlist continuation="restarts"
                inheritnum="inherit">
                <listitem>
                  <para>depende do hardware</para>
                </listitem>

                <listitem>
                  <para>0 a 216 - 1</para>
                </listitem>

                <listitem>
                  <para>0 a 232 - 1</para>
                </listitem>

                <listitem>
                  <para>-215 a 215 â 1</para>
                </listitem>

                <listitem>
                  <para>-231 a 231 â 1</para>
                </listitem>
              </orderedlist></para>
          </listitem>

          <listitem>
            <para>Qual Ã© a faixa de valores que pode ser designada para uma
            variÃ¡vel do tipo byte?<orderedlist continuation="restarts"
                inheritnum="inherit">
                <listitem>
                  <para>depende do hardware</para>
                </listitem>

                <listitem>
                  <para>0 a 28 - 1</para>
                </listitem>

                <listitem>
                  <para>0 a 216 - 1</para>
                </listitem>

                <listitem>
                  <para>â27 a 27 â 1</para>
                </listitem>

                <listitem>
                  <para>â215 a 215 â 1</para>
                </listitem>
              </orderedlist></para>
          </listitem>
        </orderedlist></para>
    </section>

    <section id="exercises_exercises_2">
      <title>Basic Exercises 2</title>

      <para><orderedlist>
          <listitem>
            <para>Depois da execuÃ§Ã£o do fragmento de cÃ³digo abaixo, quais sÃ£o
            os valores das variaveis 'x', 'a', e 'b'?</para>

            <programlisting>int x, a = 6, b =7;
x = a++ + b++;</programlisting>

            <para><orderedlist continuation="restarts" inheritnum="inherit">
                <listitem>
                  <para>x = 15, a = 7, b = 8;</para>
                </listitem>

                <listitem>
                  <para>x = 15; a = 6, b = 7;</para>
                </listitem>

                <listitem>
                  <para>x = 13; a = 7; b = 8;</para>
                </listitem>

                <listitem>
                  <para>x = 13, a = 6; b = 7;</para>
                </listitem>
              </orderedlist></para>
          </listitem>

          <listitem>
            <para>Quais das seguintes ExpressÃµes sÃ£o legais? (escolha uma ou
            mais)</para>

            <para><orderedlist continuation="restarts" inheritnum="inherit">
                <listitem>
                  <para>int x = 6; x = !x;</para>
                </listitem>

                <listitem>
                  <para>int x = 6; if (!(x &gt; 3)) {}</para>
                </listitem>

                <listitem>
                  <para>int x = 6; x = ~x;</para>
                </listitem>
              </orderedlist></para>
          </listitem>

          <listitem>
            <para>Quais das seguintes expressÃµes resultam um valor positivo em
            x? (escolha uma)</para>

            <para><orderedlist continuation="restarts" inheritnum="inherit">
                <listitem>
                  <para>int x = -1; x = x &gt;&gt;&gt; 5;</para>
                </listitem>

                <listitem>
                  <para>int x = -1; x = x &gt;&gt;&gt; 32;</para>
                </listitem>

                <listitem>
                  <para>byte x = -1; x = x &gt;&gt;&gt; 5;</para>
                </listitem>

                <listitem>
                  <para>int x = -1; x = x &gt;&gt; 5;</para>
                </listitem>
              </orderedlist></para>
          </listitem>

          <listitem>
            <para>Quais das seguintes expressÃµes sÃ£o legais?</para>

            <para><orderedlist continuation="restarts" inheritnum="inherit">
                <listitem>
                  <para>String x = âHello"; int y = 9; x += y;</para>
                </listitem>

                <listitem>
                  <para>String x = âHello"; int y = 9; if (x == y) {}</para>
                </listitem>

                <listitem>
                  <para>String x = âHello"; int y = 9; x = x + y;</para>
                </listitem>

                <listitem>
                  <para>String x = âHello"; int y = 9; y = y + x;</para>
                </listitem>

                <listitem>
                  <para>String x = null; int y = (x != null) &amp;&amp;
                  (x.length() &gt; 0) ? x.length() : 0;</para>
                </listitem>
              </orderedlist></para>
          </listitem>

          <listitem>
            <para>Quais dos seguintes fragmentos de cÃ³digo serÃ¡ compilado com
            sucesso e imprimirÃ¡ na execuÃ§Ã£o a palavra âEqual"? (escolha uma ou
            mais)</para>

            <para><orderedlist continuation="restarts" inheritnum="inherit">
                <listitem>
                  <para>int x = 100; float y = 100.OF; if (x == y)
                  {System.out.println(âEqual");}</para>
                </listitem>

                <listitem>
                  <para>int x = 100; Integer y = new Integer(100); if (x == y)
                  {System.out.println(âEqual");}</para>
                </listitem>

                <listitem>
                  <para>Integer x = new Integer(100); Integer y = new
                  Integer(100); if (x == y)
                  {System.out.println(âEqual");}</para>
                </listitem>

                <listitem>
                  <para>String x = new String(â100");String y = new
                  String(â100"); if (x == y) {
                  System.out.println(âEqual");}</para>
                </listitem>

                <listitem>
                  <para>String x = â100"; String y = â100"; if (x == y)
                  {System.out.println(âEqual");}</para>
                </listitem>
              </orderedlist></para>
          </listitem>

          <listitem>
            <para>Quais os resultados da execuÃ§Ã£o do seguinte cÃ³digo?</para>

            <programlisting>1.      public class short { 
2.          public static void main(String args[]) { 
3.              StringBuffer s = new StringBuffer(âHello"); 
4.              if ((s.length() &gt; 5) &amp;&amp; 
5.                  (s.append(â thereâ¿).equals(âFalse"))) 
6.                  ;  // do nothing 
7.              System.out.println(âvalue is â + s); 
8.          }
9.      }</programlisting>

            <para><orderedlist continuation="restarts" inheritnum="inherit">
                <listitem>
                  <para>A saÃ­da Ã©: Hello</para>
                </listitem>

                <listitem>
                  <para>A saÃ­da Ã©: Hello there</para>
                </listitem>

                <listitem>
                  <para>Erro de compilaÃ§Ã£o na linha 4 ou 5</para>
                </listitem>

                <listitem>
                  <para>Nenhuma saÃ­da</para>
                </listitem>

                <listitem>
                  <para>Ocorre uma NullPointerException</para>
                </listitem>
              </orderedlist></para>
          </listitem>

          <listitem>
            <para>Qual resultado da execuÃ§Ã£o do seguinte cÃ³digo?</para>

            <programlisting>1.      public class Xor{ 
2.          public static void main(String args[])  { 
3.              byte b = 10;  // 0001010 binary 
4.              byte c = 15;  // 00001111 binary 
5.              b = (byte)(b ^c); 
6.              System.out.println(âb contains â + b); 
7.          }
8.      }</programlisting>

            <para><orderedlist continuation="restarts" inheritnum="inherit">
                <listitem>
                  <para>SaÃ­da: b contains 10;</para>
                </listitem>

                <listitem>
                  <para>SaÃ­da: b contains 5;</para>
                </listitem>

                <listitem>
                  <para>SaÃ­da: b contains 250;</para>
                </listitem>

                <listitem>
                  <para>SaÃ­da: b contains 245;</para>
                </listitem>
              </orderedlist></para>
          </listitem>

          <listitem>
            <para>Qual o resultado da tentativa de compilar e executar o
            seguinte cÃ³digo?</para>

            <programlisting>1.      public class Ternary  { 
2.          public static void main(String args[]) { 
3.              int x = 4; 
4.              System.out.println(âvalue is â + 
5.                  ((x &gt; 4) ? 99.99 : 9)); 
6.          } 
7.      } </programlisting>

            <para><orderedlist continuation="restarts" inheritnum="inherit">
                <listitem>
                  <para>SaÃ­da: value is 99.99</para>
                </listitem>

                <listitem>
                  <para>SaÃ­da: value is 9</para>
                </listitem>

                <listitem>
                  <para>SaÃ­da: value is 9.0</para>
                </listitem>

                <listitem>
                  <para>Erro de compilaÃ§Ã£o na linha 5</para>
                </listitem>
              </orderedlist></para>
          </listitem>

          <listitem>
            <para>Qual Ã© a saÃ­da deste fragmento de cÃ³digo?</para>

            <programlisting>1.      int x = 3; int y = 10; 
2.      System.out.println(y % x);
</programlisting>

            <para><orderedlist continuation="restarts" inheritnum="inherit">
                <listitem>
                  <para>0</para>
                </listitem>

                <listitem>
                  <para>1</para>
                </listitem>

                <listitem>
                  <para>2</para>
                </listitem>

                <listitem>
                  <para>3</para>
                </listitem>
              </orderedlist></para>
          </listitem>
        </orderedlist></para>
    </section>

    <section id="exercises_exercises_3">
      <title>Basic Exercises 3</title>

      <orderedlist>
        <listitem>
          <para>Quais das seguintes declaraÃ§Ãµes sÃ£o ilegais? (escolha uma ou
          mais)<orderedlist inheritnum="inherit">
              <listitem>
                <para>friendly String s;</para>
              </listitem>

              <listitem>
                <para>transient int i = 41;</para>
              </listitem>

              <listitem>
                <para>public final static native int w();</para>
              </listitem>

              <listitem>
                <para>abstract double d;</para>
              </listitem>

              <listitem>
                <para>abstract final double hyperbolicCosine();</para>
              </listitem>
            </orderedlist></para>
        </listitem>

        <listitem>
          <para>Qual das seguintes declaraÃ§Ãµes Ã© correta?<orderedlist
              inheritnum="inherit">
              <listitem>
                <para>Uma abstract class nÃ£o pode ter nenhum mÃ©todo
                final</para>
              </listitem>

              <listitem>
                <para>Uma final classe nÃ£o pode ter nenhum mÃ©todo
                abstrato</para>
              </listitem>
            </orderedlist></para>
        </listitem>

        <listitem>
          <para>Qual Ã© a âmÃ­nimaâ modificaÃ§Ã£o que deverÃ¡ ser feita no cÃ³digo
          abaixo para que ele compile corretamente?</para>

          <programlisting>1.      final class Aaa
2.      { 
3.         int xxx 
4.        void yyy() {xxx = 1;} 
5.      } 
6. 
7. 
8.      class Bbb extends Aaa 
9.      { 
10.     final Aaa finalref = new Aaa() 
11.      
12.     final void yyy() 
13.     { 
14.        System.out.println(âIn method yyy()"); 
15.        finalref.xxx = 12345; 
16.     } 
17.  }</programlisting>

          <orderedlist inheritnum="inherit">
            <listitem>
              <para>Na linha 1, remover o modificador âfinalâ</para>
            </listitem>

            <listitem>
              <para>Na linha 10, remover o modificador âfinalâ</para>
            </listitem>

            <listitem>
              <para>Remover linha 15</para>
            </listitem>

            <listitem>
              <para>Nas linhas 1 e 10, remover o modificador âfinalâ</para>
            </listitem>

            <listitem>
              <para>O cÃ³digo serÃ¡ compilado como Ã©, e nenhuma modificaÃ§Ã£o Ã©
              necessÃ¡ria</para>
            </listitem>
          </orderedlist>
        </listitem>

        <listitem>
          <para>Qual das seguintes statements sÃ£o verdadeiras?</para>

          <orderedlist inheritnum="inherit">
            <listitem>
              <para>MÃ©todos transient nÃ£o podem ser overridden</para>
            </listitem>

            <listitem>
              <para>MÃ©todos transient devem ser overridden</para>
            </listitem>

            <listitem>
              <para>Classes transient nÃ£o podem ser serialized</para>
            </listitem>

            <listitem>
              <para>VariÃ¡veis transient devem ser estatic</para>
            </listitem>

            <listitem>
              <para>VariÃ¡veis transients nÃ£o sÃ£o serialized</para>
            </listitem>
          </orderedlist>
        </listitem>

        <listitem>
          <para>Qual statements Ã© verdadeiro sobre a aplicaÃ§Ã£o abaixo?</para>

          <programlisting>1.      class StaticStuff
2.      { 
3.         static int x = 10; 
4.        
5.      static { x += 5;} 
6.        
7.          public static void main(string args[]) 
8.         { 
9.             System.out.println(âx = â + x); 
10.      } 
11.    
12.      static {x /= 5; } 
13.  }</programlisting>

          <orderedlist inheritnum="inherit">
            <listitem>
              <para>As linhas 5 e 12 nao compilarÃ£o, porque o nome do mÃ©todo e
              o type de retorno estÃ£o errados</para>
            </listitem>

            <listitem>
              <para>A linha 12 nÃ£o compilarÃ¡, porque pode haver somente um
              inicializador static</para>
            </listitem>

            <listitem>
              <para>O cÃ³digo compilarÃ¡, e a execuÃ§Ã£o produzirÃ¡ a saÃ­da x =
              10;</para>
            </listitem>

            <listitem>
              <para>O cÃ³digo compilarÃ¡, e a execuÃ§Ã£o produzirÃ¡ a saÃ­da x =
              15;</para>
            </listitem>

            <listitem>
              <para>O cÃ³digo compilarÃ¡, e a execuÃ§Ã£o produzirÃ¡ a saÃ­da x =
              3;</para>
            </listitem>
          </orderedlist>
        </listitem>

        <listitem>
          <para>Qual afirmaÃ§Ã£o Ã© verdadeira para o cÃ³digo abaixo?</para>

          <programlisting>1.      class HasStatic; 
2.      { 
3.          private static int x = 100; 
4.        
5.          public static void main(String args[]) 
6.          { 
7.               HasStatic hs1 = new HasStatic(); 
8.               hs1.x++; 
9.               HasStatic hs2 = new HasStatic(); 
10.           hs2.x++; 
11.           hs1 = new HasStatic(); 
12.           hs1.x++; 
13.           HasStatic.x++; 
14.           System.out.println(âx = â + x); 
15.        } 
16.   }</programlisting>

          <orderedlist inheritnum="inherit">
            <listitem>
              <para>A linha 8 nÃ£o compilarÃ¡, porque ela Ã© uma referencia
              static a uma variÃ¡vel private.</para>
            </listitem>

            <listitem>
              <para>A linha 13 nao compilarÃ¡, porque ele Ã© uma referencia
              static para uma variÃ¡vel private</para>
            </listitem>

            <listitem>
              <para>O programa compilarÃ¡, e a saÃ­da serÃ¡: x = 102;</para>
            </listitem>

            <listitem>
              <para>O programa compilarÃ¡, e a saÃ­da serÃ¡: x = 103</para>
            </listitem>

            <listitem>
              <para>O programa compilarÃ¡, e a saÃ­da serÃ¡: x = 104</para>
            </listitem>
          </orderedlist>
        </listitem>

        <listitem>
          <para>Dado o cÃ³digo abaixo, e nÃ£o fazendo outra mudanÃ§a, qual
          modificador de acesso ( public, protected, private) pode ser
          colocado antes de aMethod() na linha 3? Se a linha 3 for deixada
          como ela Ã©, qual keyword pode ser colocada antes de âaMethodâ na
          linha 8?</para>

          <programlisting>1.      class SuperDuper 
2.      { 
3.            void aMethod() { } 
4.       } 
5.        
6.      class Sub extends SuperDuper 
7.      { 
8.          void aMethod() { } 
9.      }</programlisting>

          <bridgehead>As proximas relacionam-se Ã  seguinte definiÃ§Ã£o de
          class.</bridgehead>

          <programlisting>1.      package abcde; 
2.        
3.      public class Bird   { 
4.         protected static int referenceCount = 0; 
5.         public Bird() { referenceCount++; } 
6.         protected void fly() { /* Flap wings, etc.*/ } 
7.         static int getRefCount() { return referenceCount; } 
8.      }</programlisting>
        </listitem>

        <listitem>
          <para>Qual afirmaÃ§Ã£o Ã© verdadeira sobre a class Bird acima e a class
          Parrot abaixo?</para>

          <programlisting>1.      package abcde; 
2.        
3.      class Parrot extends abcde.Bird { 
4.         public void fly() { /* Parrot specific flight code. */} 
5.         public int getRefcount() { return referenceCount; } 
6.      }</programlisting>

          <orderedlist inheritnum="inherit">
            <listitem>
              <para>CompilaÃ§Ã£o de Parrot.java falha na linha 4, porque o
              method fly() Ã© protected na superclasse e classes Bird e Parrot
              estÃ£o no mesmo pakage.</para>
            </listitem>

            <listitem>
              <para>CompilaÃ§Ã£o de Parrot.Java falha na linha 4, porque o
              mÃ©todo fly() Ã© protected na superclasse e public na suclasse e o
              mÃ©todo nÃ£o pode ser âoverhiddenâ para ser public.â</para>
            </listitem>

            <listitem>
              <para>CompilaÃ§Ã£o de Parrot falharÃ¡ na linha 5, porque o mÃ©todo
              getRefCount() Ã© static na superclasse e metidos static nÃ£o podem
              ser âoverhiddenâpara ser nÃ£o-static.</para>
            </listitem>

            <listitem>
              <para>O programa compilarÃ¡ e executarÃ¡, mas surge uma runtime
              exceptions se o mÃ©todo fly() Ã© sempre chamado na instancia da
              class Parrot.</para>
            </listitem>

            <listitem>
              <para>CompilaÃ§Ã£o de Parrot.Java tem sucesso, mas surge uma
              runtime exceptions se o mÃ©todo getRefCount() Ã© sempre chamado na
              instÃ¢ncia da class Parrot.</para>
            </listitem>
          </orderedlist>
        </listitem>

        <listitem>
          <para>Qual afirmaÃ§Ã£o Ã© verdadeira sobre a class Bird acima e sobre a
          class Nightingale abaixo:</para>

          <programlisting>1.      pachage singers; 
2.        
3.      class Nightingale extends abcde.Bird { 
4.         Nightingale() { referenceCount++; } 
5.        
6.         public static void main(String args[]) { 
7.             System.out.print(âBefore: â + referenceCount); 
8.             Nightingale florence = new Nightingale(); 
9.             System.out.println(â   After: â + referenceCount); 
10.         florence.fly(); 
11.     } 
12.  }</programlisting>

          <orderedlist inheritnum="inherit">
            <listitem>
              <para>O programa compilarÃ¡ e executarÃ¡. A saÃ­da serÃ¡: Before: 0
              After: 2.</para>
            </listitem>

            <listitem>
              <para>O programa compilarÃ¡ e executarÃ¡. A saÃ­da serÃ¡: Before: 0
              After: 1</para>
            </listitem>

            <listitem>
              <para>CompilaÃ§Ã£o de Nightingale falharÃ¡ na linha 4, porque
              membros static nÃ£o podem ser âoverhiddenâ</para>
            </listitem>

            <listitem>
              <para>CompilaÃ§Ã£o de Nightingale falharÃ¡ na linha 10, porque o
              mÃ©todo fly() Ã© protegido na superclasse</para>
            </listitem>

            <listitem>
              <para>CompilaÃ§Ã£o de Nightingale terÃ¡ sucesso, mas surge uma
              exception na linha 10, porque o mÃ©todo fly() Ã© protected na
              superclasse</para>
            </listitem>
          </orderedlist>
        </listitem>
      </orderedlist>
    </section>

    <section id="exercises_getting_started">
      <title>Getting Started with Java</title>

      <para>Readings for the whole problem set are Chapters 1 through 5 of the
      Java Tutorial, 3rd Edition. Readings for the individual problems are
      listed with each problem.</para>

      <para>If you make any assumptions in solving any problem in the
      exercise, please ensure that they are clearly stated in your solutions.
      Assumptions must be coherent and reasonable.</para>

      <section>
        <title>Problem 1: Language Basics</title>

        <para>Readings: Language Basics: Variables, Operators, Expressions,
        Statements, and Blocks</para>

        <para>Look at the code below which calculates the radius of a circle
        in feet and inches, given that the circle has a given area. <ulink
        url="http://ocw.mit.edu/6/6.170/f01/related-resources/java-source-code/MathCalc.java">Download
        source</ulink>.</para>

        <programlisting>    public class MathCalc {
        public static void main(String[] args) {
            double radius = 0.0;
            double circleArea = 100.0;
            int feet = 0;
            int inches = 0;
            radius = Math.sqrt(circleArea/Math.PI);
            feet = (int)Math.floor(radius);
            inches = (int)Math.round(12.0*(radius - feet));
            System.out.println("The radius of a circle with area" + circleArea 
                       + " square feet is\n " + feet + " feet " + inches + " inches");
        }
    }</programlisting>

        <para>The diameter of the Sun is approximately 865,000 miles. The
        diameter of the Earth is approximately 7600 miles. Use the methods in
        the class Math to calculate,</para>

        <para>(a) the volume of the Earth in cubic miles</para>

        <para>(b) the volume of the Sun in cubic miles</para>

        <para>(c) the ratio of the volume of the Sun to the volume of the
        Earth</para>

        <para>and then output the three values. Treat both the earth and sun
        as spheres. The volume of a sphere is given by the formula 4 pi r^3/3
        where r is the radius.</para>

        <para>Run the code you have written, and turn in both your code and
        the output of the program. The output should say something like: The
        volume of the Earth is X cubic miles, the volume of the sun is Y cubic
        miles, and the ratio of the volume of the Sun to the volume of the
        Earth is Z.</para>
      </section>

      <section>
        <title>Problem 2: Language Basics</title>

        <para>Readings: Language Basics : Control Flow Statements</para>

        <programlisting>    public class Primes {
        public static void main(String[] args) {
            int nValues = 50;
            boolean isPrime = true;
            for(int i = 2; i &lt;= nValues; i++) {
                isPrime = true;
                for (int j = 2; j &lt; i; j++) {
                    if (i % j == 0) {
                        isPrime = false;
                        break;
                    }
                }
                if (isPrime)
                    System.out.println(i);
            }
        }
    }</programlisting>

        <para>Create a new program that has the following features. <ulink
        url="http://ocw.mit.edu/6/6.170/f01/related-resources/java-source-code/Primes.java">Download
        source</ulink>.</para>

        <para>(a) Uses labeled continue instead of break.</para>

        <para>(b) Does not require the isPrime variable.</para>

        <para>(c) When testing whether an integer is prime, it is sufficient
        to try and divide by integers up to the square root of the number
        being tested.</para>

        <para>Turn in your rewritten code.</para>
      </section>

      <section>
        <title>Problem 3: Object Basics</title>

        <para>Readings: Object Basics and Simple Data Objects, The Life Cycle
        of an Object, Characters and Strings</para>

        <para>In the following code the soliloquy is analyzed character by
        character to determine the vowels, spaces and letters used. Fill in
        the code that computes the number of spaces, vowels, and consonants.
        <ulink
        url="http://ocw.mit.edu/6/6.170/f01/related-resources/java-source-code/StringCharacters.java">Download
        source</ulink>.</para>

        <programlisting>    public class StringCharacters {
        public static void main(String[] args) {
            String text = "To be or not to be, that is the question;"
                +"Whether `tis nobler in the mind to suffer"
                +" the slings and arrows of outrageous fortune,"
                +" or to take arms against a sea of troubles,"
                +" and by opposing end them?";
            int spaces = 0, 
            vowels = 0,
            letters = 0;
            //YOUR CODE HERE
            System.out.println("The text contained vowels: " + vowels + "\n" +
                consonants " + (letters - vowels) + "\n"+ spaces: " + spaces);
        }
    }</programlisting>

        <para>Run the program once you have written your code. Turn in your
        code, and the output produced when the code runs.</para>
      </section>

      <section>
        <title>Problem 4: Object Basics</title>

        <para>Readings: Object Basics and Simple Data Objects, Numbers
        Arrays</para>

        <para>Write a program that sets up a String variable with the
        soliloquy in the previous question, extracts the words from the text
        and sorts them into alphabetical order. You may define 'words' however
        you wish (within reason), but provide your definition with your
        solution. You can use the sorting method of your choice. The simplest
        one is the bubble sort, which works as follows:</para>

        <itemizedlist>
          <listitem>
            <para>Starting with the first element in the array compare
            successive elements (0 and 1, 1 and 2, 2 and 3, and so on).</para>
          </listitem>

          <listitem>
            <para>If the first element of any pair is greater than the second,
            interchange the two elements.</para>
          </listitem>

          <listitem>
            <para>Repeat the process for the whole array until no interchanges
            are necessary. The array elements will now be in ascending
            order.</para>
          </listitem>

          <listitem>
            <para>Run the program once you have written your code. Turn in
            your code, and the output produced when the code runs.</para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title>Problem 5: Classes and Inheritance</title>

        <para>Readings: Classes and Inheritance : Creating Classes</para>

        <para>We define a basic class for point objects: <ulink
        url="http://ocw.mit.edu/6/6.170/f01/related-resources/java-source-code/Point.java">Download
        source</ulink>.</para>

        <programlisting>    class Point {
        double x;
        double y;
        
        // Create a point from coordinates
        Point(double xVal, double yVal) {
            x = xVal;
            y = yVal;
        }
    }</programlisting>

        <para>Use the Point objects to define a class Line. Include a
        constructor to create a line from two points, a method to calculate
        the length of a line, and a method to convert a line to a string to
        print it out in readable form.</para>

        <para>Finally, write a method intersects, called from a Line object,
        which returns a point as the intersection of two lines. (View resource
        for intersection point of two lines.)</para>

        <para>Turn in the code that you have written. Make sure the code
        compiles.</para>
      </section>

      <section>
        <title>Problem 6: Classes and Inheritance</title>

        <para>Readings: Classes and Inheritance : Managing Inheritance</para>

        <para>Suppose we have defined a class to represent an animal as
        follows: <ulink
        url="http://ocw.mit.edu/6/6.170/f01/related-resources/java-source-code/Animal.java">Download
        source</ulink>.</para>

        <programlisting>   public class Animal {
        public Animal(String aType) {
            type = new String(aType);
        } 
        public String toString() {
            return "This is a " + type;
        } 
        private String type;
    }</programlisting>

        <para>Now define another class, based on the class Animal, to define
        dogs. Include private strings for the name and breed of a dog.</para>

        <para>Define two constructors for the subclass Dog, one that just
        accepts an argument for the name of a dog, and other accepts both a
        name and breed of the Dog object. Make sure that the private base
        class member, type, is properly initialized.</para>

        <para>Turn in the code you have written</para>
      </section>

      <section>
        <title>Q &amp; A</title>

        <para>This section will list clarifications and answers to common
        questions about problem sets. We'll try to keep it as up-to-date as
        possible, so this should be the first place to look (after carefully
        rereading the problem set handout and the specifications) when you
        have a problem.</para>

        <para><emphasis role="bold">Q</emphasis>: Problem 2, Anonymous Comment
        concerning the wiseness of introducing "spaghetti code" in terms of a
        labeled continue (goto). Thank you very much for bringing this up the
        staff so that we may address this issue.</para>

        <para><emphasis role="bold">A</emphasis>:</para>

        <itemizedlist>
          <listitem>
            <para>Jumps and branching statements (continue, exit, return,
            exceptions) in Java are not the same as in other languages (goto).
            See the Java Language Specification on <ulink
            url="http://java.sun.com/docs/books/jls/second_edition/html/statements.doc.html">Blocks
            and Statements</ulink>. Or, see information on <ulink
            url="http://www.oopic.com/goto.htm">Unconditional Branch</ulink>,
            which states that "Java only allows structured flow-control
            statements to be used and therefore does not support the
            Unconditional Branch."</para>
          </listitem>

          <listitem>
            <para>Continue and exit often improve the structure of the code,
            certainly much better than adding lots of flags, which makes a
            program incomprehensible and often less efficient.</para>
          </listitem>

          <listitem>
            <para>Read <ulink url="http://www.acm.org/classics/oct95/">Go To
            Statement Considered Harmful, Edsger W. Dijkstra</ulink>, and then
            the rebuttal by Donald Knuth, Structured Programming with go to
            Statements, ACM Computing Surveys, 6(4):261--301, December
            1974.</para>
          </listitem>

          <listitem>
            <para>See <ulink
            url="http://www.construx.com/stevemcc/ccgoto.htm">arguments
            against and for GOTOs</ulink>, along with some code
            examples.</para>
          </listitem>

          <listitem>
            <para>Java Developer Connection (JDC) has a tip on <ulink
            url="http://developer.java.sun.com/developer/TechTips/2000/tt0613.html">GOTO
            Statements and Java Programming</ulink>, which has code
            comparisons between C++ (using goto) and Javaâ¢ (using labeled
            blocks).</para>
          </listitem>
        </itemizedlist>

        <para><emphasis role="bold">Q</emphasis>: What Javaâ¢ coding
        conventions should we follow?</para>

        <para><emphasis role="bold">A</emphasis>: Follow the <ulink
        url="http://java.sun.com/docs/codeconv/">Code Conventions for the Java
        Programming Language</ulink>.</para>
      </section>
    </section>

    <section id="exercises_java_exercises">
      <title>Java Exercises</title>

      <para>All exercises are from the book <ulink
      url="/resources/books/tij3/TIJ3.htm">Thinking in Java</ulink>:</para>

      <para><emphasis role="bold">Chapter 7 - Polymorphism</emphasis></para>

      <para>Exercises 1 - 5.</para>

      <para><emphasis role="bold">Chapter 8 - Interfaces &amp; Inner
      Classes</emphasis></para>

      <para>Exercises 2, 4 and 5.</para>

      <para><emphasis role="bold">Chapter 9 - Error Handling with
      Exceptions</emphasis></para>

      <para>Exercises 1 - 5.</para>

      <para><emphasis role="bold">Chapter 13 - Concurrency</emphasis></para>

      <para>Exercises 1, 2 and 5.</para>

      <para><emphasis role="bold">Chapter 14 - Creating Windows &amp;
      Applets</emphasis></para>

      <para>Exercises 17 - 21.</para>

      <para><emphasis role="bold">Chapter 15 - Discovering Problems</emphasis>
      has excellent exercises about testing. If you can, do the first 5. Those
      tests can help you a lot during development of your assignment
      program.</para>
    </section>

    <section id="exercises_design_abstract_data_type">
      <title>Design an Abstract Data Type</title>

      <para>We recommend that you read the entire problem set before you begin
      work.</para>

      <para><emphasis role="bold">Introduction</emphasis></para>

      <para>In this exercise, you'll design and implement an abstract type.
      Designing an abstract type involves determining what services it should
      provide and what their behavior should be -- that is, writing a
      specification. Implementing an abstract type involves choosing a
      representation and algorithms, and embodying them in code. The focus of
      the exercise is the design, so you should expect to spend a considerable
      amount of time on it. To check that your design is feasible, you'll use
      your type to build a small program that finds T directions using a map
      of the Boston subway that we provide.</para>

      <para><emphasis role="bold">Graphs</emphasis></para>

      <para>The abstract type that you'll design is a directed labelled
      multi-graph. A graph is just a collection of nodes with edges between
      them. Every edge connects one node to one other node. There can be nodes
      without edges but no edges without nodes. A node may be connected to
      itself. There can be zero, one or more edges between a pair of nodes.
      Every edge has a label; distinct edges may have the same label.</para>

      <para>Here are some examples of applications of directed labelled
      multi-graphs.</para>

      <itemizedlist>
        <listitem>
          <para>A compiler may represent the control flow of a program as a
          graph whose nodes are points in the program, and whose edges are
          program statements. The graph would be used for analyses, such as
          propagating the values of constants, and for transformations, such
          as hoisting a statement out of a loop.</para>
        </listitem>

        <listitem>
          <para>A website design tool may represent a website as a graph whose
          nodes are documents and whose edges are links. The tool may examine
          the site for connectivity, find broken links, update all documents
          when a document is moved, and so on.</para>
        </listitem>

        <listitem>
          <para>A curriculum design tool may use a graph to show prerequisite
          relationships between courses, to find inconsistencies and determine
          feasible programs of study.</para>
        </listitem>

        <listitem>
          <para>A program for generating driving directions may use a graph to
          represent a street map, and compute a shortest path to find
          directions from one point to another.</para>
        </listitem>

        <listitem>
          <para>A Javaâ¢ compiler may use a graph to represent dependences
          between source code files, and to determine a reasonable order of
          compilation.</para>
        </listitem>
      </itemizedlist>

      <para>Your type will be used to find directions on the Boston subway, so
      in its use, the nodes will represent stations and the edges will
      represent track segments. But your design and implementation should be
      <emphasis role="bold">polymorphic</emphasis> . This means that the node
      type should be generic; it should be possible to use your graph design
      and implementation in different applications.</para>

      <para>Your graph implementation must be <emphasis
      role="bold">efficient</emphasis>. This means it should perform
      reasonably for medium sized graphs -- those consisting of thousands (but
      not millions) of nodes and edges. You should not assume that the graph
      will be <emphasis role="bold">sparse</emphasis> (that is, containing
      very few edges compared to nodes) or <emphasis
      role="bold">dense</emphasis> (that is, with most node pairs
      connected).</para>

      <para><emphasis role="bold">Ideas</emphasis></para>

      <para>To give you some sense of the kinds of issues you should be
      considering in your design, here are some questions you might want to
      consider. These don't in general have simple answers. You'll need to
      exercise careful judgment, and think carefully about how decisions you
      make interfere with each other.</para>

      <itemizedlist>
        <listitem>
          <para>will the graph be mutable or immutable? will it be possible to
          change the label of an edge?</para>
        </listitem>

        <listitem>
          <para>will the graph allow edges without labels?</para>
        </listitem>

        <listitem>
          <para>will edge labels be strings or generic objects? if objects,
          will it be OK to use a node or an edge as a label? or even a
          graph?</para>
        </listitem>

        <listitem>
          <para>will nodes be required only to satisfy the interface of
          java.lang.Object? or will you design a Javaâ¢ interface for
          nodes?</para>
        </listitem>

        <listitem>
          <para>will the graph be implemented as a single class, or will there
          be a separate Javaâ¢ interface for the Graph specification, and a
          class for the implementation?</para>
        </listitem>

        <listitem>
          <para>will edges be objects in their own right? will they be visible
          to a client of the abstract type?</para>
        </listitem>

        <listitem>
          <para>will it be possible to find the successor of a node from the
          node alone, or will the graph be needed too? can a node belong to
          multiple graphs?</para>
        </listitem>

        <listitem>
          <para>what kind of iterators will the type provide?</para>
        </listitem>

        <listitem>
          <para>should path-finding operations be included as methods of the
          graph, or should they be implemented in client code on top of the
          graph?</para>
        </listitem>

        <listitem>
          <para>will the type provide any views, like the set view returned by
          the entrySet method of java.util.Map?</para>
        </listitem>

        <listitem>
          <para>will the type implement any standard Javaâ¢ collection
          interfaces?</para>
        </listitem>

        <listitem>
          <para>will the type use any standard Javaâ¢ collections in its
          implementation?</para>
        </listitem>
      </itemizedlist>

      <section>
        <title>Problem 1: Graph Specification</title>

        <para>Design an abstract data type for a directed, labelled graph.
        Your record of your design should be included in one or more files
        distinct from the source code itself, and should include at least the
        following elements:</para>

        <orderedlist>
          <listitem>
            <para>A brief overview paragraph saying <emphasis role="bold">what
            classes or interfaces</emphasis> are visible to clients of the
            graph, and what role they play, and a <emphasis role="bold">module
            dependency diagram</emphasis> showing the relationships between
            them.</para>
          </listitem>

          <listitem>
            <para>A comment on the <emphasis role="bold">computational
            complexity</emphasis> of the graph: say which methods you expect
            to be computationally intensive, and give a bound on their
            asymptotic cost, and give a bound on the space requirements. For
            example, you may say (rather implausibly) that addNode will be the
            most costly method, that, as the graph grows, its cost should
            increase at most quadratically with the size of the graph, and
            that the memory required to represent the graph will grow
            exponentially with the number of edges.</para>
          </listitem>

          <listitem>
            <para>For each public class or interface: <emphasis role="bold">an
            overview paragraph</emphasis> explaining in abstract terms what
            objects are represented by that class or interface, and whether
            they are mutable or not; <emphasis role="bold">a
            specification</emphasis> of each method.</para>
          </listitem>

          <listitem>
            <para>A brief <emphasis role="bold">design rationale</emphasis>
            (no more than half a page long) listing, as separate points, a
            variety of alternative design features that you considered but
            rejected, with explanations of why they were rejected.</para>
          </listitem>
        </orderedlist>
      </section>

      <section>
        <title>Problem 2: Graph Implementation</title>

        <para>Implement the graph and test your implementation using
        JUnit.</para>

        <para>You should hand in:</para>

        <orderedlist>
          <listitem>
            <para>A brief overview of the <emphasis
            role="bold">representation</emphasis> you chose, along with a
            brief <emphasis role="bold">rationale</emphasis> justifying your
            in comparison to another, different (but still plausible)
            representation.</para>
          </listitem>

          <listitem>
            <para>A <emphasis role="bold">module dependency diagram</emphasis>
            showing the class and interfaces involved in your implementation,
            and their relationship to one another.</para>
          </listitem>

          <listitem>
            <para>Tastefully commented <emphasis role="bold">source
            code</emphasis>;</para>
          </listitem>

          <listitem>
            <para>Code for your <emphasis role="bold">test
            cases</emphasis>;</para>
          </listitem>

          <listitem>
            <para>A <emphasis role="bold">statement</emphasis> indicating
            whether or not your code passes all the tests. We will assume that
            your code fails if you say nothing.</para>
          </listitem>
        </orderedlist>

        <para>For this exercise, a small collection of plausible test cases
        will suffice. Here, the purpose of the testing is to make you
        comfortable with JUnit, and to help you weed out egregious errors that
        would prevent you from completing this exercise.</para>
      </section>

      <section>
        <title>Problem 3: Using the Graph</title>

        <para>Build a program that generates directions for the Boston subway
        system. It should accept two station names as input on the command
        line, and output a list of steps to be taken.</para>

        <para>A simple breadth-first search is adequate. Don't worry about
        handling the kinds of complications a real program would have to
        handle (such as selecting a Green Line train at Park Street, and
        amalgamating steps into journeys on individual lines).</para>

        <para>We have written some code that parses the file describing the
        Boston subway system. This file <filename>bostonmetro.txt</filename>
        should be an input to the program. The code in question is found in
        <filename>MetroMapParser.java</filename>. You should make
        modifications to this file, by inserting calls to your Graph ADT
        methods. Depending on how you have designed your ADT, these calls will
        be different. For example, if you have built an immutable Graph, you
        might have to collect all the information from the file before you
        build your Graph. However, if you have built a mutable Graph, you
        might be able to build it up incrementally as the file is parsed. In
        any case, you should read through the parser code carefully, and
        provide clear documentation on the modifications you are
        making.</para>

        <para>You should hand in:</para>

        <orderedlist>
          <listitem>
            <para>Tastefully commented source code;</para>
          </listitem>

          <listitem>
            <para>Sample output for some test cases.</para>
          </listitem>

          <listitem>
            <para>Provided code</para>
          </listitem>
        </orderedlist>

        <para>The following classes are all provided for you, in source code
        form:</para>

        <programlisting>&lt;MetroMapParser.java&gt;

package ex3;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.StringTokenizer;

    /**
     * This class reads a text description of a metro subway system
     * and generates a graph representation of the metro.
     *
     * Students should feel free to modify this code as needed
     *  to complete this exercise.
     *
     *&lt;p&gt;
     *
     * The grammar for the file is described below in BNF. A typical line
     * in the file looks like this :
     *
     * &lt;code&gt; 20 NorthStation   Green 19 22  Orange 15 22  &lt;/code&gt;
     *
     * where :
     *         20 is the StationID
     *         NorthStation is the StationName
     *         Green 19 22
     *                  Green is the LineName
     *                  19 is the StationID of the outbound station
     *                  22 is the StationID of the inbound station
     *         Orange 15 22 is a LineID in which :
     *                  Orange is the LineName
     *                  15 is the StationID of the outbound station
     *                  22 is the StationID of the inbound station
     *
     *         Therefore, NorthStation has two outgoing lines.
     *
     *  note : 0 denotes the end of a line : i.e. in this case,
     *  OakGrove would be at the end of the line, as there is no other outbound 
     *  station.
     *
     *&lt;p&gt;
     * metro-map ::= station-spec* &lt;BR&gt;
     * station-spec ::= station-id station-name station-line+ &lt;BR&gt;
     * station-id ::= (positive integer) &lt;BR&gt;
     * station-name ::= string &lt;BR&gt;
     * station-line ::= line-name station-id station-id &lt;BR&gt;
     *
     */

public class MetroMapParser {
    
    private BufferedReader fileInput;
    
    public static void main(String[] args) {
        if(args.length != 1) {
            usage();
            System.exit(0);
        }
        String filename = args[0];
        try {
            MetroMapParser mmp = new MetroMapParser(filename);
            mmp.generateGraphFromFile();
        }
        catch(Exception e) {
            e.printStackTrace();
        }
    }

    private static void usage() {
        //prints a usage message to System.out
        System.out.println("java ex3.MetroMapParser &lt;filename&gt;");
    }
     
    /**
     * @effects: creates a new parser that will read from the file 
     * filename unless the file does not exist. The filename should specify
     * the exact location of the file. This means it should be something like
     * /mit/$USER/6.170/ex3/bostonmetro.txt
     *
     * 
     * @throws java.io.IOException if there &lt;tt&gt;filename&lt;/tt&gt; cannot be read
     *
     * @returns a new MetroMapParser that will parse the file filename
     */
    
    public MetroMapParser(String filename) throws IOException {
         //a buffered reader reads line by line, returning null when file is done
        fileInput = new BufferedReader(new FileReader(filename));
    }

    /**
     * @effects: parses the file, and generates a graph from it, unless there
     * is a problem reading the file, or there is a problem with the format of the
     * file.
     *
     * @throws java.io.IOException if there is a problem reading the file 
     * @throws ex3.BadFileException if there is a problem with the format of the file
     *
     * @returns the Graph generated by the file
     */

    public  void  generateGraphFromFile() throws IOException, BadFileException {
        String line = fileInput.readLine();
        StringTokenizer st;
        String stationID;
        String stationName;
        String lineName;
        String outboundID, inboundID;

        while(line != null) {
            //STUDENT :
            //
            //in this loop, you must collect the information necessary to 
            //construct your graph, and you must construct your graph as well.
            //how and where you do this will depend on the design of your graph.
            //
            //StringTokenizer is a java.util Class that can break a string into tokens
            // based on a specified delimiter.  The default delimiter is " \t\n\r\f" which
            // corresponds to the space character, the tab character, the newline character,
            // the carriage-return character and the form-feed character.
            st = new StringTokenizer(line);

            //We want to handle empty lines effectively, we just ignore them!
            if(!st.hasMoreTokens()) {
                line = fileInput.readLine();
                continue;
            }
    
            //from the grammar, we know that the Station ID is the first token on the line
            stationID = st.nextToken();
    
            if(!st.hasMoreTokens()) {
                throw new BadFileException("no station name");
            }

            //from the grammar, we know that the Station Name is the second token on the line.
            stationName = st.nextToken();
    
            if(!st.hasMoreTokens()) {
                throw new BadFileException("station is on no lines");
            }

            while(st.hasMoreTokens()) {
                lineName = st.nextToken();
                if(!st.hasMoreTokens()) {
                    throw new BadFileException("poorly formatted line info");
                }
                outboundID = st.nextToken();
                if(!st.hasMoreTokens()) {
                    throw new BadFileException("poorly formatted adjacent stations");
                }
                inboundID = st.nextToken();
            }
            line = fileInput.readLine();
        }
    }
}
&lt;BadFileException.java&gt;

package ex3;

import java.io.IOException;

public BadFileException extends IOException {
    public BadFileException(String e) {
        super(e);
    }
}
&lt;bostonmetro.txt&gt;

  1 OakGrove                       Orange 0 2 
  2 Malden                         Orange 1 5 
  3 Wonderland                     Blue 0 4 
  4 RevereBeach                    Blue 3 6 
  5 Wellington                     Orange 2 12 
  6 Beachmont                      Blue 4 9 
  7 Davis                          Red 8 10 
  8 Alewife                        Red 0 7 
  9 SuffolkDowns                   Blue 6 11 
 10 Porter                         Red 7 14 
 11 OrientHeights                  Blue 9 13 
 12 SullivanSquare                 Orange 5 15 
 13 WoodIsland                     Blue 11 16 
 14 Harvard                        Red 10 21 
 15 CommunityCollege               Orange 12 20 
 16 Airport                        Blue 13 18 
 17 Lechmere                       Green 0 19 
 18 Maverick                       Blue 16 26 
 19 SciencePark                    Green 17 20 
 20 NorthStation                   Green 19 22  Orange 15 22 
 21 Central                        Red 14 23 
 22 Haymarket                      Green 20 27  Orange 20 28 
 23 Kendall                        Red 21 25 
 24 Bowdoin                        Blue 0 27 
 25 Charles/MGH                    Red 23 29 
 26 Aquarium                       Blue 18 28 
 27 GovernmentCenter               Green 22 29  Blue 24 28 
 28 State                          Blue 26 27  Orange 22 30 
 29 ParkStreet                     Red 25 30  Green 31 27 
 30 DowntownCrossing               Red 33 29  Orange 32 28 
 31 Boylston                       Green 34 29 
 32 Chinatown                      Orange 44 30 
 33 SouthStation                   Red 60 30 
 34 Arlington                      Green 41 31 
 35 BabcockStreet                  GreenB 36 37 
 36 BrightonAvenue                 GreenB 40 35 
 37 PleasantStreet                 GreenB 35 38 
 38 St.PaulStreet                  GreenB 37 39 
 39 BostonUniversityWest           GreenB 38 43 
 40 FordhamRoad                    GreenB 42 36 
 41 Copley                         GreenB 51 34 GreenC 51 34 GreenD 51 34 GreenE 53 34
 42 HarvardAvenue                  GreenB 48 40 
 43 BostonUniversityCentral        GreenB 39 45 
 44 NewEnglandMedicalCenter        Orange 52 32 
 45 BostonUniversityEast           GreenB 43 46 
 46 BlandfordStreet                GreenB 45 47 
 47 Kenmore                        GreenB 46 51  GreenC 54 51  GreenD 57 51 
 48 GriggsStreet/LongwoodAvenue    GreenB 50 42 
 49 WarrenStreet                   GreenB 55 50 
 50 AllstonStreet                  GreenB 49 48 
 51 Hynes/ICA                      GreenB 47 41  GreenB 47 41  GreenB 47 41 
 52 BackBay/SouthEnd               Orange 64 44 
 53 Prudential                     GreenE 62 41 
 54 St.Mary'sStreet                GreenC 56 47 
 55 SummitAvenue                   GreenB 59 49 
 56 HawesStreet                    GreenC 58 54 
 57 Fenway                         GreenD 65 47 
 58 KentStreet                     GreenC 61 56 
 59 WashingtonStreet               GreenB 66 55 
 60 Broadway                       Red 94 33 
 61 St.PaulStreet                  GreenC 63 58 
 62 Symphony                       GreenE 70 54 
 63 CoolidgeCorner                 GreenC 68 61 
 64 MassachusettsAvenue            Orange 82 52 
 65 Longwood                       GreenD 90 57 
 66 MountHoodRoad                  GreenB 67 59 
 67 SutherlandRoad                 GreenB 71 66 
 68 WinchesterStreet/SummitAv.     GreenC 73 63 
 69 BostonCollege                  GreenB 0 72 
 70 NortheasternUniversity         GreenE 79 62 
 71 ChiswickRoad                   GreenB 78 67 
 72 GreycliffRoad                  GreenB 69 75 
 73 BrandonHall                    GreenC 74 68 
 74 FairbanksStreet                GreenC 76 73 
 75 SouthStreet                    GreenB 72 78 
 76 WashingtonSquare               GreenC 77 74 
 77 TappanStreet                   GreenC 80 76 
 78 ChestnutHillAvenue             GreenB 75 71 
 79 MuseumofFineArts               GreenE 84 70 
 80 DeanRoad                       GreenC 81 77 
 81 EnglewoodAvenue                GreenC 83 80 
 82 Ruggles                        Orange 93 64 
 83 ClevelandCircle                GreenC 0 81 
 84 LongwoodMedicalArea            GreenE 87 79 
 85 Beaconsfield                   GreenD 86 91 
 86 Reservoir                      GreenD 113 85 
 87 BrighamCircle                  GreenE 88 84 
 88 FenwoodRoad                    GreenE 89 87 
 89 MissionPark                    GreenE 92 88 
 90 BrooklineVillage               GreenD 91 65 
 91 BrooklineHills                 GreenD 85 90 
 92 Riverway                       GreenE 95 89 
 93 RoxburyCrossing                Orange 97 82 
 94 Andrew                         Red 98 60 
 95 BackOfTheHill                  GreenE 96 92 
 96 HeathStreet                    GreenE 0 95 
 97 JacksonSquare                  Orange 99 93 
 98 JFK/UMass                      RedA 100 94  RedB 120 94 
 99 StonyBrook                     Orange 101 97 
100 SavinHill                      RedA 103 98 
101 GreenStreet                    Orange 102 99 
102 ForestHills                    Orange 0 101 
103 FieldsCorner                   RedA 104 100 
104 Shawmut                        RedA 105 103 
105 Ashmont                        RedA 0 104  Mattapan 106 0 
106 CedarGrove                     Mattapan 107 105 
107 ButlerStreet                   Mattapan 108 106 
108 Milton                         Mattapan 109 107 
109 CentralAvenue                  Mattapan 110 108 
110 ValleyRoad                     Mattapan 111 109 
111 CapenStreet                    Mattapan 112 110 
112 Mattapan                       Mattapan 0 111 
113 ChesnutHill                    GreenD 114 86 
114 NewtonCenter                   GreenD 115 113 
115 NewtonHighlands                GreenD 116 114 
116 Eliot                          GreenD 117 115 
117 Waban                          GreenD 118 116 
118 Woodland                       GreenD 119 117 
119 Riverside                      GreenD 0 118 
120 NorthQuincy                    RedB 121 98 
121 Wollaston                      RedB 122 120 
122 QuincyCenter                   RedB 123 121 
123 QuincyAdams                    RedB 124 122 
124 Braintree                      RedB 0 123</programlisting>
      </section>

      <section>
        <title>Hints</title>

        <para>You may find the <computeroutput>Integer.parseInt(String
        s)</computeroutput> method to be of use in converting
        <computeroutput>String</computeroutput>'s into int's.</para>

        <para>Although it is generally a bad idea to start coding before you
        have thought deeply, it often makes sense to work incrementally,
        interleaving design and coding. Once you have a sketch of your
        specification, you may want to write some experimental code. This
        should give you some concrete feedback on how easy it is to implement
        the methods you've specified. You may even want to start at the end,
        and write the code that uses your type, so that you can be confident
        that the methods you provide will be sufficient.</para>

        <para>This strategy can backfire and degenerate into mindless hacking,
        leaving you with a pile of low-quality code and an incoherent
        specification. To avoid that, bear two things in mind. First, you must
        be willing to start again: experimental code isn't experimental if
        you're not prepared to throw it away. Second, whenever you start
        coding, you must have a firm idea of what you're trying to implement.
        There's no point starting to code to a specification that is vague and
        missing crucial details. That doesn't mean that your specification
        must be complete and polished, but it does mean that you shouldn't
        start coding a method until at least you have its own specification
        written. Third, should must write down the specification of a method
        and not just imagine it; it's too easy to delude yourself. Try to
        write it on paper and mull it over before you start any coding. It's
        tempting to sit in front of an editor, write some specification as
        comments, and then start coding around them, but this tends not to be
        nearly so effective.</para>
      </section>
    </section>
  </chapter>

  <chapter id="individual_assignments" role="assignments">
    <title>Individual Assignments - Laboratory</title>

    <section id="individual_assignments_eclipse">
      <title>The Eclipse Platform</title>

      <para>Eclipse is a open source programmer's integrated development
      environment (IDE). In this practice you will setup Eclipse and run
      through some of its tools. At the end of the practice you should be able
      to write, test and debug simple Java programs using Eclipse.</para>

      <para>Eclipse was built to be a generic IDE, offering support for many
      languages and extensions. The Eclipse site is <ulink
      url="http://www.eclipse.org">http://www.eclipse.org</ulink>. There you
      can download the tool for different architectures, like Windows, Linux
      or Solaris, download documentation and, if you wish, the source code of
      Eclipse. Other sites, such as <ulink
      url="http://www.eclipseplugincentral.com">http://www.eclipseplugincentral.com</ulink>
      and <ulink
      url="http://eclipse-plugins.2y.net">http://eclipse-plugins.2y.net</ulink>,
      offers to Eclipse users a large set of plugins and extensions that can
      be useful in the development of different types of applications.</para>

      <section>
        <title>Running for the First Time</title>

        <para>The current version of the Eclipse Platform is the 3.x. To get
        it running, all you need to do is to decompress the package in a
        directory of your preference and execute it. There's no install
        manager, and the only thing to set is the
        <emphasis>workspace</emphasis> at the first time you run it. The
        workspace is the directory where Eclipse will store your Java
        Projects.</para>

        <para>You will see the <emphasis>Welcome</emphasis> pane, offering to
        the user the options to see an overview of the IDE, tutorials and
        examples. You can choose the <emphasis>Tutorials</emphasis> option,
        <emphasis>Java Development</emphasis> and follow the instructions.
        After, read and explore the item <emphasis>Workbench Basics</emphasis>
        at the <emphasis>Overview </emphasis>option, and write about the main
        topics of this section in your report.</para>
      </section>

      <section>
        <title>Debugging a Program</title>

        <para>On the same project defined in the task above, create a class
        called <classname>DebugTest</classname>.</para>

        <para>Add the following <methodname>counter</methodname> method to the
        class:</para>

        <programlisting>    int counter(int b) {
        int a;
        for (a = b; a &lt; b+20; a++)
            System.out.println("A = " + a);
        return a;
    }</programlisting>

        <para>Add to the <methodname>main</methodname> method:</para>

        <programlisting>    public static void main(String[] args) {
        DebugTest t = new DebugTest();
        int r = t.counter(30);
        System.out.println("Result = " + r);
    }     </programlisting>

        <para>Open the <emphasis>Console</emphasis> view, compile and run the
        program using the <emphasis>Run As -&gt; Java Application</emphasis>
        option.</para>

        <para>Now put a breakpoint in the <computeroutput>for</computeroutput>
        line. Choose the <emphasis>Debug</emphasis> perspective and run the
        program again, but now via the <emphasis>Debug As -&gt; Java
        Application</emphasis> option. Change to the
        <emphasis>Variables</emphasis> tab and use the <emphasis>F5</emphasis>
        key to step into the breakpoint. What happens? Describe on your
        report.</para>
      </section>

      <section>
        <title>Packing an Application</title>

        <para>The last task in the development of a Java application is to
        generate a JAR package containing all the classes of the application.
        A JAR package is a ZIP file that can behaves as an executable binary
        or simply stores resources (classes, configurations files, images,
        etc.) for another applications.</para>

        <para>To create the JAR file in the Eclipse IDE select the menu
        <emphasis>File -&gt; Export</emphasis>, choose the option
        <emphasis>JAR File</emphasis> and then click
        <emphasis>Next</emphasis>. Select which files will be exported and the
        package name. The last step is to generate the
        <emphasis>Manifest</emphasis>, which is a file that specify, among
        other things, the class that have a main method and can be used as an
        entry point for the application execution.</para>
      </section>
    </section>

    <section id="individual_assignments_complex">
      <title>Derive a Class for Complex Numbers</title>

      <para><emphasis role="bold">1)</emphasis> Using the Eclipse tool, create
      a new class to represent complex numbers (called
      <classname>Complex</classname>). This class should be derived from the
      class <classname>java.lang.Number</classname> (use the
      <classname>java.lang</classname> <ulink
      url="http://java.sun.com/j2se/1.4.2/docs/api/">API</ulink> to find
      <classname>Number</classname> and <classname>Object</classname>).
      Implement all methods required and include two from
      <classname>java.lang.Object</classname>
      (<methodname>toString</methodname> and
      <methodname>equals</methodname>).</para>

      <para>In addition, implement the following interface:</para>

      <programlisting>    public interface BasicOps {

       // Add to this number and return it as the result
       public Number addNum(Number a);

       // Subtract from this number and return it as the result
       public Number subNum(Number b);

       // Multiply to this number and return it as the result
       public Number multNum(Number a);

       // Divide this number by and return it as the result
       public Number divNum(Number b);

    }</programlisting>

      <para>Implement a <methodname>main</methodname> method and test all
      features (methods) of the class in it. Handle in your code for the class
      <classname>Complex</classname>.</para>

      <para><emphasis role="bold">2)</emphasis> Now implement the class
      <classname>Fraction</classname>. This class should represent fraction
      numbers (e.g. 1/3) as two integers. Likewise
      <classname>Complex</classname>, <classname>Fraction</classname> should
      be derived from <classname>Number</classname> and implement the
      interface <interfacename>BasicOps</interfacename>.</para>

      <para>Implement a <methodname>main</methodname> method and test all
      features (methods) of the class in it. Handle in your code for the class
      <classname>Fraction</classname>.</para>

      <para><emphasis role="bold">3)</emphasis> Using both classes
      (<classname>Complex</classname> and <classname>Fraction</classname>),
      create a class <classname>Test</classname> with only a
      <methodname>main</methodname> method. In this method test the
      interaction between the two classes using the operations of the
      interface <interfacename>BasicOps</interfacename>, as the example
      below:</para>

      <programlisting>    BasicOps a = new Complex(2, 3);
    Number b = new Fraction(1, 3);
    Number c = a.multNum(b);
    System.out.println("Result = " + c);</programlisting>

      <para>Make the tests with the greatest possible number of combination.
      Do not forget to check if the results are correct!</para>

      <para>Hand in your code. You used two Java mechanisms:
      <emphasis>subclassing</emphasis> and <emphasis>interfaces</emphasis>.
      When did you use each? Should <classname>Fraction</classname> be
      implemented as a subclass of <classname>Complex</classname>? Why?</para>
    </section>

    <section id="individual_assignments_UML_netbeans">
      <title>Using UML inside Eclipse</title>

      <para>To provide integration with UML we will use the plugin Omondo
      EclipseUML, which is a visual modeling tool that supports the creation
      of UML diagrams, reverse engineering and other functions. If you don't
      have it you can download the <emphasis>free</emphasis> version from the
      site <ulink url="http://www.omondo.com">www.omondo.com</ulink>.</para>

      <para>Once installed, follow these steps:</para>

      <para><emphasis role="bold">1)</emphasis> Using the EclipseUML tool,
      create a Class Diagram for the classes you created in the last
      laboratory assignment (<classname>Complex</classname> and
      <classname>Fraction</classname>) and the interface
      <interfacename>BasicOps</interfacename>. Include the classes
      <classname>Number</classname> and <classname>Object</classname> in the
      appropriate places.</para>

      <para><emphasis role="bold">2)</emphasis> Compile and run the generated
      classes. Did you prefer using UML for creating the files or the code
      editor? Why?</para>

      <para><emphasis role="bold">3)</emphasis> Now, select the project where
      the code for the classes <classname>Fraction</classname> and
      <classname>Complex</classname> is. Generate automatically a Class
      Diagram for the two classes and for the interface
      <classname>BasicOps</classname>.</para>

      <para><emphasis role="bold">4)</emphasis> Define a new interface called
      <interfacename>FourOps</interfacename>:</para>

      <programlisting>    public interface FourOps {

        // Add a number to this number
        public void add(Number a);

        // Subtract a number from this number
        public void sub(Number b);

        // Multiply a number to this number
        public void mult(Number a);

        // Divide this number by
        public void div(Number b);

    }</programlisting>

      <para>Declare that <classname>Complex</classname> and
      <classname>Fraction</classname> implement the
      <interfacename>FourOps</interfacename> interface using the EclipseUML
      tool. After this, generate the code and finish the coding using the
      editor.</para>

      <para><emphasis role="bold">5)</emphasis> Which interface is better?
      <interfacename>BasicOps</interfacename> or
      <interfacename>FourOps</interfacename>? Why?</para>

      <para><emphasis role="bold">6)</emphasis> Which was easier to implement?
      Why?</para>

      <para>Hand in all material you created.</para>
    </section>

    <section id="individual_assignments_interval_class">
      <title>Interval Class</title>

      <para>The goal of this practice is to develop the code for the class
      <classname>Interval</classname> from the object modeling in UML to the
      final code in Java.</para>

      <para>The class <classname>Interval</classname> represents numbers that
      have imprecision. An interval is a real number that has a precision
      range associated to it. For instance, the value of resistance of
      commercial resistors is given by an interval number. A 20K 10% resistor
      has its value in between 18K and 22K.</para>

      <para>This new class has to be able to perform the four basic arithmetic
      operations: addition, subtraction, multiplication and division. It
      should have, at least, the following:</para>

      <programlisting>    class Interval extends Number implements Ops {

        Interval(Interval i);
        Interval(double number, float precision);
        float getPrecision();

           (The same for add, sub, mult, div)
           (Implement all Number methods)
           (Implement the toString, equals and hash from Object)

    }</programlisting>

      <para>It should implement the <interfacename>Ops</interfacename>
      interface:</para>

      <programlisting>    public interface Ops {

        // Add a number to this number
        public Interval add(Interval a);

        // Subtract a number from this number
        public Interval sub(Interval b);

        // Multiply a number to this number
        public Interval mult(Interval a);
        
        // Divide this number by
        public Interval div(Interval b);

    }</programlisting>

      <para>For 20K 10%: Interval(&lt;number&gt;, &lt;precision%&gt;) e.g.:
      Interval(20000, 10).</para>

      <para>For instance, if one wants to calculate the resistance of two
      parallel resistors:</para>

      <programlisting>Input:
    R1 = 20K 10%   R2 = 10K 5%

Code:
    Interval r1 = new Interval(20000, 10);
    Interval r2 = new Interval(10000, 5);
    Interval rp = new Interval(r1).mult(r2).div(new Interval(r1).add(r2));
    System.out.println("Parallel: " + r1 + " " + r2 + " = " + rp);

Output:
    Parallel: 20000 10% 10000 5% = 6662.9 6.7%</programlisting>

      <para><emphasis role="bold">1)</emphasis> First draw the UML
      diagrams.</para>

      <para><emphasis role="bold">2)</emphasis> Generate the code from
      UML.</para>

      <para><emphasis role="bold">3)</emphasis> Complete the code and run it
      using the Eclipse editor.</para>

      <para><emphasis role="bold">4)</emphasis> The code should be able to run
      the example above.</para>

      <para><emphasis role="bold">5)</emphasis> Which of the three interfaces
      do you think is best? <classname>BasicOps</classname>,
      <classname>FourOps</classname> or <classname>Ops</classname>?
      Why?</para>
    </section>

    <section id="individual_assignments_visual_editor">
      <title>Using the Visual Editor</title>

      <para>Begin this practice during the class. Try to clear out all your
      questions about graphical user interface (GUI) editing. You may finish
      it after the class.</para>

      <para>The Visual Editor (VE) is an Eclipse plugin that allows the
      building of AWT/Swing applications with a complete WYSIWYG (what you see
      is what you get) editor. If you don't have the plugin you can download
      it from the Eclipse site.</para>

      <para>First of all, go to the File menu and choose <emphasis>New -&gt;
      Other... -&gt; Java -&gt; Visual Class</emphasis>. This will create a
      Java class and open the visual editor. Name it
      <classname>HelloVisualEditor</classname> and choose the
      <classname>JFrame</classname> as it's superclass.</para>

      <para>Now you can see the <emphasis>Design</emphasis> area, the
      components <emphasis>Palette</emphasis>, the
      <emphasis>JavaBeans</emphasis> viewer and the
      <emphasis>Properties</emphasis> panel. In the
      <emphasis>Design</emphasis> area, select the content pane of the frame
      you've created and change it's layout property to
      <computeroutput>null</computeroutput>. Using the <emphasis>Swing
      Components</emphasis>, create a label that displays the text "Hello
      World!" and a button to kill the application. You can do it using drag
      and drop.</para>

      <para>To assign the button an event you must add an
      <classname>ActionListener</classname> to it. Do this by clicking with
      the right button of the mouse over the component and selecting
      <emphasis>Events -&gt; actionPerformed.</emphasis> Go to the source code
      and change the action to
      <computeroutput>System.exit(0)</computeroutput>.</para>

      <para>Set the <emphasis>visible</emphasis> property of the frame to
      <computeroutput>true</computeroutput> and create a new instance of the
      class in the <methodname>main</methodname> method. Save and run the
      program.</para>

      <para>Present in your report the source code and a screenshot of the
      application.</para>
    </section>

    <section id="individual_assignments_pocket_calculator">
      <title>Pocket Calculator</title>

      <para>The goal of this practice is to develop a small calculator. It
      should have only the four basic operations. The following figure shows
      its appearance.</para>

      <figure>
        <title>Pocket Calculator Window</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="img/calculator.gif" />
          </imageobject>
        </mediaobject>
      </figure>

      <para><emphasis role="bold">Steps:</emphasis></para>

      <orderedlist>
        <listitem>
          <para>Create the looks of the calculator using the Visual Editor in
          Eclipse.</para>
        </listitem>

        <listitem>
          <para>Implement each required function.</para>
        </listitem>

        <listitem>
          <para>Run the program and show it to the teacher or monitor.</para>
        </listitem>

        <listitem>
          <para>From the code generate the Object Model, using the EclipseUML
          plugin.</para>
        </listitem>

        <listitem>
          <para>Comment your code using <emphasis>javadoc</emphasis>, include
          all required tags (you can find information about it in the <ulink
          url="http://java.sun.com/j2se/javadoc/writingdoccomments/#requiredtags">Javadoc
          Reference from Sun</ulink>).</para>
        </listitem>

        <listitem>
          <para>Also, include specification information (as a comment) for
          each method. The structure of a method specification consists of
          three parts (however not all methods have all three parts):</para>

          <itemizedlist>
            <listitem>
              <para>a precondition, what the method
              <emphasis>requires</emphasis>;</para>
            </listitem>

            <listitem>
              <para>a postcondition, what are the method's
              <emphasis>effects</emphasis>; (it is never omitted)</para>
            </listitem>

            <listitem>
              <para>a frame condition, what objects the method
              <emphasis>modifies</emphasis>.</para>
            </listitem>
          </itemizedlist>

          <para>Example:</para>

          <programlisting>public StringBuffer reverse()
    // modifies: this
    // effects: Reverses the order of the characters contained in the string buffer.</programlisting>
        </listitem>
      </orderedlist>

      <para>Hand in your model, your code and a picture of your calculator
      running.</para>
    </section>

    <section id="individual_assignments_junit">
      <title>Using JUnit with Eclipse</title>

      <para>This practice will introduce you to use the JUnit Framework
      integrated with the Eclipse IDE. Be sure you have the latest version of
      JUnit plugin installed (you can download it from the site <ulink
      url="http://www.junit.org">http://www.junit.org</ulink>).</para>

      <para><emphasis role="bold">Step 1 - Writing the code</emphasis></para>

      <para>First of all, create a new project in the Eclipse IDE and add to
      it the two classes: <ulink
      url="../src/ShoppingCart.java"><classname>ShoppingCart</classname></ulink>
      and <ulink
      url="../src/ShoppingItem.java"><classname>ShoppingItem</classname></ulink>.
      You should understand the structure of these classes and
      <emphasis>complete</emphasis> the methods with the comment
      <computeroutput>TODO</computeroutput> on it. The objective is to
      simulate a simple e-commerce's shopping cart and to test the integrity
      of the code you've wrote.</para>

      <para><emphasis role="bold">Step 2 - Creating the test</emphasis></para>

      <para>In the Eclipse IDE, create a new test case from the menu
      <emphasis>File -&gt; New -&gt; JUnit Test Case</emphasis>. Give the name
      <classname>ShoppingTest</classname> to it, check the boxes to create the
      <methodname>setUp()</methodname> and <methodname>tearDown()</methodname>
      methods and choose <classname>ShoppingCart</classname> to be the class
      under test. Choose <emphasis>Next</emphasis>. Now you can select the
      methods for which test method stubs should be created. Choose the
      methods <methodname>addItem(), removeItem(),
      removeAllItems()</methodname> and then click
      <emphasis>Finish</emphasis>.</para>

      <para><emphasis role="bold">Step 3 - Writing the test</emphasis></para>

      <para>In the <methodname>testAddItem()</methodname> method of the class
      you've created, write the following code:</para>

      <programlisting>ShoppingCart cart = new ShoppingCart();
ShoppingItem item1 = new ShoppingItem(1, "item 1", 80.0, 10.0);
ShoppingItem item2 = new ShoppingItem(2, "item 2", 110.0, 15.0);

assertTrue(cart.addItem(item1));
assertTrue(cart.addItem(item2));

assertEquals(cart.getTotal(), 190.0, 0.0);
assertEquals(cart.getDiscount(), 24.5, 0.0);
assertEquals(cart.getTotalWithDiscount(), 165.5, 0.0);
assertEquals(cart.getNumberOfItems(), 2);

assertFalse(cart.addItem(item1));
assertFalse(cart.addItem(null));</programlisting>

      <para>What this code is testing? Write down your answers. If you detect
      a failure in your code, do not correct it yet.</para>

      <para>Now, copy the following code to the
      <methodname>testRemoveItem()</methodname> method:</para>

      <programlisting>ShoppingCart cart = new ShoppingCart();
ShoppingItem item1 = new ShoppingItem(1, "item 1", 80.0, 10.0);
ShoppingItem item2 = new ShoppingItem(2, "item 2", 110.0, 15.0);

cart.addItem(item1);
cart.addItem(item2);

assertTrue(cart.removeItem(item1));

assertEquals(cart.getTotal(), 110.0, 0.0);
assertEquals(cart.getDiscount(), 16.5, 0.0);
assertEquals(cart.getTotalWithDiscount(), 93.5, 0.0);
assertEquals(cart.getNumberOfItems(), 1);

assertFalse(cart.removeItem(item1));
assertFalse(cart.removeItem(null));</programlisting>

      <para>What this code is testing? Write down your answers.</para>

      <para>Now, in the <methodname>testRemoveAllItems()</methodname>, copy
      the code below:<programlisting>ShoppingCart cart = new ShoppingCart();
ShoppingItem item1 = new ShoppingItem(1, "item 1", 80.0, 10.0);
ShoppingItem item2 = new ShoppingItem(2, "item 2", 110.0, 15.0);

cart.addItem(item1);
cart.addItem(item2);

assertTrue(cart.removeAllItems());

assertEquals(cart.getTotal(), 0.0, 0.0);
assertEquals(cart.getDiscount(), 0.0, 0.0);
assertEquals(cart.getTotalWithDiscount(), 0.0, 0.0);
assertEquals(cart.getNumberOfItems(), 0);</programlisting></para>

      <para>What this code is testing?</para>

      <para><emphasis role="bold">Step 4 - Running the test</emphasis></para>

      <para>Finally, you can run the tests. In the Eclipse menu, click on
      <emphasis>Run -&gt; Run As -&gt; JUnit Test.</emphasis> You'll see the
      JUnit graphics interface integrated in the IDE. Check the results. If
      there are errors or failures, correct your code and rerun the
      tests.</para>

      <para><emphasis role="bold">Step 5 - Refining the test</emphasis></para>

      <para>Identify the <emphasis>fixture</emphasis> for the test case
      <classname>ShoppingTest</classname> and write the
      <methodname>setUp()</methodname> and <methodname>tearDown()</methodname>
      methods. Rerun the test to check if there are any error.</para>

      <para>Hand in all material you've created.</para>
    </section>
  </chapter>

  <chapter id="group_assignments" role="assignments">
    <title>Group Assignments</title>

    <section id="group_assignments_text_editor">
      <title>Text Editor</title>

      <para>A version of Notepad in Java using Swing. It should have the same
      commands as Notepad, excluding the printer command. The Help option
      should be present, but it only needs to explain the commands and show
      the names of the authors.</para>

      <para>You'll need to learn how to use Swing. The online Javaâ¢ Tutorial
      trail, which is at <ulink
      url="http://java.sun.com/docs/books/tutorial/">http://java.sun.com/docs/books/tutorial/</ulink>
      , includes a section on Swing and the Java Foundation Classes; you'll
      find it at <ulink
      url="http://java.sun.com/docs/books/tutorial/uiswing/">http://java.sun.com/docs/books/tutorial/uiswing/</ulink>.</para>
    </section>

    <section id="group_assignments_video_tape_store">
      <title>Video Tape Store</title>

      <para>Implement a program to control a video store tape collection. The
      program should be able to track all tapes, register tape transactions,
      detect costumers in debit and send fines. All should be presented in
      screens using Swing. The program must also show transactions, where each
      tape is and the status of each costumer.</para>

      <para>You'll need to learn how to use Swing. The online Javaâ¢ Tutorial
      trail, which is at <ulink
      url="http://java.sun.com/docs/books/tutorial/">http://java.sun.com/docs/books/tutorial/</ulink>,
      includes a section on Swing and the Java Foundation Classes; you'll find
      it at <ulink
      url="http://java.sun.com/docs/books/tutorial/uiswing/">http://java.sun.com/docs/books/tutorial/uiswing/</ulink>.</para>
    </section>

    <section id="group_assignments_course_applet">
      <title>Course Applet</title>

      <para>This program (implemented in Swing) should be able to run
      standalone or as an Applet. It should read a set of courses and their
      dependencies from a property file, a XML file or a database (this choice
      is optional) . For each course, it should read its time table.</para>

      <para>This program should help students choose the classes they are
      going to take in a semester. Each student will mark the classes he
      already have taken and the program will show all the classes he can take
      and their time tables. After that, the student can choose the classes he
      will take. The program should show the student time table and mark (in
      red) the courses that have time collisions.</para>

      <para>You should use Java Swing to build the GUI of this program. The
      online Javaâ¢ Tutorial trail, which is at <ulink
      url="http://java.sun.com/docs/books/tutorial/">http://java.sun.com/docs/books/tutorial/</ulink>,
      includes a section on Swing and the Java Foundation Classes; you'll find
      it at <ulink
      url="http://java.sun.com/docs/books/tutorial/uiswing/">http://java.sun.com/docs/books/tutorial/uiswing/</ulink>.</para>
    </section>

    <section id="group_assignments_chat">
      <title>Chat</title>

      <para>The program should implement a chat service that is able to attend
      multiple clients at the same time. It can be implemented by either using
      a central server (easier) or peer-to-peer clients. It should be able to
      have at least 10 rooms for conversation. The clients should be able to
      create new rooms.</para>

      <para>The chat should have, at least, the following commands (you may
      change the name of the commands):</para>

      <programlisting>Commands:
   list              List the names of all rooms.
   nickname &lt;name&gt;   Gives a name for the user.
   join &lt;room name&gt;  Joins a room.
   \                 Leaves a room (only command
                     possible inside a room).</programlisting>

      <para>Events that should be broadcasted for all room members:</para>

      <programlisting>     New user enters room.
     Whatever a user types.
     User leaves room.</programlisting>

      <para>Examples:</para>

      <programlisting>   User hotair enters room pingpong.
   User niceperson: Welcome hotair !
   User hotair: Hi.
   ...
   User hotair: I don't like you, niceperson.
   User hotair leaves room pingpong.</programlisting>

      <para>The systen should allow messages to a room or to from user to user
      (private mode). The chat client should be implemented using Java Swing.
      The online Javaâ¢ Tutorial trail, which is at <ulink
      url="http://java.sun.com/docs/books/tutorial/">http://java.sun.com/docs/books/tutorial/</ulink>,
      includes a section on Swing and the Java Foundation Classes; you'll find
      it at <ulink
      url="http://java.sun.com/docs/books/tutorial/uiswing/">http://java.sun.com/docs/books/tutorial/uiswing/</ulink>.</para>
    </section>

    <section id="group_assignments_file_manager">
      <title>File Manager</title>

      <para>The unit FileManager is the only unit for a File Manager
      Application. The Java File Manager application is designed to provide
      basic facilities to deal with files in a graphic environment. It allows
      file system browsing, copying, moving and deleting files and creating
      folders. It also allows files of a specific type to be associated with
      an application, and handles opening the file with the proper application
      when the user requests it.</para>

      <para>To show information, the Java File Manager uses the following
      format:</para>

      <programlisting>drw  FileName     FileLength    FileType</programlisting>

      <para>where the first three letters indicate wether the file is a
      directory, is readable and writable. The second column is the name of
      the file, followed by its size and a description of the File Type. This
      way you could have:</para>

      <programlisting>-rw  FileManager.java   1324    Java Source File</programlisting>

      <section>
        <title>The Menu</title>

        <para>Commands are given to Java File Manager mainly through Menus.
        There are:</para>

        <section>
          <title>The File Menu</title>

          <para><emphasis role="bold">Open</emphasis>: Opens the currently
          selected file (or the one nearest the top if more than one are
          selected) with the proper application. If the selected file is a
          directory, updates the file list.</para>

          <para><emphasis role="bold">Create Folder</emphasis>: Creates a
          folder with the specified name.</para>

          <para><emphasis role="bold">Associate</emphasis>: Collects
          information about the application to be associated with the selected
          file. A comment about the file type can also be specified.</para>

          <para><emphasis role="bold">Quit</emphasis>: Quit Java File
          Manager.</para>
        </section>

        <section>
          <title>The Edit Menu</title>

          <para><emphasis role="bold">Select All</emphasis>: Selects all files
          in the current directory.</para>

          <para><emphasis role="bold">Cut</emphasis>: Mark selected files to
          be moved to a new directory.</para>

          <para><emphasis role="bold">Copy</emphasis>: Mark selected files to
          be copied to a new directory.</para>

          <para><emphasis role="bold">Paste</emphasis>: Copies or moves the
          marked files, according to if they were copied or cut.</para>

          <para><emphasis role="bold">Delete</emphasis>: Deletes currently
          selected files.</para>
        </section>

        <section>
          <title>The View Menu</title>

          <para><emphasis role="bold">-Order by Name</emphasis>: Orders files
          by Name</para>

          <para><emphasis role="bold">-Order by Type</emphasis>: Order files
          by type</para>

          <para><emphasis role="bold">-Order by length</emphasis>: Order file
          by length</para>
        </section>

        <section>
          <title>The Help Menu</title>

          <para><emphasis role="bold">-Help</emphasis>: Shows this
          message</para>
        </section>
      </section>

      <section>
        <title>The Tool Bar</title>

        <para>The buttons Cut, Copy, Paste and Delete shown in the Toolbar are
        shortcuts for their equivalents in the Edit Menu.</para>
      </section>
    </section>

    <section id="group_assignments_pacman">
      <title>PacMan</title>

      <para>Projeto sugerido por alunos:</para>

      <para>Implementar o jogo PacMan em Java. O programa deve ser:</para>

      <para>1- orientado a objetos,</para>

      <para>2- usar as bibliotecas graficas do Java (Swing),</para>

      <para>3- Ter os itens: Pacman, vitaminas, comida e fantasmas (pelo menos
      3),</para>

      <para>4- Os fantasmas podem se mover de maneira aleatoria,</para>

      <para>5- O Pacman e os fantasmas tem de mostrar animaÃ§Ã£o: ex: eles tem
      de abrir e fechar a boca quando comem algo.</para>

      <para>Um exemplo de PacMan (em flash): <ulink
      url="http://www.ebaumsworld.com/pacman.html">http://www.ebaumsworld.com/pacman.html</ulink>.</para>
    </section>

    <section id="group_assignments_foliotracker">
      <title>Foliotracker</title>

      <para>Foliotracker is an application program for tracking the value of a
      stock portfolio.</para>

      <para>In the first of two parts, you'll decide on the basic
      functionality of your program, design a graphical user interface (GUI)
      for it, and specify an application programmer's interface (API) through
      which the GUI will access the components of the code that obtain stock
      quotes, maintain a database of values, and so on.</para>

      <para>The benefit of decoupling this application into two parts (a
      front-end GUI and the back-end implementation) by creating a
      well-defined API is to allow for different types of front-end clients to
      access your system and use its functionality. You won't actually write
      any of the code that implements the API; instead you'll write a stub: a
      piece of code that can be used to test a client of the API, but which
      provides only very limited functionality. You may, for example, have the
      stub compute nothing and just look up values in a fixed table. This stub
      will allow you to assemble and test the GUI, and make sure that the
      functionality seems reasonable. In the second part, you'll implement the
      functionality of the API itself. You should not need to make any changes
      to the GUI or to the API.</para>

      <para>The focus of the first part is the designing of the API and GUI
      implementation. You'll need to learn how to use Swing. The online Javaâ¢
      Tutorial trail, which is at <ulink
      url="http://java.sun.com/docs/books/tutorial/">http://java.sun.com/docs/books/tutorial/</ulink>
      , includes a section on Swing and the Java Foundation Classes; you'll
      find it at <ulink
      url="http://java.sun.com/docs/books/tutorial/uiswing/">http://java.sun.com/docs/books/tutorial/uiswing/</ulink>
      . The focus of the second part is the designing of the backend and its
      implementation. You shouldn't need to learn anything new, but will have
      an opportunity to refine your skills in designing with abstract data
      types, object models, etc. You don't need to implement the code for
      obtaining the stock quotes; we provide a class for you that has a simple
      method that takes a ticker symbol as a string and returns a
      price.</para>

      <section>
        <title>Part 1: API and GUI</title>

        <para>Foliotracker enables the user to track the contents and value of
        multiple stock portfolios. A Foliotracker can be used to manage and
        maintain multiple stock portfolios where a portfolio is a collection
        of stock holdings. A portfolio could also contain meta-data about a
        person's transaction history, statistics, etc. Foliotracker discovers
        current stock values by querying a stock quote server across the World
        Wide Web. Your first task is to determine what functionality
        Foliotracker should support. At the minimum, it should be possible
        to:</para>

        <itemizedlist>
          <listitem>
            <para>create multiple portfolios;</para>
          </listitem>

          <listitem>
            <para>see the positions (stock name, number of shares held, price
            per share, and value of the holding) in a portfolio;</para>
          </listitem>

          <listitem>
            <para>increase and decrease the number of shares of a
            stock;</para>
          </listitem>

          <listitem>
            <para>see the total value of a portfolio.</para>
          </listitem>
        </itemizedlist>

        <para>We have provided some screenshots of possible functionality. An
        example of a Foliotracker with multiple stock portfolios open. The
        user can:</para>

        <itemizedlist>
          <listitem>
            <para>Add a new stock to his/her portfolio.</para>
          </listitem>

          <listitem>
            <para>Switch to another portfolio using the tab control.</para>
          </listitem>

          <listitem>
            <para>Double-click on a stock for editing purposes.</para>
          </listitem>

          <listitem>
            <para>Close the current portfolio.</para>
          </listitem>

          <listitem>
            <para>Delete the current portfolio.</para>
          </listitem>
        </itemizedlist>

        <figure>
          <title>Foliotracker Window</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="img/MultiFolio.jpg" />
            </imageobject>
          </mediaobject>
        </figure>

        <para>Here are some possible features you might consider including in
        your design:</para>

        <itemizedlist>
          <listitem>
            <para>saving portfolio information to disk;</para>
          </listitem>

          <listitem>
            <para>indicating whether price is going up or down, perhaps by
            coloring the text or using little coloured arrows;</para>
          </listitem>

          <listitem>
            <para>allowing the user to enter the price at which a stock was
            bought, to estimate gains and losses;</para>
          </listitem>

          <listitem>
            <para>keeping track of highs and lows;</para>
          </listitem>

          <listitem>
            <para>setting watches causing an action to occur when the stock
            goes up or down some amount;</para>
          </listitem>

          <listitem>
            <para>sorting positions by value, ticker symbol, etc.</para>
          </listitem>
        </itemizedlist>

        <para>You should choose a set of features that you plan to implement.
        We recommend that you order them according to difficulty and
        desirability, and think carefully about which you will jettison if
        things turn out harder than you thought.</para>

        <para>More fundamentally, you will need to consider basic questions
        such as</para>

        <itemizedlist>
          <listitem>
            <para>how portfolios will be identified (with names provided by
            the user?);</para>
          </listitem>

          <listitem>
            <para>when stock prices will be updated (periodically? by explicit
            command?);</para>
          </listitem>

          <listitem>
            <para>how to handle exceptional cases, such as ticker symbols that
            don't match stocks, or how to behave when the web site is not
            responding;</para>
          </listitem>

          <listitem>
            <para>whether multiple portfolios can be shown at once;</para>
          </listitem>

          <listitem>
            <para>whether multiple simultaneous views of the same portfolio
            are allowed.</para>
          </listitem>
        </itemizedlist>

        <para>These issues need to be addressed at the start; they'll be much
        harder to deal with if you postpone them.</para>

        <para>In the design of the API, you will also need to resolve some
        basic issues. Two important ones are:</para>

        <itemizedlist>
          <listitem>
            <para>whether the API will be passive, in the sense that the
            application simply treats it as a source of information, or</para>
          </listitem>

          <listitem>
            <para>whether it will be active, by having functionality to make
            periodic callbacks, for example; what types will be exposed at the
            interface.</para>
          </listitem>
        </itemizedlist>

        <para>Your API specification will be a complete description of the
        functionality of the program, ignoring only the question of how the
        program and user communicate via the GUI. Your GUI should be easy to
        use and attractive, and straightforward to build. You'll probably want
        to play around with Swing a bit to get a feel for how things are done
        and what's possible before you design it.</para>
      </section>

      <section>
        <title>Part 2: Implementing the API</title>

        <para>Your task in this part is to complete your Foliotracker by
        implementing the API which you defined in part 1. You will need to
        design the internal structure of your Foliotracker backend, and test
        the program as a whole. This program is difficult to test because it
        involves a GUI, and because the changing stock prices make it hard to
        do repeatable tests. So you will need to devise a reasonable testing
        strategy that gives you some confidence that the application works
        reliably, and that the stock prices and position and portfolio
        valuations can be trusted. You will probably want to take advantage of
        the programmatic interface you designed in part 1, and test the GUI
        separately in a more ad hoc manner.</para>

        <para>We have provided a QuoteServer module for your convenience. If
        you are curious, you can look at the source code for the QuoteServer,
        but you should be able to make use of it using only the method
        <computeroutput>QuoteServer.getLastValue("&lt;ticker&gt;")</computeroutput>.</para>

        <caution>
          <para>The <command>QuoteServer.java</command> program can be
          outdated, test it before begining your project. If it does not work
          try to find a Java progam in the Internet that can read quotes. If
          you have problems contact the teacher.</para>
        </caution>

        <para>File <command>QuoteServer.java</command>:</para>

        <programlisting>package folioTracker;

import java.net.*;
import java.io.*;
import java.util.*;

/**
 * QuoteServer is a utility class that allows calling code to 
 * retrieve the latest market value of a given stock by ticker symbol.
 * The QuoteServer obtains the stock value by using the website:
 * &lt;a href="http://quote.fool.com"&gt;&lt;tt&gt;http://quote.fool.com&lt;/tt&gt;&lt;/a&gt; &lt;Br&gt;
 * Examples of ticker symbols are &lt;tt&gt;MSFT&lt;/tt&gt; and &lt;tt&gt;orcl&lt;/tt&gt;.
 * (Note that ticker symbols are not case sensitive.  That is that "MSFT"
 * and "msft" are functionally equivalent.)&lt;p&gt;
 *
 * A valid ticker symbol is one that is currently registered with either
 * the New York Stock Exchange (NYSE) or NASDAQ.
 */

public class QuoteServer {

    protected static final String _URL = "http://quote.fool.com/simple.asp?symbols=";
    protected static final String _TOKEN1 = "mwsimplelast";
    protected static final String _TOKEN2 = "NOBR";
    protected static final String _DELIMITER = "&amp;&lt;&gt;=";    
    public static void main(String[] args) {
        try {
            String str = getLastValue(args[0]);
            System.out.println(args[0] + " has a stock value of " + str);
        } catch(Exception e) { System.err.println(e); }
    }

    /** 
     * 
     * retrieve the latest market value of a stock
     *
     * @requires: tickerSymbol != null
     * @effects: returns a current
     *          value for tickerSymbol as a dollar amount, with a
     *          period separating dollars and cents (eg, "120.50" for
     *          one hundred and twenty dollars and fifty cents)&lt;BR&gt;
     *          unless tickerSymbol is not a valid NYSE or NASDAQ
     *          symbol, when throws NoSuchTickerException&lt;br&gt; or
     *          unless an error connecting to the website or some
     *          other error occurs, when throws WebsiteDataException&lt;BR&gt;
     *          The amount returned may contain commas, for example,
     *          "2,243.87"&lt;br&gt;
     */
    public static String getLastValue(String tickerSymbol)
        throws WebsiteDataException, NoSuchTickerException {
        // the web page queried by the code below can be broken into tokens
        //   with delimiters being &lt;, &gt;, and =.  The token corresponding to
        //   the current stock price comes after the two tokens
        //   mw_simple_last and NOBR.
        String strURLStart = _URL;
        URL urlWebPage = null;
        InputStreamReader isr = null;
        BufferedReader brWebPage = null;
        
        // open the web page for reading
        try {
            urlWebPage = new URL(strURLStart + tickerSymbol);
            isr = new InputStreamReader(urlWebPage.openStream());
            brWebPage = new BufferedReader(isr);
        } catch(Exception e) {
            throw new WebsiteDataException();
        }
        
        // find the line with the stock quote on it
        String strLine = null;
        try {
            while(true) {
                strLine = brWebPage.readLine();
                if(strLine == null) {
                    throw new WebsiteDataException("Parse failed!");
                }
                if(strLine.indexOf(_TOKEN1) != -1)
                    break;
            }
        } catch(IOException e) {
            throw new WebsiteDataException();
        }
        
        // find the stock quote in the line
        StringTokenizer strtok = new StringTokenizer(strLine, _DELIMITER);
        while(true) {
            if(strtok.hasMoreTokens() == false)
                throw new NoSuchTickerException();
            if(strtok.nextToken().compareTo(_TOKEN1) == 0)
                break;
        }
        String strNOBR = strtok.nextToken();
        if(!strNOBR.equals(_TOKEN2))
            throw new NoSuchTickerException();
        String strStockValue = strtok.nextToken();

        //format check removed

        // close the web page stream
        try {
            brWebPage.close();
            isr.close();
        } catch(IOException e) {
            throw new WebsiteDataException();
        }
        
        return strStockValue;
    }
}
File NoSuchTickerException.java:

package folioTracker;

//    Class for the Ticker Exception

public class NoSuchTickerException extends Exception {
   NoSuchTickerException() {}
}
File WebsiteDataException.java:

package folioTracker;

//    Class for the Website Data Exception

public class WebsiteDataException extends Exception {
   WebsiteDataException() {}
   WebsiteDataException(String e) { super(e);}
}</programlisting>
      </section>
    </section>
  </chapter>

  <chapter id="gui_awt">
    <title>Extra: Graphic User Interface - AWT</title>

    <section id="gui_awt_overview">
      <title><ulink
      url="/library/books/tutorial1.02/ui/overview/index.html">Overview</ulink></title>

      <section>
        <title><ulink
        url="/library/books/tutorial1.02/ui/overview/components.html">The
        Abstract Window Toolkit</ulink></title>

        <para>The AWT is the part of the Java environment that contains the
        set of classes for writing GUI (Graphic User Interface) Graphic
        programs:</para>

        <figure>
          <title>The AWT</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="220px" contentwidth="457px"
                         fileref="img/GUI1.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <itemizedlist>
          <listitem>
            <para>The Basic Controls: Buttons, Checkboxes, Choices, Lists,
            Menus, and Text Fields</para>

            <para>When a user activates one of these controls, it posts an
            Action event to be handled by the object that contains the
            control.</para>
          </listitem>

          <listitem>
            <para>Other Ways of Getting User Input: Sliders, Scrollbars, and
            Text Areas</para>

            <para>The Scrollbar class is used for both slider and scrollbar
            functionality. The TextArea class simply provides an area to
            display or edit text.</para>
          </listitem>

          <listitem>
            <para>Creating Custom Components: Canvases</para>

            <para>With your Canvas subclass, you can draw custom graphics to
            the screen and implement any kind of event handling.</para>
          </listitem>

          <listitem>
            <para>Labels</para>

            <para>A Label simply displays an unselectable line of text.</para>
          </listitem>

          <listitem>
            <para>Containers: Windows and Panels</para>

            <para>The Window subclasses provide windows to contain components.
            Panels group components within an area of an existing
            window.</para>
          </listitem>
        </itemizedlist>

        <para><ulink url="../audio/Gui1.asf"><inlinegraphic
        fileref="img/asf.gif" format="GIF" />Audio in
        Portuguese</ulink></para>
      </section>

      <section>
        <title><ulink
        url="/library/books/tutorial1.02/ui/overview/anatomy.html">A GUI based
        example</ulink></title>

        <figure>
          <title>Converter of distances between US and metric.</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="209px" contentwidth="275px"
                         fileref="img/GUI2.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <section>
          <title><ulink
          url="/library/books/tutorial1.02/ui/overview/egClasses.html">Classes
          in the Example Program</ulink></title>

          <figure>
            <title>Classes in the Example Program</title>

            <mediaobject>
              <imageobject>
                <imagedata contentdepth="226px" contentwidth="599px"
                           fileref="img/GUI3.gif" format="GIF" />
              </imageobject>
            </mediaobject>
          </figure>

          <itemizedlist>
            <listitem>
              <para>The Converter class actually extends the Applet class
              (which itself extends Panel), instead of directly extending
              Panel.</para>
            </listitem>

            <listitem>
              <para>The ConversionPanel class provides a way of grouping all
              the controls that describe a particular set of distance
              measurements.</para>
            </listitem>

            <listitem>
              <para>The Unit class provides objects that group a description
              (such as "Centimeters") with a multiplier that indicates the
              number of units per meter (0.01, for example).</para>
            </listitem>
          </itemizedlist>

          <para><ulink url="../audio/Gui2.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>

      <section>
        <title><ulink
        url="/library/books/tutorial1.02/ui/overview/compHierarchy.html">The
        Component Hierarchy</ulink></title>

        <literallayout>                                Frame
                                  |
                                 ...
                                  |
                               Converter
                                  |
                ----------------------------------
                |                                |
       ConversionPanel (metricPanel)    ConversionPanel (usaPanel)   
                |                                |
        -------------------              -------------------
        |       |         |              |       |         |
      Label     |       Choice         Label     |       Choice
                |                                |
          --------------                  --------------
          |            |                  |            |
      TextField    Scrollbar          TextField    Scrollbar
</literallayout>
      </section>

      <section>
        <title><ulink
        url="/library/books/tutorial1.02/ui/overview/drawing.html">Drawing</ulink></title>

        <itemizedlist>
          <listitem>
            <para>When the Converter application draws itself, here's what
            happens</para>

            <orderedlist>
              <listitem>
                <para>The Frame draws itself.</para>
              </listitem>

              <listitem>
                <para>The Converter object draws itself, drawing a box around
                its area.</para>
              </listitem>

              <listitem>
                <para>One of the two ConversionPanels draws itself, drawing a
                box around its area.</para>
              </listitem>

              <listitem>
                <para>The contents of the ConversionPanel -- the Label,
                TextField, Scrollbar, and Choice -- draw themselves.</para>
              </listitem>
            </orderedlist>
          </listitem>

          <listitem>
            <para>How Drawing Requests are handled</para>

            <para>AWT ----&gt; Component's update() ----&gt; Component's
            paint()</para>
          </listitem>

          <listitem>
            <para>Paint method</para>

            <programlisting>public void paint(Graphics g) {
       Dimension d = size();
       g.drawRect(0,0, d.width - 1, d.height - 1);
}</programlisting>
          </listitem>
        </itemizedlist>

        <para><ulink url="../audio/Gui3.asf"><inlinegraphic
        fileref="img/asf.gif" format="GIF" />Audio in
        Portuguese</ulink></para>
      </section>
    </section>

    <section id="gui_awt_awt_1.1_components">
      <title><ulink
      url="/library/books/tutorial1.02/ui/components/index.html">AWT 1.1
      Components</ulink></title>

      <section>
        <title><ulink
        url="/library/books/tutorial1.02/ui/components/using.html">AWT
        hierarchy</ulink></title>

        <para>AWT Component</para>

        <figure>
          <title>AWT Hierarchy</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="265px" contentwidth="560px"
                         fileref="img/GUI5.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <para>AWT MenuComponent</para>

        <figure>
          <title>AWT MenuComponent Hierarchy</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="106px" contentwidth="553px"
                         fileref="img/GUI5.2.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <note>
          <para>Because of cross-platform restrictions, menu-related
          components aren't full-blown Components</para>
        </note>

        <para><ulink url="../audio/Gui7.asf"><inlinegraphic
        fileref="img/asf.gif" format="GIF" />Audio in
        Portuguese</ulink></para>
      </section>

      <section>
        <title><ulink
        url="/library/books/tutorial1.02/ui/components/generalRules.html">Rules
        for Using Components</ulink></title>

        <section>
          <title>How to Add a Component to a Container:</title>

          <para>For any Component object except a Window to display itself
          onscreen, you must first add it to a Container object.</para>

          <para>The Container class defines three methods for adding
          components:</para>

          <itemizedlist>
            <listitem>
              <para>add(Component comp) method simply requires that you
              specify the component to add.</para>
            </listitem>

            <listitem>
              <para>add(Component comp, int ind) method lets you add an
              argument specifying the integer position at which the component
              should be added.</para>
            </listitem>

            <listitem>
              <para>add(String pos, Component comp) method has as first
              argument a layout manager-dependent string that specifies the
              component's position to the layout manager.</para>
            </listitem>
          </itemizedlist>

          <note>
            <para>Adding a component to a container removes the component from
            the container it used to be in (if any).</para>
          </note>
        </section>

        <section>
          <title>What the Component Class Provides</title>

          <itemizedlist>
            <listitem>
              <para>Basic drawing support.</para>

              <para>Component provides the paint(), update(), and repaint()
              methods, which enable Components to draw themselves
              onscreen.</para>
            </listitem>

            <listitem>
              <para>Event handling</para>

              <para>Component defines the general-purpose handleEvent() method
              and a group of methods such as action() that handle specific
              event types.</para>
            </listitem>

            <listitem>
              <para>Appearance control: font</para>

              <para>Component provides methods to get and set the current
              font, and to get information about the current font.</para>
            </listitem>

            <listitem>
              <para>Appearance control: color</para>

              <para>Component provides methods to get and set the foreground
              and background colors.</para>
            </listitem>

            <listitem>
              <para>Image handling</para>

              <para>Component provides the basis for displaying images.
              Canvases and most Containers can display images.</para>
            </listitem>

            <listitem>
              <para>Onscreen size and position control</para>

              <para>Component provides methods that get or set (subject to
              layout manager oversight) the component's current size and
              location.</para>
            </listitem>
          </itemizedlist>

          <para><ulink url="../audio/Gui8.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>

      <section>
        <title><ulink
        url="/library/books/tutorial1.02/ui/components/button.html">Buttons</ulink></title>

        <para>The Button class provides a default button implementation. A
        button is a simple control that generates an action event when the
        user clicks it.</para>

        <figure>
          <title>Buttons</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="33px" contentwidth="396px"
                         fileref="img/GUI6.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <section>
          <title>Code Example</title>

          <programlisting>b1 = new Button();
b1.setLabel("Disable middle button");
b1.setActionCommand(DISABLE);
b2 = new Button("Middle button");
b3 = new Button("Enable middle button");
b3.setEnabled(false);
b3.setActionCommand(ENABLE);
//Listen for actions on buttons 1 and 3.
b1.addActionListener(this);
b3.addActionListener(this);

. . .

public void actionPerformed(ActionEvent e) {
    String command= e.getActionCommand();
    if (command==DISABLE) { //They clicked "Disable middle button"
        b2.setEnabled(false);
        b1.setEnabled(false);
        b3.setEnabled(true);
    }
    if (command == ENABLE) { //They clicked "Enable middle button"
        b2.setEnabled(true);
        b1.setEnabled(true);
        b3.setEnabled(false);
    }
}</programlisting>
        </section>
      </section>

      <section>
        <title><ulink
        url="/library/books/tutorial1.02/ui/components/label.html">Labels</ulink></title>

        <para>The Label class provides an easy way of putting unselectable
        text in your program's GUI. Labels are aligned to the left of their
        drawing area, by default.</para>

        <figure>
          <title>Labels</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="89px" contentwidth="160px"
                         fileref="img/GUI11.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <section>
          <title>Code Example</title>

          <programlisting>Label label1 = new Label();
label1.setText("Left");
Label label2 = new Label("Center");
label2.setAlignment(Label.CENTER);
Label label3 = new Label("Right", Label.RIGHT);</programlisting>
        </section>
      </section>

      <section>
        <title><ulink
        url="/library/books/tutorial1.02/ui/components/canvas.html">Canvases</ulink></title>

        <para>The Canvas class exists to be subclassed. It does nothing on its
        own; it merely provides a way for you to implement a custom
        Component</para>

        <figure>
          <title>Canvas</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="107px" contentwidth="161px"
                         fileref="img/GUI7.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <section>
          <title>Code Example</title>

          <programlisting>class ImageCanvas extends Canvas {
      Container pappy;
      Image image;
      boolean trueSizeKnown = false;
      Dimension minSize;

      public ImageCanvas(Image image, Container parent, int w, int h) {
             if (image == null) {
                 System.err.println("Canvas got invalid image object!");
                 return;
             }
             this.image = image;
             pappy = parent;
             minSize = new Dimension(w,h);
      }

      public Dimension getPreferredSize() { return getMinimumSize();}

      public Dimension getMinimumSize() { return minSize;}

      public void paint (Graphics g) {
             if (image != null) {
                 if (!trueSizeKnown) {
                    int width= image.getWidth(this);
                    int height= image.getHeight(this)
                    if ((imageWidth &gt; 0) &amp;&amp; (imageHeight &gt; 0)) {
                        trueSizeKnown = true; 
                        //Component-initiated resizing.
                        minSize = new Dimension(width,height);
                        setSize(width, height);
                        pappy.validate();
                    }
                 }
                 g.drawRect(0, 0, minSize.width - 1, minSize.height - 1);
                 g.drawImage(image, 0, 0, this);
            }
      }
}</programlisting>
        </section>
      </section>

      <section>
        <title><ulink
        url="/library/books/tutorial1.02/ui/components/checkbox.html">Checkboxes</ulink></title>

        <para>Checkboxes are two-state buttons that can be either "on" or
        "off". When the user clicks a checkbox, the checkbox state changes and
        it generates an action event.</para>

        <figure>
          <title>Checkbox</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="80px" contentwidth="270px"
                         fileref="img/GUI8.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <section>
          <title>Code Example</title>

          <programlisting>cb1 = new Checkbox();   //Default state is "off" (false).
cb1.setLabel("Checkbox 1");
cb3 = new Checkbox("Checkbox 3");
cb3.setState(true);     //Set state to "on" (true).
cbg = new CheckboxGroup();
cb4 = new Checkbox("Checkbox 4", cbg, false); //initial state: off (false)
cb5 = new Checkbox("Checkbox 5", cbg, false); //initial state: off
cb6 = new Checkbox("Checkbox 6", cbg, false); //initial state: off
</programlisting>
        </section>
      </section>

      <section>
        <title><ulink
        url="/library/books/tutorial1.02/ui/components/choice.html">Choices</ulink></title>

        <para>The Choice class provides a menu-like list of choices, accessed
        by a distinctive button. The user presses the button to bring up a
        "menu", and then chooses one of the items.</para>

        <figure>
          <title>Choice</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="122px" contentwidth="252px"
                         fileref="img/GUI9.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <section>
          <title>Code Example</title>

          <programlisting>choice = new Choice();
choice.addItem("ichi");
choice.addItem("ni");
choice.addItem("san");
choice.addItem("yon");
choice.addItemListener(this);

...

public void itemStateChanged(ItemEvent e) {
       setLabelText(choice.getSelectedIndex(), 
                    choice.getSelectedItem());
}</programlisting>
        </section>
      </section>

      <section>
        <title><ulink
        url="/library/books/tutorial1.02/ui/components/lists.html">Lists</ulink></title>

        <para>The List class provides a scrollable area containing selectable
        text items.</para>

        <figure>
          <title>List</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="158px" contentwidth="511px"
                         fileref="img/GUI12.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <section>
          <title>Code Example</title>

          <programlisting>//Build lists, which allows multiple selections.
spanish = new List(4, true); //prefer 4 items visible
spanish.add("uno");
. . .
spanish.add("siete");
spanish.addActionListener(this);
spanish.addItemListener(this);

italian = new List(); //Defaults to none visible, only one selectable
italian.add("uno");
. . .
italian.add("sette");
italian.addActionListener(this);
italian.addItemListener(this);
. . .
public void actionPerformed(ActionEvent e) {
       List list= (List) e.getSource();
       String language = (list == spanish) ? "Spanish" : "Italian";
       output.append("Action event occurred on \""
                     + list.getSelectedItem() + "\" in " 
                     + language + ".\n");
}

public void itemStateChanged(ItemEvent e) {
       List list= (List) e.getItemSelectable();
       String language = (list == spanish) ? "Spanish" : "Italian";

       int index = ((Integer)(e.getItem())).intValue();
       if (e.getStateChange() == ItemEvent.SELECTED) {
           output.append("Select event occurred on item #"
                          + index + " (\""
                          + list.getItem(index) + "\") in "
                          + language + "." + newline);
       } else { //the item was deselected
           output.append("Deselect event occurred on item #"
                          + index + " (\""
                          + list.getItem(index) + "\") in "
                          + language + "." + newline);
       }
}</programlisting>
        </section>
      </section>

      <section>
        <title><ulink
        url="/library/books/tutorial1.02/ui/components/scrollbar.html">ScrollPanes</ulink></title>

        <para>A ScrollPane manages a single child component, displaying as
        much of the component as space permits.</para>

        <para>By default, a scroll pane's scrollbars are visible only when
        they're needed.</para>

        <figure>
          <title>ScrollPane</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="127px" contentwidth="326px"
                         fileref="img/GUI14.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <section>
          <title>Code Example</title>

          <para>ScrollPane sp1 = new ScrollPane(); sp1.add(aComponent);</para>
        </section>

        <section>
          <title>Scrollbar parameters</title>

          <itemizedlist>
            <listitem>
              <para>SCROLLBARS_AS_NEEDED</para>

              <para>The default value. Show each scrollbar only when it's
              needed.</para>
            </listitem>

            <listitem>
              <para>SCROLLBARS_ALWAYS</para>

              <para>Always show scrollbars.</para>
            </listitem>

            <listitem>
              <para>SCROLLBARS_NEVER</para>

              <para>Never show scrollbars. You might use this option if you
              don't want the user to directly control what part of the child
              component is shown.</para>
            </listitem>
          </itemizedlist>

          <para>Example</para>

          <programlisting>ScrollPane sp2 = new ScrollPane(ScrollPane.SCROLLBARS_ALWAYS);</programlisting>
        </section>
      </section>

      <section>
        <title><ulink
        url="/library/books/tutorial1.02/ui/components/text.html">TextComponent</ulink></title>

        <para>The TextComponent derived classes, TextArea and TextField,
        display selectable text and, optionally, allow the user to edit the
        text.</para>

        <figure>
          <title>TextComponent</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="134px" contentwidth="260px"
                         fileref="img/GUI15.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <section>
          <title>TextArea and TextField</title>

          <para>From TextComponent this classes inherit methods that allow
          them to set and get the current selection, enable and disable
          editing, get the currently selected text (or all the text), and set
          the text.</para>

          <literallayout>             Component
                 |
            TextComponent
                 |
          +--------------+
          |              |
       TextArea       TextField</literallayout>
        </section>

        <section>
          <title>Code Example</title>

          <programlisting>//Where instance variables are defined:
TextField textField;
TextArea textArea;

public void init() {
    textField = new TextField(20);
    textField.addActionListener(this);
    textArea = new TextArea(5, 20);
    textArea.setEditable(false);

    ...//Add the two components to the panel. 
}

public void actionPerformed(ActionEvent evt) {
    String text = textField.getText();
    textArea.append(text + "\n");
    textField.selectAll();
}</programlisting>
        </section>
      </section>

      <section>
        <title><ulink
        url="/library/books/tutorial1.02/ui/components/label.html">Menus</ulink></title>

        <para>The following applet shows many of the menu features you're
        likely to use.</para>

        <figure>
          <title>Menu</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="151px" contentwidth="500px"
                         fileref="img/GUI13.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <note>
          <itemizedlist>
            <listitem>
              <para>Menus can exist only in menu bars, and menu bars can be
              attached only to windows (specifically, to Frames).</para>
            </listitem>

            <listitem>
              <para>Classes that provide menu functionality do not inherit
              from Component, since many platforms place severe limits on menu
              capabilities.</para>
            </listitem>
          </itemizedlist>
        </note>

        <section>
          <title>MenuComponent subclasses</title>

          <figure>
            <title>MenuComponent</title>

            <mediaobject>
              <imageobject>
                <imagedata contentdepth="96px" contentwidth="457px"
                           fileref="img/GUI16.gif" format="GIF" />
              </imageobject>
            </mediaobject>
          </figure>

          <itemizedlist>
            <listitem>
              <para>MenuItem</para>

              <para>Each item in a menu is represented by a MenuItem
              object.</para>
            </listitem>

            <listitem>
              <para>CheckboxMenuItem</para>

              <para>Each menu item that contains a checkbox is represented by
              a CheckboxMenuItem object.</para>
            </listitem>

            <listitem>
              <para>Menu</para>

              <para>Each menu is represented by a Menu object. Menu is a
              subclass of MenuItem so that you can create a submenu by adding
              one menu to another.</para>
            </listitem>

            <listitem>
              <para>Popupmenu</para>

              <para>Represents a popup menu.</para>
            </listitem>

            <listitem>
              <para>MenuBar</para>

              <para>The MenuBar class represents the platform-dependent notion
              of a group of menus attached to a window. MenuBars can not be
              bound to Panels.</para>
            </listitem>
          </itemizedlist>
        </section>

        <section>
          <title>MenuContainer Interface</title>

          <para>To be able to contain a MenuComponent, an object must adhere
          to the MenuContainer interface (Frame, Menu, and MenuBar classes
          do)</para>
        </section>
      </section>
    </section>

    <section id="gui_awt_awt_1.1_menus">
      <title>AWT 1.1 Menus</title>

      <section>
        <title>Code Example</title>

        <programlisting>public class MenuWindow extends Frame implements ActionListener
                                                 ItemListener {
    . . .
    public MenuWindow() {
        
        //Build the menu bar.
        mb = new MenuBar();
        setMenuBar(mb);
 
        //Build first menu in the menu bar.
        m1 = new Menu("Menu 1", true);
        mb.add(m1);
        mi1_1 = new MenuItem("Menu Item 1_1");
        m1.add(mi1_1);
           . . .

        //Build help menu.
        m5 = new Menu("Menu 5");
        mb.add(m5); //just setting the help menu doesn't work; must add it
        mb.setHelpMenu(m5);
        mi5_1 = new MenuItem("Menu Item 5_1");
        mi5_1.setShortcut(new MenuShortcut(KeyEvent.VK_5));
        m5.add(mi5_1);
           . . .

        //Build second menu in the menu bar.
        m2 = new Menu("Menu 2");
        mb.add(m2);
        mi2_1 = new CheckboxMenuItem("Menu Item 2_1");
        m2.add(mi2_1);
 
        //Build third menu in the menu bar.
           . . .
        //Register as an ActionListener for all menu items.
        m1.addActionListener(this);
        m2.addActionListener(this);
        m3.addActionListener(this);
                . . .
        //Register as ItemListener on checkbox menu item.
        mi2_1.addItemListener(this);
    }
    . . .
    public void actionPerformed(ActionEvent e) {
        output.append("\"" + e.getActionCommand()
                      + "\" action detected in menu labeled \""
                      + ((MenuItem)(e.getSource())).getLabel() + "\".\n");
    }

    public void itemStateChanged(ItemEvent e) {
        output.append("Item state change detected on item \""
                      + e.getItem()
                      + "\" (state is " 
                      + ((e.getStateChange() == 
                            ItemEvent.SELECTED)? 
                            "selected)."
                          : "deselected).") + "\n");
    }
}</programlisting>
      </section>
    </section>

    <section id="gui_awt_awt_1.1_containers">
      <title>AWT 1.1 Containers</title>

      <section>
        <title>Frames</title>

        <para>The Frame class provides windows for applets and applications.
        Every application needs at least one Frame.</para>

        <section>
          <title>Code Example</title>

          <programlisting>public class MenuWindow extends Frame {
       boolean inAnApplet = true;
       TextArea output;

       public MenuWindow() {
              //Calls the Frame constructor and adds components to the window
              addWindowListener(new WindowAdapter() {
                   public void windowClosing(WindowEvent e) {
                      if (inAnApplet) {
                          dispose();
                      } else {
                          System.exit(0);
                      }
                   }
              }

         . . .

         public static void main(String args[]) {
                MenuWindow window = new MenuWindow();
                window.inAnApplet = false;
                window.setTitle("MenuWindow Application");
                window.setSize(450, 200);
                window.setVisible(true);
         }
}</programlisting>
        </section>

        <section>
          <title>Other methods provided by Frame</title>

          <itemizedlist>
            <listitem>
              <para>String getTitle() and void setTitle(String)</para>

              <para>Returns or sets (respectively) the title of the frame's
              window.</para>
            </listitem>

            <listitem>
              <para>Image getIconImage() and void setIconImage(Image)</para>

              <para>Returns or sets (respectively) the image displayed when
              the window is iconified.</para>
            </listitem>

            <listitem>
              <para>MenuBar getMenuBar() and void setMenuBar(MenuBar)</para>

              <para>Returns or sets (respectively) the menu bar for this
              Frame.</para>
            </listitem>

            <listitem>
              <para>void remove(MenuComponent)</para>

              <para>Removes the specified menu bar from this Frame.</para>
            </listitem>
          </itemizedlist>
        </section>
      </section>

      <section>
        <title><ulink
        url="/library/books/tutorial1.02/ui/components/panel.html">Panels</ulink></title>

        <para>The Panel class is a general-purpose Container subclass. You can
        use it as-is to hold Components, or you can define a subclass to
        perform special functionality, such as event handling for the objects
        the Panel contains.</para>

        <note>
          <para>The Applet class is a Panel subclass with special hooks to run
          in a browser or other applet viewer.</para>
        </note>

        <section>
          <title>Code Example</title>

          <programlisting>Panel p1 = new Panel();
p1.add(new Button("Button 1"));
p1.add(new Button("Button 2"));
p1.add(new Button("Button 3"));</programlisting>

          <para>A Panel subclass that draws a frame around its
          contents.</para>

          <figure>
            <title>Panel Subclass</title>

            <mediaobject>
              <imageobject>
                <imagedata contentdepth="96px" contentwidth="457px"
                           fileref="img/GUI16.gif" format="GIF" />
              </imageobject>
            </mediaobject>
          </figure>

          <programlisting>class FramedArea extends Panel {
    public FramedArea(CoordinatesDemo controller) {
        ...//Set the layout manager.
           //Add any Components this Panel contains...
    }

    //Ensure that no Component is placed on top of the frame.
    //The inset values were determined by trail and error.
    public Insets getInsets() {
        return new Insets(4,4,5,5);
    }

    //Draw the frame at this Panel's edges.
    public void paint(Graphics g) {
        Dimension d = getSize();
        Color bg = getBackground();
 
        g.setColor(bg);
        g.draw3DRect(0, 0, d.width - 1, d.height - 1, true);
        g.draw3DRect(3, 3, d.width - 7, d.height - 7, false);
    }
}</programlisting>
        </section>
      </section>

      <section>
        <title><ulink
        url="/library/books/tutorial1.02/ui/components/dialog.html">Dialogs</ulink></title>

        <para>The AWT provides support for dialogs -- windows that are
        dependent on other windows -- with the Dialog class. It provides a
        useful subclass, FileDialog,that provides dialogs to help the user
        open and save files.</para>

        <figure>
          <title>Dialog</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="121px" contentwidth="473px"
                         fileref="img/GUI10.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <section>
          <title>Code Example</title>

          <programlisting>class SimpleDialog extends Dialog implements ActionListener {
      TextField field;
      DialogWindow parent;
      Button setButton;

      SimpleDialog(Frame dw, String title) {
            super(dw, title, false);
            parent = (DialogWindow)dw;
           
            ...//Create and add components, such as the set button.
           
            //Initialize this dialog to its preferred size.
            pack();
      }

      public void actionPerformed(ActionEvent event) {
             Object source= event.getSource();
             if ((source == setButton) | (source == field))
                      parent.setText(field.getText());
             field.selectAll();
             setVisible(false);
      }
}
     
//Here's the code that brings up the dialog: 

if (dialog == null)
   dialog = new SimpleDialog(this, "A Simple Dialog");

dialog.setVisible(true);</programlisting>
        </section>
      </section>
    </section>

    <section id="gui_awt_awt_peers">
      <title><ulink
      url="/library/books/tutorial1.02/ui/components/peer.html">AWT
      Peers</ulink></title>

      <para>The AWT have classes (components) that provide a
      platform-independent API but that make use of platform-specific
      implementations (peers). Every AWT component object has a peer object
      that controls the object's look and feel.</para>

      <figure>
        <title>AWT Peers</title>

        <mediaobject>
          <imageobject>
            <imagedata contentdepth="187px" contentwidth="438px"
                       fileref="img/GUI17.gif" format="GIF" />
          </imageobject>
        </mediaobject>
      </figure>

      <section>
        <title>How Peers Are Created</title>

        <itemizedlist>
          <listitem>
            <para>Peers are created just before their corresponding component
            object is drawn for the first time.</para>
          </listitem>

          <listitem>
            <para>Just before a container is shown for the first time, its
            peer -- and the peers of all components it contains -- is
            created.</para>
          </listitem>

          <listitem>
            <para>If you add a component to a visible container, you need to
            explicitly tell the AWT to create a peer for the component. You do
            this by calling the validate() method.</para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title>How Peers Handle Events</title>

        <para>Peers implement the feel (and, indirectly, the look) of UI
        components by reacting to user input events.</para>

        <section>
          <title>Event chain</title>

          <itemizedlist>
            <listitem>
              <para>Peers are at the end of the event chain. After all the
              Components in the hierarchy have had an opportunity to handle
              the event, the peer gets to see and react to the event.</para>
            </listitem>

            <listitem>
              <para>From raw events (key presses and mouse clicks) peers
              sometimes generate higher level events (actions, focus changes,
              ...). These higher level events are passed on to the relevant
              Component for handling.</para>
            </listitem>
          </itemizedlist>

          <note>
            <para>For mouse events, the peer is the first to see the event,
            and it doesn't necessarily pass all events on to the
            Component.</para>
          </note>

          <para><ulink url="../audio/Gui20.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>
    </section>
  </chapter>

  <chapter id="distributed_applications">
    <title>Extra: Distributed Applications</title>

    <section id="distributed_applications_applications">
      <title>Applications</title>

      <section>
        <title>Traditional Client/Server applications</title>

        <section>
          <title>Characteristics</title>

          <itemizedlist>
            <listitem>
              <para>Just one server and many clients.</para>
            </listitem>

            <listitem>
              <para>Fixed addresses servers.</para>
            </listitem>

            <listitem>
              <para>Each kind of server has its own communication
              protocol.</para>
            </listitem>
          </itemizedlist>
        </section>

        <section>
          <title>Examples</title>

          <para>File Servers: NFS</para>

          <para>File Transfer Servers: FTP</para>

          <para>Remote login Servers: Telnet</para>
        </section>
      </section>

      <section>
        <title>New Client/Server applications</title>

        <section>
          <title>Characteristics</title>

          <itemizedlist>
            <listitem>
              <para>Many servers and many clients</para>
            </listitem>

            <listitem>
              <para>Location transparency.</para>
            </listitem>

            <listitem>
              <para>Unified protocols for groups of applications.</para>
            </listitem>

            <listitem>
              <para>Secure access.</para>
            </listitem>

            <listitem>
              <para>Administrative tools</para>
            </listitem>
          </itemizedlist>
        </section>

        <section>
          <title>Examples</title>

          <para>RDB Servers: Sybase</para>

          <para>Groupware: World Wide Web.</para>

          <para>Object Oriented: CORBA.</para>

          <para><ulink url="../audio/Servers19.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>

      <section>
        <title>The Client/Server Infrastructure</title>

        <section>
          <title>Graphic View</title>

          <figure>
            <title>Middleware View</title>

            <mediaobject>
              <imageobject>
                <imagedata contentdepth="242px" contentwidth="536px"
                           fileref="img/Servers7.gif" format="GIF" />
              </imageobject>
            </mediaobject>
          </figure>
        </section>

        <section>
          <title>Client</title>

          <itemizedlist>
            <listitem>
              <para>GUI - Graphic User Interface</para>
            </listitem>

            <listitem>
              <para>OOUI - Object Oriented User Interface</para>
            </listitem>

            <listitem>
              <para>DSM - Distributed System Management (Client side)</para>
            </listitem>
          </itemizedlist>
        </section>

        <section>
          <title>Middleware</title>

          <itemizedlist>
            <listitem>
              <para>Service Specific</para>

              <para>SQL middleware</para>

              <para>ODBC (Open Database Connectivity)</para>

              <para>ORB (Object Request Broker)</para>
            </listitem>

            <listitem>
              <para>NOS - Network Operating System</para>

              <para>RPC (Remote Procedure Calls)</para>

              <para>Security</para>

              <para>Distributed File System</para>
            </listitem>

            <listitem>
              <para>Transport Stack</para>

              <para>TCP/IP</para>

              <para>NetBIOS</para>

              <para>IPX/SPX</para>
            </listitem>

            <listitem>
              <para>DSM - Distributed System Management (Middleware)</para>
            </listitem>
          </itemizedlist>

          <para><ulink url="../audio/Servers20.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>

        <section>
          <title>Server</title>

          <itemizedlist>
            <listitem>
              <para>DBMS</para>
            </listitem>

            <listitem>
              <para>TP (Transaction Processing) Monitors</para>
            </listitem>

            <listitem>
              <para>Groupware</para>
            </listitem>

            <listitem>
              <para>Objects</para>
            </listitem>

            <listitem>
              <para>DSM - Distributed System Management (Server side)</para>
            </listitem>
          </itemizedlist>
        </section>
      </section>

      <section>
        <title>Client/Server Application Models</title>

        <section>
          <title>Requirements</title>

          <itemizedlist>
            <listitem>
              <para>Rich transaction processing</para>

              <itemizedlist>
                <listitem>
                  <para>Nested transactions that can span servers</para>
                </listitem>

                <listitem>
                  <para>Transactions that execute over long periods of
                  time</para>
                </listitem>

                <listitem>
                  <para>Secure transactions.</para>
                </listitem>
              </itemizedlist>
            </listitem>

            <listitem>
              <para>Roaming agents</para>

              <itemizedlist>
                <listitem>
                  <para>Personal and Dealer agents.</para>
                </listitem>

                <listitem>
                  <para>Sniffer agents (to search for information).</para>
                </listitem>
              </itemizedlist>
            </listitem>

            <listitem>
              <para>Rich data management</para>

              <itemizedlist>
                <listitem>
                  <para>Create, store, view and edit compound documents from
                  anywhere on the network.</para>
                </listitem>

                <listitem>
                  <para>Compound document technology (like OLE or
                  OpenDoc).</para>
                </listitem>
              </itemizedlist>
            </listitem>
          </itemizedlist>
        </section>

        <section>
          <title>The models</title>

          <itemizedlist>
            <listitem>
              <para>SQL databases</para>
            </listitem>

            <listitem>
              <para>TP Monitors</para>
            </listitem>

            <listitem>
              <para>Groupware</para>
            </listitem>

            <listitem>
              <para>Distributed Objects</para>
            </listitem>
          </itemizedlist>

          <para><ulink url="../audio/Servers21.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>
    </section>

    <section id="distributed_applications_sql_databases">
      <title>SQL Databases</title>

      <section>
        <title>SQL</title>

        <section>
          <title>Definition</title>

          <para>Structured Query Language (SQL) is a standardized language for
          defining and manipulating data in a relational database.</para>
        </section>

        <section>
          <title>The relational model of a database</title>

          <itemizedlist>
            <listitem>
              <para>Set of tables</para>
            </listitem>

            <listitem>
              <para>Relationships are represented by values in tables.</para>
            </listitem>

            <listitem>
              <para>Data is retrieved by specifying a result table that can be
              derived from one or more tables.</para>
            </listitem>
          </itemizedlist>
        </section>
      </section>

      <section>
        <title>Stored Procedures</title>

        <section>
          <title>Definition</title>

          <para>A stored procedure is a named collection of SQL statements and
          procedure logic that is compiled, verified, and stored in a server
          database.</para>
        </section>

        <section>
          <title>Applications</title>

          <itemizedlist>
            <listitem>
              <para>Enforce data integrity</para>
            </listitem>

            <listitem>
              <para>Perform system maintenance</para>
            </listitem>

            <listitem>
              <para>Implement the server side of an application's
              logic.</para>
            </listitem>
          </itemizedlist>
        </section>
      </section>

      <section>
        <title>Main points</title>

        <section>
          <title>Good points</title>

          <itemizedlist>
            <listitem>
              <para>SQL dominates the client/server market today.</para>
            </listitem>

            <listitem>
              <para>It is easy to create applications in
              single-vendor/single-server environments.</para>
            </listitem>

            <listitem>
              <para>There is a wealth GUI tools to create SQL
              applications.</para>
            </listitem>

            <listitem>
              <para>SQL is familiar to millions of programmers and
              users.</para>
            </listitem>
          </itemizedlist>
        </section>

        <section>
          <title>Bad Points</title>

          <itemizedlist>
            <listitem>
              <para>SQL standards lag vendor implementations.</para>
            </listitem>

            <listitem>
              <para>Incompatible vendors implementations.</para>
            </listitem>

            <listitem>
              <para>Difficult in mount heterogeneous database
              environments.</para>
            </listitem>
          </itemizedlist>

          <para><ulink url="../audio/Servers22.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>
    </section>

    <section id="distributed_applications_tp_monitors">
      <title>TP Monitors</title>

      <section>
        <title>Transaction Processing Monitors</title>

        <section>
          <title>Definition</title>

          <para>TP monitors manage processes and coordinate programs by
          breaking complex applications into pieces of code called
          transactions.</para>
        </section>

        <section>
          <title>Monitoring</title>

          <para>A transaction can be managed from its point of origin across
          one or more servers and back to the originating client.</para>
        </section>

        <section>
          <title>Transaction model defines</title>

          <itemizedlist>
            <listitem>
              <para>Transaction's start.</para>
            </listitem>

            <listitem>
              <para>Transaction's end.</para>
            </listitem>

            <listitem>
              <para>Appropriate units of recovery (in case of failure).</para>
            </listitem>
          </itemizedlist>
        </section>
      </section>

      <section>
        <title>Large systems</title>

        <section>
          <title>TPs in systems with large number of clients</title>

          <itemizedlist>
            <listitem>
              <para>Manage Transactions.</para>
            </listitem>

            <listitem>
              <para>Route Transactions across systems.</para>
            </listitem>

            <listitem>
              <para>load-balance execution</para>
            </listitem>

            <listitem>
              <para>Restart then after failure.</para>
            </listitem>
          </itemizedlist>

          <para><ulink url="../audio/Servers23.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>

      <section>
        <title>Nested Transactions</title>

        <figure>
          <title>Nested Transactions</title>

          <mediaobject>
            <imageobject>
              <imagedata contentdepth="344px" contentwidth="652px"
                         fileref="img/Servers8.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <section>
          <title>Main points</title>

          <para>Good points:</para>

          <itemizedlist>
            <listitem>
              <para>TP monitors help the operating system and servers to deal
              with large numbers of clients.</para>
            </listitem>

            <listitem>
              <para>TP monitors can cooperate with other TP monitors in
              federated arrangements.</para>
            </listitem>

            <listitem>
              <para>TP monitors can manage process failures across
              systems.</para>
            </listitem>
          </itemizedlist>

          <para>Bad points:</para>

          <itemizedlist>
            <listitem>
              <para>TP monitors are overkill in single-server, single-vendor
              applications.</para>
            </listitem>

            <listitem>
              <para>TP monitors add unnecessary complexity in small
              systems.</para>
            </listitem>
          </itemizedlist>

          <para><ulink url="../audio/Servers24.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>

      <section id="extra_reading_distributed_applications_groupware">
        <title>Groupware</title>

        <bridgehead>Definition:</bridgehead>

        <para>Technologies to support collaborative work and information
        dissemination.</para>

        <bridgehead>Foundation technologies:</bridgehead>

        <itemizedlist spacing="compact">
          <listitem>
            <para>Multimedia documents</para>
          </listitem>

          <listitem>
            <para>Word Wide Web</para>
          </listitem>

          <listitem>
            <para>E-mail</para>
          </listitem>

          <listitem>
            <para>Conferencing</para>
          </listitem>

          <listitem>
            <para>Lotus Notes</para>
          </listitem>
        </itemizedlist>

        <bridgehead>Work flow model:</bridgehead>

        <para>Data passes from one program to the next in client/server
        environment, simulating real-world collaborative activity.</para>

        <bridgehead>Goals:</bridgehead>

        <itemizedlist spacing="compact">
          <listitem>
            <para>To bring the information to the people and programs who can
            act on it.</para>
          </listitem>

          <listitem>
            <para>To coordinate existing software processes.</para>
          </listitem>

          <listitem>
            <para>To track processes to make sure the work gets done.</para>
          </listitem>
        </itemizedlist>

        <bridgehead>Example Lotus-Notes:</bridgehead>

        <itemizedlist spacing="compact">
          <listitem>
            <para>A reliable, scalable and secure distributed document
            database. The database-centric model gives users the ability to
            assemble, share, and manage the rich variety of documents vital to
            conducting business.</para>
          </listitem>

          <listitem>
            <para>An integrated messaging system. Groupware users must be able
            to take advantage of a messaging infrastructure to send and
            receive electronic mail and move documents through a workflow
            process.</para>
          </listitem>

          <listitem>
            <para>A rich application development environment. Developers must
            be able to rapidly build portable and scalable strategic
            applications which span document-oriented and structured database
            information</para>
          </listitem>
        </itemizedlist>

        <para><ulink url="../audio/Servers25.asf"><inlinegraphic
        fileref="img/asf.gif" format="GIF" />Audio in
        Portuguese</ulink></para>
      </section>

      <section id="extra_reading_distributed_applications_distributed_objects">
        <title>Distributed Objects</title>

        <bridgehead>Definition:</bridgehead>

        <para>Distributed objects are the middleware that establishes
        client-server relationships between objects. A client can
        transparently invoke a method on a server object, which can be on the
        same machine or across a network.</para>

        <section>
          <title>ORB - Object Request Broker</title>

          <bridgehead>Function:</bridgehead>

          <para>The ORB intercepts requests to objects, finds an object that
          can implement this request, passes it the parameters, invokes its
          method, and returns the results of the request.</para>

          <bridgehead>Advantages:</bridgehead>

          <itemizedlist>
            <listitem>
              <para>The client does not have to be aware of where the object
              is located, its programming language, its operating system, or
              any other system aspects that are not part of an object's
              interface.</para>
            </listitem>

            <listitem>
              <para>The ORB provides interoperability between applications on
              different machines in heterogeneous distributed environments and
              seamlessly interconnects multiple object systems</para>
            </listitem>
          </itemizedlist>

          <bridgehead>Request sent through a ORB:</bridgehead>

          <figure>
            <title>Request Through ORB</title>

            <mediaobject>
              <imageobject>
                <imagedata contentdepth="221px" contentwidth="427px"
                           fileref="img/Servers9.gif" format="GIF" />
              </imageobject>
            </mediaobject>
          </figure>

          <para><ulink url="../audio/Servers26.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>

        <section>
          <title>CORBA</title>

          <bridgehead>Definition:</bridgehead>

          <para>The Common Object Request Broker Architecture (CORBA) is a
          standard ORB architecture defined by the Object Management Group (An
          international consortium to develop ORB technology).</para>
        </section>

        <section>
          <title>ORG Interfaces</title>

          <bridgehead>Structure of ORB Interfaces:</bridgehead>

          <figure>
            <title>ORB Interfaces</title>

            <mediaobject>
              <imageobject>
                <imagedata contentdepth="317px" contentwidth="467px"
                           fileref="img/Servers10.gif" format="GIF" />
              </imageobject>
            </mediaobject>
          </figure>

          <bridgehead>The client side:</bridgehead>

          <para>OMG IDL stub</para>

          <blockquote>
            <para>Stubs generated from an IDL specification depending on the
            interface of the target object. They make calls on the rest of the
            ORB .</para>
          </blockquote>

          <para>Dynamic Invocation interface</para>

          <blockquote>
            <para>Interface independent of the target object's interface. It
            allows the dynamic construction of object invocations.</para>
          </blockquote>

          <para>ORB Interface</para>

          <blockquote>
            <para>The interface that goes directly to the ORB which is the
            same for all ORBs and does not depend on the object's interface or
            object adapter.</para>
          </blockquote>

          <para><ulink url="../audio/Servers27.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>

          <bridgehead>The server side (or the Object
          Implementation):</bridgehead>

          <para>IDL Generated Skeleton</para>

          <blockquote>
            <para>A skeleton generated from an IDL specification that is
            specific to a particular language mapping.</para>
          </blockquote>

          <para>Dynamic Skeleton Interface</para>

          <blockquote>
            <para>A skeleton interface is available which allows dynamic
            handling of object invocations analogous to the client side's
            Dynamic Invocation Interface.</para>
          </blockquote>

          <para>Object Adapters</para>

          <blockquote>
            <para>Adapters are the primary means for an object implementation
            to access ORB services such as object reference generation.</para>
          </blockquote>

          <para>ORB Interface</para>

          <blockquote>
            <para>Same as the client's implementation to access ORB services
            such as object reference generation.</para>
          </blockquote>

          <bridgehead>The Interface Definition Language (OMG IDL)</bridgehead>

          <blockquote>
            <para>IDL defines the types of objects by specifying their
            interfaces. An interface consists of a set of named operations and
            the parameters to those operations. Implementation to access ORB
            services such as object reference generation.</para>
          </blockquote>

          <bridgehead>Interoperation with other object systems:</bridgehead>

          <figure>
            <title>Interoperation With Other Systems</title>

            <mediaobject>
              <imageobject>
                <imagedata contentdepth="193px" contentwidth="427px"
                           fileref="img/Servers11.gif" format="GIF" />
              </imageobject>
            </mediaobject>
          </figure>

          <para>The interoperation between system is handed by the ORB of each
          system.</para>

          <para><ulink url="../audio/Servers28.asf"><inlinegraphic
          fileref="img/asf.gif" format="GIF" />Audio in
          Portuguese</ulink></para>
        </section>
      </section>
    </section>
  </chapter>
</book>
