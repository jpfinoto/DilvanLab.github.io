<html>
<head>
<title>Ouvidores</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
</head>

<body bgcolor="#3333FF" onLoad="" link="#33FF33" vlink="#99FFFF">
<p align="center"><font color="#FFFFFF"><b><font size="5">Listeners</font></b></font></p>
<p align="left"><font size="4" color="#FFFFFF">The IBM ViaVoice Java technology is 
  based on the same model used in Graphic User Interface (GUI) programming, that is,
it depends on&nbsp; events 
  generated by the user, events that are intercepted by listeners. These listeners 
  are interfaces implemented by software developers, in this way any kind of processing 
  can be triggered by specific speech events.</font></p>
<p align="left"><font size="4" color="#FFFFFF">All speech events are derived from
the class&nbsp; <a href="../../ref/api/javax/speech/SpeechEvent.html" target="_blank">SpeechEvent</a>, 
  each one with specific information of the occurrence that fired it.</font></p>
<p align="left"><font size="4" color="#FFFFFF">The available listeners are:</font></p>
<ul>
  <li><font size="4" color="#FFFFFF"><a href="../../ref/api/javax/speech/EngineListener.html" target="_blank"><font color="#ffff00"><b> 
    EngineListener</b></font></a><b><font color="#ffff00">:</font></b> interface 
    defining methods to be called when state-change events for a speech engine 
    occur. To receive engine events an application attaches a listener by calling 
    the <a href="../../ref/api/javax/speech/Engine.html#addEngineListener(javax.speech.EngineListener)" target="_blank">addEngineListener</a> 
    method of an Engine. A listener is removed by a call to the <a href="../../ref/api/javax/speech/Engine.html#removeEngineListener(javax.speech.EngineListener)" target="_blank">removeEngineListener</a> 
    method. </font> 
    <p><font size="4" color="#FFFFFF">=&gt; Associated event: <a href="../../ref/api/javax/speech/EngineEvent.html" target="_blank">EngineEvent</a> 
      or one of its derived classes.</font></p>
    <p><font size="4" color="#FFFFFF"> The main events treated are:</font> </p>
  </li>
  <ul>
    <li><font size="4" color="#FFFFFF"><a href="../../ref/api/javax/speech/EngineListener.html#engineAllocated(javax.speech.EngineEvent)" target="_blank">engineAllocated</a>, 
      <a href="../../ref/api/javax/speech/EngineListener.html#engineAllocatingResources(javax.speech.EngineEvent)" target="_blank">engineAllocatingResources</a>, 
      <a href="../../ref/api/javax/speech/EngineListener.html#engineDeallocated(javax.speech.EngineEvent)" target="_blank">engineDeallocated</a>, 
      <a href="../../ref/api/javax/speech/EngineListener.html#engineDeallocatingResources(javax.speech.EngineEvent)" target="_blank">engineDeallocatingResources</a>, 
      </font><a href="../../ref/api/javax/speech/EngineListener.html#engineError(javax.speech.EngineErrorEvent)" target="_blank"><font size="4" color="#33FF33">engineError</font></a><font size="4" color="#FFFFFF">, 
      <a href="../../ref/api/javax/speech/EngineListener.html#enginePaused(javax.speech.EngineEvent)" target="_blank">enginePaused</a> 
      and <a href="../../ref/api/javax/speech/EngineListener.html#engineResumed(javax.speech.EngineEvent)" target="_blank">engineResumed</a>.</font></li>
  </ul>
</ul>
<blockquote> 
  <p><font size="4" color="#FFFFFF"> They can be well understood by observing 
    figure 4.</font></p>
</blockquote>
<p align="center"><img src="../../imagens/ilustracoes/eventos/engine_states.gif" width="696" height="215"></p>
<p align="center"><b>Figure 4 - Engine states.</b></p>
<blockquote> 
  <p><font color="#FFFFFF" size="4">The Engine's working cycle is shown in figure 4: first the engine is created in <a href="../../ref/api/javax/speech/Engine.html#DEALLOCATED" target="_blank">DEALLOCATED</a> 
    state, to initially use it is necessary to call the <a href="../../ref/api/javax/speech/Engine.html#allocate()" target="_blank">allocate</a> 
    method. Then the engine passes to the temporary <a href="../../ref/api/javax/speech/Engine.html#ALLOCATING_RESOURCES" target="_blank">ALLOCATING_RESOURCES</a> 
    state, staying in this condition for a machine dependent time, finally it reaches 
    the <a href="../../ref/api/javax/speech/Engine.html#ALLOCATED" target="_blank">ALLOCATED</a><i> 
    </i>state with its substates: <a href="../../ref/api/javax/speech/Engine.html#RESUMED" target="_blank">RESUMED</a> 
    (default) indicating engine activity and <a href="../../ref/api/javax/speech/Engine.html#PAUSED" target="_blank">PAUSED</a><i> 
    </i>indicating suspended activities, the transition between these states is 
    possible using <a href="../../ref/api/javax/speech/Engine.html#pause()" target="_blank">pause</a> 
  and <a href="../../ref/api/javax/speech/Engine.html#resume()" target="_blank">resume</a> 
  methods. By the end of the engine use, it is recommended that the hardware 
    resources be explicitly freed through the use of the <a href="../../ref/api/javax/speech/Engine.html#deallocate()" target="_blank">deallocate</a> 
    method. After what the engine enters the <a href="../../ref/api/javax/speech/Engine.html#DEALLOCATING_RESOURCES" target="_blank">DEALLOCATING_RESOURCES</a> 
    state and finally gets back to its initial <a href="../../ref/api/javax/speech/Engine.html#DEALLOCATED" target="_blank">DEALLOCATED</a> 
    state. Since recognizer and synthesizers inherit from the Engine Interface they 
    also follow this cycle.</font></p>
  <p><font size="4" color="#FFFFFF">For each of the 5 possible states a unidirectional 
    transition causes an event to be fired, in a total of 6 events plus an engineError 
    possible event. Namely:</font></p>
  <ul>
    <li><font size="4" color="#FFFFFF"><a href="../../ref/api/javax/speech/EngineListener.html#engineAllocated(javax.speech.EngineEvent)" target="_blank">engineAllocated</a>, 
      <a href="../../ref/api/javax/speech/EngineListener.html#engineAllocatingResources(javax.speech.EngineEvent)" target="_blank">engineAllocatingResources</a>, 
      <a href="../../ref/api/javax/speech/EngineListener.html#engineDeallocated(javax.speech.EngineEvent)" target="_blank">engineDeallocated</a>, 
      <a href="../../ref/api/javax/speech/EngineListener.html#engineDeallocatingResources(javax.speech.EngineEvent)" target="_blank">engineDeallocatingResources</a>, 
      </font><a href="../../ref/api/javax/speech/EngineListener.html#engineError(javax.speech.EngineErrorEvent)" target="_blank"><font size="4" color="#FFFFFF">engineError</font></a><font size="4" color="#FFFFFF">, 
      <a href="../../ref/api/javax/speech/EngineListener.html#enginePaused(javax.speech.EngineEvent)" target="_blank">enginePaused</a> 
      and <a href="../../ref/api/javax/speech/EngineListener.html#engineResumed(javax.speech.EngineEvent)" target="_blank">engineResumed</a>.</font></li>
  </ul>
  <p align="right"><a href="../../exemplos/eventos/eventos_exemplo1.java" target="_blank"><img src="../../imagens/codigo_exemplo.gif" width="324" height="59" border="0"></a></p>
  <p>&nbsp;</p>
  <ul>
    <blockquote>
      <hr>
    </blockquote>
    <li><a name="synthlistener"></a><b><font color="#FFFF00" size="4"><a href="../../ref/api/javax/speech/synthesis/SynthesizerListener.html" target="_blank">SynthesizerListener</a>: 
      </font></b><font color="#FFFFFF" size="4">listener dedicated to treat the 
      events generated during the synthesizer working cycle, more precisely during 
      the synthesis function of the engine. It's shown in figure 5:</font> 
      <p><font size="4" color="#FFFFFF">=&gt; Associated event: <a href="../../ref/api/javax/speech/synthesis/SynthesizerEvent.html" target="_blank">SynthesizerEvent</a> 
        or one of its derived classes.</font> </p>
      <p><font color="#FFFFFF" size="4">Through this listener it is possible to 
        take control of the <a href="../sintetizadores/sintetizadores_top.htm#fila" target="_blank">synthesizer's 
        items queue</a>, which changes its state when:</font></p>
    </li>
    <ul>
      <ul>
        <li><font color="#FFFFFF" size="4">a new item is added to the queue via 
          the <a href="../sintetizadores/sintetizadores_top.htm#sintese" target="_blank">speak</a> 
          method<i>.</i></font></li>
        <li><font color="#FFFFFF" size="4">an item is removed from the queue via 
          the <a href="../../ref/api/javax/speech/synthesis/Synthesizer.html#cancelAll()" target="_blank">cancel</a> 
          method. </font></li>
        <li><font color="#FFFFFF" size="4">an item audio output is finished .</font> 
          <p>&nbsp;</p>
          
        </li>
      </ul>
    </ul>
  </ul>
</blockquote>
          <p align="left"><img src="../../imagens/ilustracoes/eventos/sintetizador_states.gif" width="750" height="250"></p>
<blockquote> 
          <p align="center"><b>Figure 5 - Synthesizer states.</b> </p>
  <blockquote> 
    <p><font size="4" color="#FFFFFF">The differences between the synthesizer cycle 
      and engine cycle are the substates of the ALLOCATED state: <i>ALLOCATED RESUMED 
      <a href="../../ref/api/javax/speech/synthesis/Synthesizer.html#QUEUE_EMPTY" target="_blank">QUEUE_EMPTY</a></i>, 
      <i>ALLOCATED RESUMED</i> <i><a href="../../ref/api/javax/speech/synthesis/Synthesizer.html#QUEUE_NOT_EMPTY" target="_blank">QUEUE_NOT_EMPTY</a></i>, 
      <i>ALLOCATED PAUSED</i> <i><a href="../../ref/api/javax/speech/synthesis/Synthesizer.html#QUEUE_EMPTY" target="_blank">QUEUE_EMPTY</a></i> 
    and <i>ALLOCATED PAUSED</i> <i><a href="../../ref/api/javax/speech/synthesis/Synthesizer.html#QUEUE_NOT_EMPTY" target="_blank">QUEUE_NOT_EMPTY</a></i>. 
      It must be observed that the queue condition is independent of the
    synthesizer 
      working condition, items might be added or removed from the queue in both 
      states RESUMED and PAUSED, so these new substates are not part of a cycle 
      but just indicators of the queue state.</font></p>
  </blockquote>
  <blockquote> 
    <p><font size="4" color="#FFFFFF">The possible events are:</font></p>
  </blockquote>
  <ul>
    <ul>
      <li><font color="#FFFFFF" size="4"><a href="../../ref/api/javax/speech/synthesis/SynthesizerListener.html#queueEmptied(javax.speech.synthesis.SynthesizerEvent)" target="_blank">queueEmptied</a>: 
        the speaking queue of the Synthesizer has emptied and the Synthesizer 
        has changed to the QUEUE_EMPTY state. The queue may become empty because 
        speech output of all items in the queue is completed, or because the items 
        have been cancelled. </font></li>
      <li><a href="../../ref/api/javax/speech/synthesis/SynthesizerListener.html#queueUpdated(javax.speech.synthesis.SynthesizerEvent)" target="_blank"><font color="#FFFFFF" size="4">queueUpdated</font></a><font color="#FFFFFF" size="4">: 
        the speech output queue has changed. This event may indicate a change 
        in the state of the Synthesizer from QUEUE_EMPTY to QUEUE_NOT_EMPTY. The event 
        may also occur in the QUEUE_NOT_EMPTY state without changing state. The 
        enumerateQueue method of the Synthesizer will return a changed list. The speech 
        output queue changes when:&nbsp;</font>
        <ul>
          <li><font color="#FFFFFF" size="4"> (a) a new item is placed on the queue with a 
        call to one of the speak methods,&nbsp;</font></li>
          <li><font color="#FFFFFF" size="4"> (b) when an item is removed from the 
        queue with one of the cancel methods (without emptying the queue), or&nbsp;</font></li>
          <li><font color="#FFFFFF" size="4"> 
        (c) when output of the top item of the queue is completed (again, without 
        leaving an empty queue).</font></li>
        </ul>
      </li>
    </ul>
  </ul>
  <blockquote> 
    <p> <font color="#FFFFFF" size="4">This listener inherits from the <a href="../../ref/api/javax/speech/EngineListener.html" target="_blank">EngineListener</a> 
      interface and therefore the same events treated by this listener might be 
      treated by the SynthesizerListener.</font></p>
  </blockquote>
  <p align="right"><a href="../../exemplos/eventos/eventos_exemplo2.java" target="_blank"><img src="../../imagens/codigo_exemplo.gif" width="324" height="59" border="0"></a></p>
  <p align="right"><a href="../../exemplos/eventos/eventos_exemplo2.jsml" target="_blank">JSML 
    file referenced in the above example.</a></p>
  <hr>
</blockquote>
<ul>
  <li><a name="speakablelistener"></a><b><font color="#ffff00"><font size="4"><a href="../../ref/api/javax/speech/synthesis/SpeakableListener.html" target="_blank">SpeakableListener</a>: 
    </font></font></b><font size="4" color="#FFFFFF">listener specially designed 
    to treat events generated during speech synthesis. How to set it up:</font> </li>
</ul>
<ul>
  <ul>
    <li><font color="#FFFFFF" size="4">Providing a SpeakableListener object when 
      calling one of the speak or speakPlainText methods of a</font> <font color="#FFFFFF" size="4">Synthesizer.</font></li>
    <li><font color="#FFFFFF" size="4"> Attaching a SpeakableListener to a Synthesizer 
      with its addSpeakableListener method. </font> 
      <p><font size="4" color="#FFFFFF">=&gt; Associated event: <a href="../../ref/api/javax/speech/synthesis/SpeakableEvent.html" target="_blank">SpeakableEvent</a> 
        or one of its derived classes.</font> </p>
      <p><font size="4" color="#FFFFFF">The events that might be treated by the 
        listener are:</font></p>
      <ul>
        <li><a href="../../ref/api/javax/speech/synthesis/SpeakableListener.html#markerReached(javax.speech.synthesis.SpeakableEvent)" target="_blank"><font size="4" color="#FFFFFF"> 
          markerReached</font></a><font size="4" color="#FFFFFF">: issued when 
          audio output reaches a marker contained in the JSML text of a speech 
          output queue item. The event text is the string of the MARK attribute. 
          The markerType indicates whether the mark is at the opening or close 
          of a JSML element or is an attribute of an empty element (no close). 
          </font></li>
        <li><font size="4" color="#FFFFFF"><a href="../../ref/api/javax/speech/synthesis/SpeakableListener.html#speakableCancelled(javax.speech.synthesis.SpeakableEvent)" target="_blank">speakableCanceled</a>: 
          issued when an item on the synthesizer's speech output queue is cancelled 
          and removed from the queue. A speech output queue item may be cancelled 
          at any time following a call to speak. An item can be cancelled even 
          if it is not at the top of the speech output queue (other SpeakableEvents 
          are issued only to the top-of-queue item). Once cancelled, the listener 
          for the cancelled object receives no further SpeakableEvents. </font></li>
        <li><font size="4" color="#FFFFFF"><a href="../../ref/api/javax/speech/synthesis/SpeakableListener.html#speakableEnded(javax.speech.synthesis.SpeakableEvent)" target="_blank">speakableEnded</a>: 
          issued with the completion of audio output of an object on the speech 
          output queue as the object is removed from the queue. A QUEUE_UPDATED 
          or QUEUE_EMPTIED event is also issued when the speech output queue changes 
          because the speech output of the item at the top of queue is completed. 
          The SpeakableEvent is issued prior to the SynthesizerEvent. </font></li>
        <li><font size="4" color="#FFFFFF"><a href="../../ref/api/javax/speech/synthesis/SpeakableListener.html#speakablePaused(javax.speech.synthesis.SpeakableEvent)">speakablePaused</a>: 
          issued when audio output of the item at the top of a synthesizer's speech 
          output queue is paused. The SPEAKABLE_PAUSED SpeakableEvent is issued 
          prior to the ENGINE_PAUSED event that is issued to the SynthesizerListener. 
          </font></li>
        <li><font size="4" color="#FFFFFF"><a href="../../ref/api/javax/speech/synthesis/SpeakableListener.html#speakableResumed(javax.speech.synthesis.SpeakableEvent)" target="_blank">speakableResumed</a>: 
          issued when audio output of the item at the top of a synthesizer's speech 
          output queue is resumed after a previous pause. The SPEAKABLE_RESUMED 
          SpeakableEvent is issued prior to the ENGINE_RESUMED event that is issued 
          to the SynthesizerListener. </font></li>
        <li><a href="../../ref/api/javax/speech/synthesis/SpeakableListener.html#speakableStarted(javax.speech.synthesis.SpeakableEvent)" target="_blank"><font size="4" color="#33FF33"> 
          speakableStarted</font></a><font size="4" color="#FFFFFF">: issued at 
          the start of audio output of an item on the speech output queue. This 
          event immediately follows the TOP_OF_QUEUE unless the Synthesizer is 
          paused when the speakable text is promoted to the top of the output 
          queue. </font></li>
        <li><font size="4" color="#FFFFFF"><a href="../../ref/api/javax/speech/synthesis/SpeakableListener.html#topOfQueue(javax.speech.synthesis.SpeakableEvent)" target="_blank">topOfQueue</a>: 
          issued when an item on the synthesizer's speech output queue reaches 
          the top of the queue. If the Synthesizer is not paused, the TOP_OF_QUEUE 
          event will be followed immediately by the SPEAKABLE_STARTED event. If 
          the Synthesizer is paused, the SPEAKABLE_STARTED event will be delayed 
          until the Synthesizer is resumed. </font></li>
        <li><font size="4" color="#FFFFFF"><a href="../../ref/api/javax/speech/synthesis/SpeakableListener.html#wordStarted(javax.speech.synthesis.SpeakableEvent)" target="_blank">wordStarted</a>: 
          issued when a synthesis engine starts the audio output of a word in 
          the speech output queue item. The text, wordStart and wordEnd parameters
          define the segment of the speakable string which is now being spoken. 
          </font></li>
      </ul>
      <p>&nbsp;</p>
      <p><font color="#FFFFFF" size="4">It must be observed that, <a href="#synthlistener">SynthesizerListener</a> 
      extends the SDK Java API's <a href="../../ref/api/javax/speech/EngineListener.html" target="_blank">EngineListener</a> 
        differently from the <a href="#speakablelistener">SpeakableListener</a> that
      extends JDK API's </font><font size="4" color="#33FF33"> EventListener</font><font color="#FFFFFF" size="4"> . They have different natures, the former 
        is related to synthesizer's working events (Engine application) and the 
        later is related to synthesis processing events.</font></p>
    </li>
  </ul>
</ul>
<hr>
<ul>
  <li><b><font color="#FFFF00" size="4"><a href="../../ref/api/javax/speech/recognition/RecognizerListener.html" target="_blank"> 
    RecognizerListener</a>: </font></b><font color="#FFFFFF" size="4">listener 
    dedicated to treat events generated during the recognizer working cycle, more 
    precisely during the recognizing function of the <a href="../arquitetura/arquitetura_top.htm" target="_blank">Engine</a>. 
    Through its use it is possible to take control of the recognizer processing 
    events.<br>
    <br>
    </font><font size="4" color="#FFFFFF">=&gt; Associated event: <a href="../../ref/api/javax/speech/recognition/RecognizerEvent.html" target="_blank">RecognizerEvent</a> 
    or one of its derived classes.</font> </li>
</ul>
<p>&nbsp;</p>
    <p align="left"><img src="../../imagens/ilustracoes/eventos/reconhecedor_states.gif" width="810" height="300"></p>
<blockquote> 
  <blockquote> 
    <p align="center"><b>Figure 6 - Recognizer states.</b></p>
  </blockquote>
  <p>&nbsp;</p>
  <p><font size="4" color="#FFFFFF">The difference between the recognizer cycle 
    (figure 6) and the engine cycle are the substates of the ALLOCATED state : <a href="../../ref/api/javax/speech/recognition/Recognizer.html#SUSPENDED" target="_blank">SUSPENDED</a>, 
    <a href="../../ref/api/javax/speech/recognition/Recognizer.html#LISTENING" target="_blank">LISTENING</a> 
    and <a href="../../ref/api/javax/speech/recognition/Recognizer.html#PROCESSING" target="_blank">PROCESSING</a> 
    (figure 7) that indicate the audio input processing state. SUSPENDED is the 
    default state, which changes to LISTENING state due to audio input. Then the 
    PROCESSING state takes place. </font></p>
  <p><font size="4" color="#FFFFFF">The SUSPENDED state is also reached via the 
    recognizer's <a href="../../ref/api/javax/speech/recognition/Recognizer.html#suspend()" target="_blank">suspend</a> 
    method, in this state the audio input is buffered for later processing, to
  leave this SUSPENDED state the <a href="../../ref/api/javax/speech/recognition/Recognizer.html#commitChanges()" target="_blank">comitChanges</a> 
    method should be called then the LISTENING state is reached again. Following we have 
    the recognition cycle:</font></p>
  <p>&nbsp;</p>
</blockquote>
  <p align="left"><img src="../../imagens/ilustracoes/eventos/ciclo_de_reconhecedor_states.gif" width="795" height="285"><a name="figura7"></a></p>
<blockquote> 
  <p align="center"><b>Figure 7 - Recognition cycle.</b></p>
  <blockquote> 
    <p><font size="4" color="#FFFFFF">The states <a href="../../ref/api/javax/speech/recognition/Recognizer.html#FOCUS_ON" target="_blank">FOCUS_ON</a> 
      and <a href="../../ref/api/javax/speech/recognition/Recognizer.html#FOCUS_OFF" target="_blank">FOCUS_OFF</a> 
      are reached through <a href="../../ref/api/javax/speech/recognition/Recognizer.html#requestFocus()" target="_blank">requestFocus</a> 
      and <a href="../../ref/api/javax/speech/recognition/Recognizer.html#releaseFocus()" target="_blank">releaseFocus</a> 
    methods. They indicate if the application has access to the Engine in the case
    where more than one application is running at the same time (just one can
    have access
    at the same moment).</font></p>
    <p><font size="4" color="#FFFFFF">Besides the Engine events, the following events
    can be generated:</font></p>
  </blockquote>
  <ul>
    <ul>
      <li><font color="#FFFFFF" size="4"><a href="../../ref/api/javax/speech/recognition/RecognizerListener.html#changesCommitted(javax.speech.recognition.RecognizerEvent)" target="_blank">changesCommitted</a>: 
        a CHANGES_COMMITTED event is issued as a Recognizer changes from 
        the SUSPENDED state to the LISTENING state and resumed recognition. The 
        GRAMMAR_CHANGES_COMMITTED event is issued to the GrammarListeners of all 
        changed grammars immediately following the CHANGES_COMMITTED event. </font></li>
      <li><a href="../../ref/api/javax/speech/recognition/RecognizerListener.html#focusGained(javax.speech.recognition.RecognizerEvent)" target="_blank"><font size="4" color="#33FF33">focusGained</font></a><font size="4" color="#FFFFFF">: 
        FOCUS_GAINED event is issued as a Recognizer changes from the FOCUS_OFF 
        state to the FOCUS_ON state. A FOCUS_GAINED event typically follows a 
        call to </font><font size="4" color="#33FF33"> requestFocus </font><font size="4" color="#FFFFFF"> on a Recognizer. The GRAMMAR_ACTIVATED event is issued 
        to the GrammarListeners of all activated grammars immediately following 
        this RecognizerEvent. </font></li>
      <li><a href="../../ref/api/javax/speech/recognition/RecognizerListener.html#focusLost(javax.speech.recognition.RecognizerEvent)" target="_blank"><font size="4" color="#33FF33">focusLost</font></a><font size="4" color="#FFFFFF">: 
        FOCUS_LOST event is issued as a Recognizer changes from the FOCUS_ON 
        state to the FOCUS_OFF state. A FOCUS_LOST event may follow a call to 
        </font><font size="4" color="#33FF33"> 
        releaseFocus 
        </font><font size="4" color="#FFFFFF"> on a Recognizer or follow a request for focus by another 
        application. The GRAMMAR_DEACTIVATED event is issued to the GrammarListeners 
        of all deactivated grammars immediately following this RecognizerEvent. 
        </font></li>
      <li><font size="4" color="#FFFFFF"><a href="../../ref/api/javax/speech/recognition/RecognizerListener.html#recognizerProcessing(javax.speech.recognition.RecognizerEvent)" target="_blank">recognizerProcessing</a>: 
        a RECOGNIZER_PROCESSING event is issued as a Recognizer changes 
        from the LISTENING state to the PROCESSING state. </font></li>
      <li><a href="../../ref/api/javax/speech/recognition/RecognizerListener.html#recognizerSuspended(javax.speech.recognition.RecognizerEvent)" target="_blank"><font size="4" color="#33FF33">recognizerSuspended</font></a><font size="4" color="#FFFFFF">: 
        a RECOGNIZER_SUSPENDED event is issued as a Recognizer changes from 
        either the LISTENING state or the PROCESSING state to the SUSPENDED state. 
        A Result finalization event (either a RESULT_ACCEPTED or RESULT_REJECTED 
        event) is issued immediately following the RECOGNIZER_SUSPENDED event. 
        </font></li>
    </ul>
  </ul>
  <p align="right"><a href="../../exemplos/eventos/eventos_exemplo3.java" target="_blank"><img src="../../imagens/codigo_exemplo.gif" width="324" height="59" border="0"></a></p>
  <p><font color="#FFFFFF" size="4">The RecognizerListener extends the <a href="../../ref/api/javax/speech/EngineListener.html" target="_blank">EngineListener</a> 
    interface and, therefore, the same events treated by it might be 
    treated by the RecognizerListener.</font></p>
  <hr>
</blockquote>
<ul>
  <li><b><font color="#FFFF00" size="4"><a href="../../ref/api/javax/speech/recognition/RecognizerAudioListener.html" target="_blank">RecognizerAudioListener</a>: </font></b><font color="#FFFFFF" size="4">listener 
    used to take care of operational audio events.</font> 
    <p><font size="4" color="#FFFFFF">=&gt; Associated event: <a href="../../ref/api/javax/speech/recognition/RecognizerAudioEvent.html" target="_blank">RecognizerAudioEvent</a> 
      or one of its derived classes.</font> </p>
    <p><font color="#FFFFFF" size="4">We have:</font> </p>
  </li>
  <ul>
    <li><font color="#FFFFFF" size="4"><a href="../../ref/api/javax/speech/recognition/RecognizerAudioListener.html#audioLevel(javax.speech.recognition.RecognizerAudioEvent)" target="_blank">audioLevel</a>: 
      AUDIO_LEVEL event indicates a change in the volume level of the incoming 
      audio. This volume ranges from 0.0 to 1.0.</font></li>
    <li><a href="../../ref/api/javax/speech/recognition/RecognizerAudioListener.html#speechStarted(javax.speech.recognition.RecognizerAudioEvent)" target="_blank"><font size="4" color="#33FF33"> 
      speechStarted</font></a><font size="4" color="#FFFFFF">: the recognizer 
      has detected the possible start of speech in the incoming audio. Applications 
      may use this event to display visual feedback to a user indicating that 
      the recognizer is listening. </font></li>
    <li><font size="4" color="#FFFFFF"><a href="../../ref/api/javax/speech/recognition/RecognizerAudioListener.html#speechStarted(javax.speech.recognition.RecognizerAudioEvent)" target="_blank">speechStopped</a>: 
      the recognizer has detected the end of speech or noise in the incoming audio 
      that it previously indicated by a SPEECH_STARTED event. This event always 
      follows a SPEECH_STARTED event. </font></li>
  </ul>
</ul>
<blockquote> 
  <p align="right"><a href="../../exemplos/eventos/eventos_exemplo4.java" target="_blank"><img src="../../imagens/codigo_exemplo.gif" width="324" height="59" border="0"></a></p>
  <hr>
</blockquote>
<ul>
  <li><font color="#FFFFFF" size="4"><a href="../../ref/api/javax/speech/recognition/GrammarListener.html" target="_blank">GrammarListener</a>: 
    controls the events generated due to changes in <a href="../../ref/api/javax/speech/recognition/Grammar.html" target="_blank">Grammar</a> 
    objects.</font> 
    <p><font size="4" color="#FFFFFF">=&gt; Associated event: <a href="../../ref/api/javax/speech/recognition/GrammarEvent.html" target="_blank">GrammarEvent</a> 
      or one of its derived classes.</font> </p>
    <p><font size="4" color="#FFFFFF">Its events:</font></p>
  </li>
  <ul>
    <li><font color="#FFFFFF" size="4"><a href="../../ref/api/javax/speech/recognition/GrammarListener.html#grammarActivated(javax.speech.recognition.GrammarEvent)" target="_blank">grammarActivated</a>: 
      a GRAMMAR_ACTIVATED event is issued when a grammar changes state from deactivated 
      to activated. The 
      </font><font color="#33FF33" size="4"> isActive 
      </font><font color="#FFFFFF" size="4"> method of the Grammar will now return true. Grammar 
      activation changes follow one of two RecognizerEvents:&nbsp; 
      </font>
      <ul>
        <li><font color="#FFFFFF" size="4">a CHANGES_COMMITTED 
      event in which a grammar's enabled flag is set true. 
      </font></li>
        <li><font color="#FFFFFF" size="4">a FOCUS_GAINED 
      event.&nbsp; 
      </font></li>
      </ul>
      <p><font color="#FFFFFF" size="4"> The full details of the activation conditions under which a Grammar 
      is activated are described in the documentation for the Grammar interface. 
      </font></li>
    <li><a href="../../ref/api/javax/speech/recognition/GrammarListener.html#grammarChangesCommitted(javax.speech.recognition.GrammarEvent)" target="_blank"><font size="4" color="#33FF33"> 
      grammarChangesCommitted</font></a><font size="4" color="#FFFFFF">: A GRAMMAR_CHANGES_COMMITTED 
      event is issued when a Recognizer completes committing changes to a Grammar. 
      The event is issued immediately following the CHANGES_COMMITTED event that 
      is issued to RecognizerListeners. That event indicates that changes have 
      been applied to all grammars of a Recognizer. The GRAMMAR_CHANGES_COMMITTED 
      event is specific to each individual grammar. The event is issued when the 
      definition of the grammar is changed, when its enabled property is changed, 
      or both. </font></li>
    <li><font size="4" color="#FFFFFF"><a href="../../ref/api/javax/speech/recognition/GrammarListener.html#grammarDeactivated(javax.speech.recognition.GrammarEvent)" target="_blank">grammarDeactivated</a>: 
      a GRAMMAR_DEACTIVATED event is issued when a grammar changes state from 
      activated to deactivated. The </font><font size="4" color="#33FF33"> isActive </font><font size="4" color="#FFFFFF"> method of the Grammar will now return 
      false. Grammar deactivation changes follow one of two RecognizerEvents: </font>
      <ul>
        <li><font size="4" color="#FFFFFF">a CHANGES_COMMITTED event in which a grammar's enabled flag is set false. </font></li>
        <li><font size="4" color="#FFFFFF">a FOCUS_LOST event.&nbsp; </font></li>
      </ul>
      <p><font size="4" color="#FFFFFF"> The full details of the activation conditions 
      under which a Grammar is deactivated are described in the documentation 
      for the Grammar interface. </font></li>
  </ul>
</ul>
<p align="right"><a href="../../exemplos/eventos/eventos_exemplo5.java" target="_blank"><img src="../../imagens/codigo_exemplo.gif" width="324" height="59" border="0"></a></p>
<hr>
<a name="resultlistener"></a><b><font color="#FFFF00" size="4"><a href="../../ref/api/javax/speech/recognition/ResultListener.html" target="_blank">ResultListener</a>: </font></b><font color="#FFFFFF" size="4">this is the main 
listener of all, it is responsible for listening the events generated by the <a href="../../ref/api/javax/speech/recognition/Result.html" target="_blank">Result</a> 
objects, that are created by the recognizers that work together with grammar objects. 
Implementing this interface enables the developer to determine what processing 
must be done to answer a specific event. It is associated with <a href="../../ref/api/javax/speech/recognition/ResultEvent.html" target="_blank">ResultEvent</a> 
objects that carry information about the recognizer, the grammar and the event.</font> 
<ul>
  <table width="93%" border="1">
    <tr> 
      <td> 
        <div align="center"><font size="4" color="#FFFFFF">The Result objects 
          carry information about the grammar to which it was associated, about 
          the recognizer that created it, strings named <a href="../../ref/api/javax/speech/recognition/ResultToken.html" target="_blank"> 
          ResultToken</a> representing what was said (when possible), information 
          about the spoken sound on the form of an AudioClip and data that can 
          be used for training the recognizer.</font></div>
      </td>
    </tr>
  </table>
  <div align="center"> <br>
    <b>Table 9 - Information carried by a Result object.</b> </div>
</ul>
<blockquote> 
  <p><font size="4" color="#FFFFFF">The possible Result object states are:</font></p>
  <ul>
    <li><font color="#FFFFFF" size="4">FINALIZED: </font> 
      <ul>
        <li><font color="#FFFFFF" size="4">ACCEPTED: the audio item was understood 
          and an association with one of the active grammars was determined.</font></li>
        <li><font color="#FFFFFF" size="4">REJECTED: the audio item was understood, 
          but the recognizer consider a high possibility of a mistake having been
          made. That means, the recognizer was able to understand what was said (to associate 
          a string, or token, meaning the heard sound), but there were not enough information to be sure of the recognition due to a poor 
          sound quality, a bad pronounce or even to hardware problems. These results 
          must be carefully treated by the application.</font></li>
      </ul>
    </li>
    <li><font color="#FFFFFF" size="4">UNFINALIZED: the audio item was understood 
      and it's been processed, but it was not possible to determine an association 
      with one of the active grammars.</font></li>
  </ul>
  <p><font size="4" color="#FFFFFF">=&gt; Associated event: <a href="../../ref/api/javax/speech/recognition/ResultEvent.html" target="_blank">ResultEvent</a> 
    or one of its derived classes.</font> </p>
</blockquote>
<ul>
  <ul>
    <li><a href="../../ref/api/javax/speech/recognition/ResultListener.html#audioReleased(javax.speech.recognition.ResultEvent)" target="_blank"><font size="4" color="#33FF33"> 
      audioReleased</font></a><font size="4" color="#FFFFFF">: AUDIO_RELEASED 
      event is issued when the audio information associated with a FinalResult 
      object is released. The release may have been requested by an application 
      call to </font><font size="4" color="#33FF33"> releaseAudio </font><font size="4" color="#FFFFFF"> in the FinalResult interface or may be initiated by 
      the recognizer to reclaim memory. The FinalResult </font><font size="4" color="#33FF33">isAudioAvailable </font><font size="4" color="#FFFFFF"> method 
      returns false after this event. The AUDIO_RELEASED event is only issued 
      for results in a finalized state (</font><font size="4" color="#33FF33">getResultState </font><font size="4" color="#FFFFFF"> returns either ACCEPTED 
      or REJECTED). </font></li>
    <li><font size="4" color="#FFFFFF"><a href="../../ref/api/javax/speech/recognition/ResultListener.html#grammarFinalized(javax.speech.recognition.ResultEvent)" target="_blank">grammarFinalized</a>: 
      GRAMMAR_FINALIZED is issued when the Grammar matched by a Result is identified 
      and finalized. Before this event the </font><font size="4" color="#33FF33"> getGrammar </font><font size="4" color="#FFFFFF"> method of a Result returns 
      null. Following the event it is guaranteed to return non-null and the grammar 
      is guaranteed not to change. The GRAMMAR_FINALIZED event only occurs for 
      a Result that is in the UNFINALIZED state. A GRAMMAR_FINALIZED event does not 
      affect finalized or unfinalized tokens. </font></li>
    <li><a name="accepted"></a><font size="4" color="#FFFFFF"><a href="../../ref/api/javax/speech/recognition/ResultListener.html#resultAccepted(javax.speech.recognition.ResultEvent)" target="_blank">resultAccepted</a>: 
      RESULT_ACCEPTED event is issued when a Result is successfully finalized 
      and indicates a state change from UNFINALIZED to ACCEPTED. In the finalization 
      transition, zero or more tokens may be finalized and the unfinalized tokens 
      are set to null. The isTokenFinalized and isUnfinalizedTokensChanged flags 
      are set appropriately.&nbsp;&nbsp;&nbsp; </font></li>
    <li><a name="resultCreated"></a><font size="4" color="#FFFFFF"><a href="../../ref/api/javax/speech/recognition/ResultListener.html#resultCreated(javax.speech.recognition.ResultEvent)" target="_blank">resultCreated</a>: 
      RESULT_CREATED is issued when a new Result is created. The event is received 
      by each ResultListener attached to the Recognizer. When a result is created, 
      it is in the UNFINALIZED state. When created the result may have zero or 
      more finalized tokens and zero or more unfinalized tokens. The presence 
      of finalized and unfinalized tokens is indicated by the isTokenFinalized 
      and isUnfinalizedTokensChanged flags.&nbsp; </font></li>
    <li><font size="4" color="#FFFFFF"><a name="rejected"></a><a href="../../ref/api/javax/speech/recognition/ResultListener.html#resultRejected(javax.speech.recognition.ResultEvent)" target="_blank">resultRejected</a>: 
      RESULT_REJECTED event is issued when a Result is unsuccessfully finalized 
      and indicates a change from the UNFINALIZED state to the REJECTED state. 
      In the state transition, zero or more tokens may be finalized and the unfinalized 
      tokens are set to null. The isTokenFinalized and isUnfinalizedTokensChanged 
      flags are set appropriately. However, because the result is rejected, the 
      tokens are quite likely to be incorrect. Since the Result is finalized (rejected), 
      the methods of FinalResult can be used.&nbsp; </font></li>
    <li><font size="4" color="#FFFFFF"><a href="../../ref/api/javax/speech/recognition/ResultListener.html#resultUpdated(javax.speech.recognition.ResultEvent)" target="_blank">resultUpdated</a>: 
      a RESULT_UPDATED event has occured because a token has been finalized and/or 
      the unfinalized text of a result has changed. The event is issued to each 
      ResultListener attached to the Recognizer, to each ResultListener attached 
      to the Result, and if the GRAMMAR_FINALIZED event has already been released 
      to each ResultListener attached to the matched Grammar. </font></li>
    <li><font size="4" color="#FFFFFF"><a href="../../ref/api/javax/speech/recognition/ResultListener.html#trainingInfoReleased(javax.speech.recognition.ResultEvent)" target="_blank">trainingInfoReleased</a>: 
      TRAINING_INFO_RELEASED event is issued when the training information for 
      a finalized result is released. The release may have been requested by 
      an application call to the </font><font size="4" color="#33FF33"> releaseTrainingInfo </font><font size="4" color="#FFFFFF"> method in the FinalResult 
      interface or may be initiated by the recognizer to reclaim memory.&nbsp; </font></li>
  </ul>
  <blockquote> 
    <p align="right"><a href="../../exemplos/eventos/eventos_exemplo6.java" target="_blank"><img src="../../imagens/codigo_exemplo.gif" width="324" height="59" border="0"></a></p>
  </blockquote>
</ul>
<font size="4" color="#FFFFFF">Detailed information of <a href="../../ref/api/javax/speech/recognition/Result.html" target="_blank">Result</a> 
objects are presented on the next section <a href="../resultados/resultados.htm" target="topicos">Results</a>.</font> 
<br>
<br>
<br>
</body>
</html>
